
PDServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031f0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033b8  080033b8  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080033b8  080033b8  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033b8  080033b8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033b8  080033b8  000133b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033bc  080033bc  000133bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080033c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          000000b0  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d8  200000d8  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 14 .debug_info   000080b6  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001351  00000000  00000000  00028151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007e8  00000000  00000000  000294a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000614  00000000  00000000  00029c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fbde  00000000  00000000  0002a2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009b8c  00000000  00000000  00049e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4d15  00000000  00000000  00053a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002184  00000000  00000000  00118724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0011a8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000028 	.word	0x20000028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003370 	.word	0x08003370

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	08003370 	.word	0x08003370

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	db0b      	blt.n	8000a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	f003 021f 	and.w	r2, r3, #31
 8000a2c:	4907      	ldr	r1, [pc, #28]	; (8000a4c <__NVIC_EnableIRQ+0x38>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	2001      	movs	r0, #1
 8000a36:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e100 	.word	0xe000e100

08000a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	; (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	; (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <TIM4_IRQHandler>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void TIM4_IRQHandler(void) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
	// Rising or falling edge trigger:
	if (TIM4->SR & TIM_SR_CC1IF) {
 8000aa8:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <TIM4_IRQHandler+0xc4>)
 8000aaa:	691b      	ldr	r3, [r3, #16]
 8000aac:	f003 0302 	and.w	r3, r3, #2
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d039      	beq.n	8000b28 <TIM4_IRQHandler+0x84>

		TIM4->SR &= ~TIM_SR_CC1IF;
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <TIM4_IRQHandler+0xc4>)
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	4a2b      	ldr	r2, [pc, #172]	; (8000b68 <TIM4_IRQHandler+0xc4>)
 8000aba:	f023 0302 	bic.w	r3, r3, #2
 8000abe:	6113      	str	r3, [r2, #16]
		if (!capture_flag) {		       // Rising edge
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <TIM4_IRQHandler+0xc8>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f083 0301 	eor.w	r3, r3, #1
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d016      	beq.n	8000afe <TIM4_IRQHandler+0x5a>
			thigh = TIM4->CCR1;          // Store time of rising edge
 8000ad0:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <TIM4_IRQHandler+0xc4>)
 8000ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad4:	ee07 3a90 	vmov	s15, r3
 8000ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000adc:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <TIM4_IRQHandler+0xcc>)
 8000ade:	edc3 7a00 	vstr	s15, [r3]
			TIM4->CCER ^= TIM_CCER_CC1P; // Switch to capturing falling edge
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <TIM4_IRQHandler+0xc4>)
 8000ae4:	6a1b      	ldr	r3, [r3, #32]
 8000ae6:	4a20      	ldr	r2, [pc, #128]	; (8000b68 <TIM4_IRQHandler+0xc4>)
 8000ae8:	f083 0302 	eor.w	r3, r3, #2
 8000aec:	6213      	str	r3, [r2, #32]
			capture_flag = true;
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <TIM4_IRQHandler+0xc8>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
			overflow_count = 0;          // Reset overflow, as this is a new time capture
 8000af4:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <TIM4_IRQHandler+0xd0>)
 8000af6:	f04f 0200 	mov.w	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	e014      	b.n	8000b28 <TIM4_IRQHandler+0x84>
		} else { // Falling edge
			tlow = TIM4->CCR1;           // Store time of the falling edge using CCR
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <TIM4_IRQHandler+0xc4>)
 8000b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b02:	ee07 3a90 	vmov	s15, r3
 8000b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <TIM4_IRQHandler+0xd4>)
 8000b0c:	edc3 7a00 	vstr	s15, [r3]
      capture_flag = false;
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <TIM4_IRQHandler+0xc8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
      capture_done_flag = true;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <TIM4_IRQHandler+0xd8>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
			TIM4->CCER ^= TIM_CCER_CC1P; // Switch back to capture the rising edge
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <TIM4_IRQHandler+0xc4>)
 8000b1e:	6a1b      	ldr	r3, [r3, #32]
 8000b20:	4a11      	ldr	r2, [pc, #68]	; (8000b68 <TIM4_IRQHandler+0xc4>)
 8000b22:	f083 0302 	eor.w	r3, r3, #2
 8000b26:	6213      	str	r3, [r2, #32]
		}
	}
  
  // Overflow of TIM4, increment the overflow count
  // to ensure proper calculation of time duration.
	if (TIM4->SR & TIM_SR_UIF) {
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <TIM4_IRQHandler+0xc4>)
 8000b2a:	691b      	ldr	r3, [r3, #16]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d014      	beq.n	8000b5e <TIM4_IRQHandler+0xba>
		TIM4->SR &= ~TIM_SR_UIF;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <TIM4_IRQHandler+0xc4>)
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <TIM4_IRQHandler+0xc4>)
 8000b3a:	f023 0301 	bic.w	r3, r3, #1
 8000b3e:	6113      	str	r3, [r2, #16]
		if (capture_flag) {
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <TIM4_IRQHandler+0xc8>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d009      	beq.n	8000b5e <TIM4_IRQHandler+0xba>
			overflow_count++;
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <TIM4_IRQHandler+0xd0>)
 8000b4c:	edd3 7a00 	vldr	s15, [r3]
 8000b50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <TIM4_IRQHandler+0xd0>)
 8000b5a:	edc3 7a00 	vstr	s15, [r3]
		}
	}
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	40000800 	.word	0x40000800
 8000b6c:	20000080 	.word	0x20000080
 8000b70:	2000004c 	.word	0x2000004c
 8000b74:	20000058 	.word	0x20000058
 8000b78:	20000050 	.word	0x20000050
 8000b7c:	20000081 	.word	0x20000081

08000b80 <calculate_elevator_turn_activity>:

#define TIM4_MAX_CLOCK 65536
#define SERVO_ENCODER_MAX_PWM_TIME_MS 1.1

void calculate_elevator_turn_activity(void) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  if (!capture_done_flag) return;
 8000b86:	4b60      	ldr	r3, [pc, #384]	; (8000d08 <calculate_elevator_turn_activity+0x188>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	f083 0301 	eor.w	r3, r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f040 80af 	bne.w	8000cf6 <calculate_elevator_turn_activity+0x176>

  uint32_t total_time_elapsed = (tlow - thigh) + overflow_count * TIM4_MAX_CLOCK;
 8000b98:	4b5c      	ldr	r3, [pc, #368]	; (8000d0c <calculate_elevator_turn_activity+0x18c>)
 8000b9a:	ed93 7a00 	vldr	s14, [r3]
 8000b9e:	4b5c      	ldr	r3, [pc, #368]	; (8000d10 <calculate_elevator_turn_activity+0x190>)
 8000ba0:	edd3 7a00 	vldr	s15, [r3]
 8000ba4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ba8:	4b5a      	ldr	r3, [pc, #360]	; (8000d14 <calculate_elevator_turn_activity+0x194>)
 8000baa:	edd3 7a00 	vldr	s15, [r3]
 8000bae:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8000d18 <calculate_elevator_turn_activity+0x198>
 8000bb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bbe:	ee17 3a90 	vmov	r3, s15
 8000bc2:	607b      	str	r3, [r7, #4]
  pulse_width = total_time_elapsed/1000;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a55      	ldr	r2, [pc, #340]	; (8000d1c <calculate_elevator_turn_activity+0x19c>)
 8000bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bcc:	099b      	lsrs	r3, r3, #6
 8000bce:	ee07 3a90 	vmov	s15, r3
 8000bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bd6:	4b52      	ldr	r3, [pc, #328]	; (8000d20 <calculate_elevator_turn_activity+0x1a0>)
 8000bd8:	edc3 7a00 	vstr	s15, [r3]

  PWM_duty_cycle = ((pulse_width) / (SERVO_ENCODER_MAX_PWM_TIME_MS)) * 100;
 8000bdc:	4b50      	ldr	r3, [pc, #320]	; (8000d20 <calculate_elevator_turn_activity+0x1a0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fc5d 	bl	80004a0 <__aeabi_f2d>
 8000be6:	a346      	add	r3, pc, #280	; (adr r3, 8000d00 <calculate_elevator_turn_activity+0x180>)
 8000be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bec:	f7ff fdda 	bl	80007a4 <__aeabi_ddiv>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	4610      	mov	r0, r2
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	4b49      	ldr	r3, [pc, #292]	; (8000d24 <calculate_elevator_turn_activity+0x1a4>)
 8000bfe:	f7ff fca7 	bl	8000550 <__aeabi_dmul>
 8000c02:	4602      	mov	r2, r0
 8000c04:	460b      	mov	r3, r1
 8000c06:	4610      	mov	r0, r2
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f7ff feb3 	bl	8000974 <__aeabi_d2f>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4a45      	ldr	r2, [pc, #276]	; (8000d28 <calculate_elevator_turn_activity+0x1a8>)
 8000c12:	6013      	str	r3, [r2, #0]
  float newTheta = (units_full_circle - 1) - ((PWM_duty_cycle - dcMin) * units_full_circle) / (dcMax - dcMin + 1);
 8000c14:	4b45      	ldr	r3, [pc, #276]	; (8000d2c <calculate_elevator_turn_activity+0x1ac>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	ee07 3a90 	vmov	s15, r3
 8000c1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c22:	4b41      	ldr	r3, [pc, #260]	; (8000d28 <calculate_elevator_turn_activity+0x1a8>)
 8000c24:	edd3 6a00 	vldr	s13, [r3]
 8000c28:	4b41      	ldr	r3, [pc, #260]	; (8000d30 <calculate_elevator_turn_activity+0x1b0>)
 8000c2a:	edd3 7a00 	vldr	s15, [r3]
 8000c2e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000c32:	4b3e      	ldr	r3, [pc, #248]	; (8000d2c <calculate_elevator_turn_activity+0x1ac>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	ee07 3a90 	vmov	s15, r3
 8000c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c3e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000c42:	4b3c      	ldr	r3, [pc, #240]	; (8000d34 <calculate_elevator_turn_activity+0x1b4>)
 8000c44:	edd3 6a00 	vldr	s13, [r3]
 8000c48:	4b39      	ldr	r3, [pc, #228]	; (8000d30 <calculate_elevator_turn_activity+0x1b0>)
 8000c4a:	edd3 7a00 	vldr	s15, [r3]
 8000c4e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000c56:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8000c5a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c62:	edc7 7a00 	vstr	s15, [r7]

  // Calculate turns based on rotational quadrants (see unit circle)
  if ((newTheta < q2min) && (theta > q3max)) { // If 4th to 1st quadrant
 8000c66:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <calculate_elevator_turn_activity+0x1b8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	ee07 3a90 	vmov	s15, r3
 8000c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c72:	ed97 7a00 	vldr	s14, [r7]
 8000c76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c7e:	d513      	bpl.n	8000ca8 <calculate_elevator_turn_activity+0x128>
 8000c80:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <calculate_elevator_turn_activity+0x1bc>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	ee07 3a90 	vmov	s15, r3
 8000c88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c8c:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <calculate_elevator_turn_activity+0x1c0>)
 8000c8e:	edd3 7a00 	vldr	s15, [r3]
 8000c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9a:	d505      	bpl.n	8000ca8 <calculate_elevator_turn_activity+0x128>
    turns++;
 8000c9c:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <calculate_elevator_turn_activity+0x1c4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	4a28      	ldr	r2, [pc, #160]	; (8000d44 <calculate_elevator_turn_activity+0x1c4>)
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	e01f      	b.n	8000ce8 <calculate_elevator_turn_activity+0x168>
  } else if ((theta < q2min) && (newTheta > q3max)) { // If in 1st to 4th quadrant
 8000ca8:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <calculate_elevator_turn_activity+0x1b8>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	ee07 3a90 	vmov	s15, r3
 8000cb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cb4:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <calculate_elevator_turn_activity+0x1c0>)
 8000cb6:	edd3 7a00 	vldr	s15, [r3]
 8000cba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc2:	dd11      	ble.n	8000ce8 <calculate_elevator_turn_activity+0x168>
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <calculate_elevator_turn_activity+0x1bc>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	ee07 3a90 	vmov	s15, r3
 8000ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd0:	ed97 7a00 	vldr	s14, [r7]
 8000cd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cdc:	dd04      	ble.n	8000ce8 <calculate_elevator_turn_activity+0x168>
    turns--;
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <calculate_elevator_turn_activity+0x1c4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <calculate_elevator_turn_activity+0x1c4>)
 8000ce6:	6013      	str	r3, [r2, #0]
  }

  capture_done_flag = 0;
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <calculate_elevator_turn_activity+0x188>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
  theta = newTheta;
 8000cee:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <calculate_elevator_turn_activity+0x1c0>)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	e000      	b.n	8000cf8 <calculate_elevator_turn_activity+0x178>
  if (!capture_done_flag) return;
 8000cf6:	bf00      	nop
}
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	9999999a 	.word	0x9999999a
 8000d04:	3ff19999 	.word	0x3ff19999
 8000d08:	20000081 	.word	0x20000081
 8000d0c:	20000050 	.word	0x20000050
 8000d10:	2000004c 	.word	0x2000004c
 8000d14:	20000058 	.word	0x20000058
 8000d18:	47800000 	.word	0x47800000
 8000d1c:	10624dd3 	.word	0x10624dd3
 8000d20:	20000068 	.word	0x20000068
 8000d24:	40590000 	.word	0x40590000
 8000d28:	2000006c 	.word	0x2000006c
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000004 	.word	0x20000004
 8000d34:	20000008 	.word	0x20000008
 8000d38:	2000000c 	.word	0x2000000c
 8000d3c:	20000010 	.word	0x20000010
 8000d40:	20000048 	.word	0x20000048
 8000d44:	20000044 	.word	0x20000044

08000d48 <main>:

int main(void) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  HAL_Init();
 8000d4e:	f000 fb39 	bl	80013c4 <HAL_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000d52:	b662      	cpsie	i
}
 8000d54:	bf00      	nop
  __enable_irq();
  SystemClock_Config();
 8000d56:	f000 f9ab 	bl	80010b0 <SystemClock_Config>
  TIM4_IRQHandler();
 8000d5a:	f7ff fea3 	bl	8000aa4 <TIM4_IRQHandler>
  MX_GPIO_Init();
 8000d5e:	f000 fa89 	bl	8001274 <MX_GPIO_Init>
  Timer4_Init();
 8000d62:	f000 fa03 	bl	800116c <Timer4_Init>
  HAL_TIM_Base_Start(&htim4);
 8000d66:	4853      	ldr	r0, [pc, #332]	; (8000eb4 <main+0x16c>)
 8000d68:	f002 f8f4 	bl	8002f54 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4851      	ldr	r0, [pc, #324]	; (8000eb4 <main+0x16c>)
 8000d70:	f002 f958 	bl	8003024 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_CaptureCallback(&htim4);
 8000d74:	484f      	ldr	r0, [pc, #316]	; (8000eb4 <main+0x16c>)
 8000d76:	f002 fa9f 	bl	80032b8 <HAL_TIM_IC_CaptureCallback>
  TIM3_Configuration();
 8000d7a:	f000 f941 	bl	8001000 <TIM3_Configuration>

  float totalTurns = 2; // Number of turns before reaching the final angle (negative for reverse direction)
 8000d7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d82:	607b      	str	r3, [r7, #4]
  float finalAngle = targetAngle; // Final target angle
 8000d84:	4b4c      	ldr	r3, [pc, #304]	; (8000eb8 <main+0x170>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	ee07 3a90 	vmov	s15, r3
 8000d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d90:	edc7 7a00 	vstr	s15, [r7]
  totalTargetAngle = totalTurns * units_full_circle + finalAngle; // Total target angle including turns
 8000d94:	4b49      	ldr	r3, [pc, #292]	; (8000ebc <main+0x174>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	ee07 3a90 	vmov	s15, r3
 8000d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000da4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000da8:	edd7 7a00 	vldr	s15, [r7]
 8000dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000db0:	4b43      	ldr	r3, [pc, #268]	; (8000ec0 <main+0x178>)
 8000db2:	edc3 7a00 	vstr	s15, [r3]

  while (1) {
    calculate_elevator_turn_activity();
 8000db6:	f7ff fee3 	bl	8000b80 <calculate_elevator_turn_activity>
    powerOutput = myPD(totalTargetAngle);
 8000dba:	4b41      	ldr	r3, [pc, #260]	; (8000ec0 <main+0x178>)
 8000dbc:	edd3 7a00 	vldr	s15, [r3]
 8000dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dc4:	ee17 0a90 	vmov	r0, s15
 8000dc8:	f000 f890 	bl	8000eec <myPD>
 8000dcc:	eef0 7a40 	vmov.f32	s15, s0
 8000dd0:	4b3c      	ldr	r3, [pc, #240]	; (8000ec4 <main+0x17c>)
 8000dd2:	edc3 7a00 	vstr	s15, [r3]

    if (up) {
 8000dd6:	4b3c      	ldr	r3, [pc, #240]	; (8000ec8 <main+0x180>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d031      	beq.n	8000e42 <main+0xfa>
      errorAngle = totalTargetAngle - ((turns * units_full_circle) + theta);
 8000dde:	4b38      	ldr	r3, [pc, #224]	; (8000ec0 <main+0x178>)
 8000de0:	ed93 7a00 	vldr	s14, [r3]
 8000de4:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <main+0x184>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a34      	ldr	r2, [pc, #208]	; (8000ebc <main+0x174>)
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	fb02 f303 	mul.w	r3, r2, r3
 8000df0:	ee07 3a90 	vmov	s15, r3
 8000df4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000df8:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <main+0x188>)
 8000dfa:	edd3 7a00 	vldr	s15, [r3]
 8000dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e06:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <main+0x18c>)
 8000e08:	edc3 7a00 	vstr	s15, [r3]
      if (errorAngle > 0) {
 8000e0c:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <main+0x18c>)
 8000e0e:	edd3 7a00 	vldr	s15, [r3]
 8000e12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e1a:	dd39      	ble.n	8000e90 <main+0x148>
        if (powerOutput > 4) {
 8000e1c:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <main+0x17c>)
 8000e1e:	edd3 7a00 	vldr	s15, [r3]
 8000e22:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2e:	dd03      	ble.n	8000e38 <main+0xf0>
          offset = 30;
 8000e30:	4b29      	ldr	r3, [pc, #164]	; (8000ed8 <main+0x190>)
 8000e32:	4a2a      	ldr	r2, [pc, #168]	; (8000edc <main+0x194>)
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	e02b      	b.n	8000e90 <main+0x148>
        } else {
          offset = 0;
 8000e38:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <main+0x190>)
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	e026      	b.n	8000e90 <main+0x148>
        }
      }
    } else {
      errorAngle = (targetAngle % units_full_circle) - theta;
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <main+0x170>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <main+0x174>)
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e4e:	fb01 f202 	mul.w	r2, r1, r2
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	ee07 3a90 	vmov	s15, r3
 8000e58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <main+0x188>)
 8000e5e:	edd3 7a00 	vldr	s15, [r3]
 8000e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <main+0x18c>)
 8000e68:	edc3 7a00 	vstr	s15, [r3]
      if (powerOutput > 4) {
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <main+0x17c>)
 8000e6e:	edd3 7a00 	vldr	s15, [r3]
 8000e72:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7e:	dd03      	ble.n	8000e88 <main+0x140>
        offset = -40;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <main+0x190>)
 8000e82:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <main+0x198>)
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	e003      	b.n	8000e90 <main+0x148>
      } else {
        offset = 0;
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <main+0x190>)
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
      }
    }

    TIM3->CCR2 = 1500 + offset; // Apply turning speed elevator servo 
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <main+0x190>)
 8000e92:	edd3 7a00 	vldr	s15, [r3]
 8000e96:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000ee4 <main+0x19c>
 8000e9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <main+0x1a0>)
 8000ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ea4:	ee17 2a90 	vmov	r2, s15
 8000ea8:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(20);              // => PID sample time
 8000eaa:	2014      	movs	r0, #20
 8000eac:	f000 faf0 	bl	8001490 <HAL_Delay>
    calculate_elevator_turn_activity();
 8000eb0:	e781      	b.n	8000db6 <main+0x6e>
 8000eb2:	bf00      	nop
 8000eb4:	20000088 	.word	0x20000088
 8000eb8:	20000014 	.word	0x20000014
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	2000005c 	.word	0x2000005c
 8000ec4:	20000054 	.word	0x20000054
 8000ec8:	20000082 	.word	0x20000082
 8000ecc:	20000044 	.word	0x20000044
 8000ed0:	20000048 	.word	0x20000048
 8000ed4:	20000074 	.word	0x20000074
 8000ed8:	20000070 	.word	0x20000070
 8000edc:	41f00000 	.word	0x41f00000
 8000ee0:	c2200000 	.word	0xc2200000
 8000ee4:	44bb8000 	.word	0x44bb8000
 8000ee8:	40000400 	.word	0x40000400

08000eec <myPD>:
  }
}

float myPD(uint32_t totalTargetAngle) {
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8000ef4:	f000 fac0 	bl	8001478 <HAL_GetTick>
 8000ef8:	60f8      	str	r0, [r7, #12]
    dt = currentTime - previousTime;
 8000efa:	4b38      	ldr	r3, [pc, #224]	; (8000fdc <myPD+0xf0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	1a9b      	subs	r3, r3, r2
 8000f04:	ee07 3a90 	vmov	s15, r3
 8000f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f0c:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <myPD+0xf4>)
 8000f0e:	edc3 7a00 	vstr	s15, [r3]
    previousTime = currentTime;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4a31      	ldr	r2, [pc, #196]	; (8000fdc <myPD+0xf0>)
 8000f16:	6013      	str	r3, [r2, #0]

    currentAngle = (fabs(turns) * units_full_circle) + theta;
 8000f18:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <myPD+0xf8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff faad 	bl	800047c <__aeabi_i2d>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4614      	mov	r4, r2
 8000f28:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8000f2c:	4b2e      	ldr	r3, [pc, #184]	; (8000fe8 <myPD+0xfc>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff faa3 	bl	800047c <__aeabi_i2d>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	4629      	mov	r1, r5
 8000f3e:	f7ff fb07 	bl	8000550 <__aeabi_dmul>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4614      	mov	r4, r2
 8000f48:	461d      	mov	r5, r3
 8000f4a:	4b28      	ldr	r3, [pc, #160]	; (8000fec <myPD+0x100>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff faa6 	bl	80004a0 <__aeabi_f2d>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4620      	mov	r0, r4
 8000f5a:	4629      	mov	r1, r5
 8000f5c:	f7ff f942 	bl	80001e4 <__adddf3>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4610      	mov	r0, r2
 8000f66:	4619      	mov	r1, r3
 8000f68:	f7ff fd04 	bl	8000974 <__aeabi_d2f>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4a20      	ldr	r2, [pc, #128]	; (8000ff0 <myPD+0x104>)
 8000f70:	6013      	str	r3, [r2, #0]
    error = totalTargetAngle - currentAngle;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	ee07 3a90 	vmov	s15, r3
 8000f78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <myPD+0x104>)
 8000f7e:	edd3 7a00 	vldr	s15, [r3]
 8000f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <myPD+0x108>)
 8000f88:	edc3 7a00 	vstr	s15, [r3]
    //float derivative = error - prevError; // Calculate the derivative term
    //prevError = error;

    power = fabs(error) * KP; // Add the derivative term
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <myPD+0x108>)
 8000f8e:	edd3 7a00 	vldr	s15, [r3]
 8000f92:	eef0 7ae7 	vabs.f32	s15, s15
 8000f96:	ee17 0a90 	vmov	r0, s15
 8000f9a:	f7ff fa81 	bl	80004a0 <__aeabi_f2d>
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	460d      	mov	r5, r1
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <myPD+0x10c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fa58 	bl	800045c <__aeabi_ui2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	4629      	mov	r1, r5
 8000fb4:	f7ff facc 	bl	8000550 <__aeabi_dmul>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f7ff fcd8 	bl	8000974 <__aeabi_d2f>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <myPD+0x110>)
 8000fc8:	6013      	str	r3, [r2, #0]
    return power;
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <myPD+0x110>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	ee07 3a90 	vmov	s15, r3
}
 8000fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bdb0      	pop	{r4, r5, r7, pc}
 8000fdc:	20000078 	.word	0x20000078
 8000fe0:	20000064 	.word	0x20000064
 8000fe4:	20000044 	.word	0x20000044
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000048 	.word	0x20000048
 8000ff0:	20000084 	.word	0x20000084
 8000ff4:	20000060 	.word	0x20000060
 8000ff8:	20000018 	.word	0x20000018
 8000ffc:	2000007c 	.word	0x2000007c

08001000 <TIM3_Configuration>:




  void TIM3_Configuration(void)
  {
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
      RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <TIM3_Configuration+0xa4>)
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	4a26      	ldr	r2, [pc, #152]	; (80010a4 <TIM3_Configuration+0xa4>)
 800100a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800100e:	6153      	str	r3, [r2, #20]
      RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <TIM3_Configuration+0xa4>)
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	4a23      	ldr	r2, [pc, #140]	; (80010a4 <TIM3_Configuration+0xa4>)
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	61d3      	str	r3, [r2, #28]

      GPIOB->MODER &= ~(GPIO_MODER_MODER5);
 800101c:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <TIM3_Configuration+0xa8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <TIM3_Configuration+0xa8>)
 8001022:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001026:	6013      	str	r3, [r2, #0]
      GPIOB->MODER |= GPIO_MODER_MODER5_1;
 8001028:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <TIM3_Configuration+0xa8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a1e      	ldr	r2, [pc, #120]	; (80010a8 <TIM3_Configuration+0xa8>)
 800102e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001032:	6013      	str	r3, [r2, #0]

      GPIOB->AFR[0] &= ~GPIO_AFRL_AFRL5;
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <TIM3_Configuration+0xa8>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <TIM3_Configuration+0xa8>)
 800103a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800103e:	6213      	str	r3, [r2, #32]
      GPIOB->AFR[0] |= (0b0010 << GPIO_AFRL_AFRL5_Pos);
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <TIM3_Configuration+0xa8>)
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <TIM3_Configuration+0xa8>)
 8001046:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800104a:	6213      	str	r3, [r2, #32]

      RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <TIM3_Configuration+0xa4>)
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <TIM3_Configuration+0xa4>)
 8001052:	f043 0302 	orr.w	r3, r3, #2
 8001056:	61d3      	str	r3, [r2, #28]
      TIM3->PSC = 8 - 1;
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <TIM3_Configuration+0xac>)
 800105a:	2207      	movs	r2, #7
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
      TIM3->ARR = 19999;         // Set auto-reload value (period of PWM signal)
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <TIM3_Configuration+0xac>)
 8001060:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001064:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM3->CCMR1 &= ~(TIM_CCMR1_OC2M);
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <TIM3_Configuration+0xac>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	4a10      	ldr	r2, [pc, #64]	; (80010ac <TIM3_Configuration+0xac>)
 800106c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001074:	6193      	str	r3, [r2, #24]
      TIM3->CCMR1 |= (TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2);
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <TIM3_Configuration+0xac>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <TIM3_Configuration+0xac>)
 800107c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001080:	6193      	str	r3, [r2, #24]
      TIM3->CCER |= TIM_CCER_CC2E;
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <TIM3_Configuration+0xac>)
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4a09      	ldr	r2, [pc, #36]	; (80010ac <TIM3_Configuration+0xac>)
 8001088:	f043 0310 	orr.w	r3, r3, #16
 800108c:	6213      	str	r3, [r2, #32]
      TIM3->CR1 |= TIM_CR1_CEN;
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <TIM3_Configuration+0xac>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a06      	ldr	r2, [pc, #24]	; (80010ac <TIM3_Configuration+0xac>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6013      	str	r3, [r2, #0]
  }
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	40021000 	.word	0x40021000
 80010a8:	48000400 	.word	0x48000400
 80010ac:	40000400 	.word	0x40000400

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0a6      	sub	sp, #152	; 0x98
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010ba:	2228      	movs	r2, #40	; 0x28
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 f929 	bl	8003316 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	2258      	movs	r2, #88	; 0x58
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 f91b 	bl	8003316 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e0:	2302      	movs	r3, #2
 80010e2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e8:	2310      	movs	r3, #16
 80010ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ee:	2302      	movs	r3, #2
 80010f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001108:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800110c:	4618      	mov	r0, r3
 800110e:	f000 fac9 	bl	80016a4 <HAL_RCC_OscConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001118:	f000 f8c4 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111c:	230f      	movs	r3, #15
 800111e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001120:	2302      	movs	r3, #2
 8001122:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800112c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001132:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fb07 	bl	800274c <HAL_RCC_ClockConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001144:	f000 f8ae 	bl	80012a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM34;
 8001148:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800114c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800114e:	2300      	movs	r3, #0
 8001150:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	4618      	mov	r0, r3
 8001156:	f001 fcdf 	bl	8002b18 <HAL_RCCEx_PeriphCLKConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001160:	f000 f8a0 	bl	80012a4 <Error_Handler>
  }
}
 8001164:	bf00      	nop
 8001166:	3798      	adds	r7, #152	; 0x98
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Timer4_Init>:
/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void Timer4_Init(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8001170:	4b3d      	ldr	r3, [pc, #244]	; (8001268 <Timer4_Init+0xfc>)
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	4a3c      	ldr	r2, [pc, #240]	; (8001268 <Timer4_Init+0xfc>)
 8001176:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800117a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800117c:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <Timer4_Init+0xfc>)
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	4a39      	ldr	r2, [pc, #228]	; (8001268 <Timer4_Init+0xfc>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	61d3      	str	r3, [r2, #28]


    GPIOB->MODER &= ~(GPIO_MODER_MODER6);
 8001188:	4b38      	ldr	r3, [pc, #224]	; (800126c <Timer4_Init+0x100>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a37      	ldr	r2, [pc, #220]	; (800126c <Timer4_Init+0x100>)
 800118e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001192:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODER6_1;
 8001194:	4b35      	ldr	r3, [pc, #212]	; (800126c <Timer4_Init+0x100>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a34      	ldr	r2, [pc, #208]	; (800126c <Timer4_Init+0x100>)
 800119a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800119e:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] &= ~(0xFU << (4U * 6U));
 80011a0:	4b32      	ldr	r3, [pc, #200]	; (800126c <Timer4_Init+0x100>)
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	4a31      	ldr	r2, [pc, #196]	; (800126c <Timer4_Init+0x100>)
 80011a6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80011aa:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (2U << (4U * 6U));
 80011ac:	4b2f      	ldr	r3, [pc, #188]	; (800126c <Timer4_Init+0x100>)
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4a2e      	ldr	r2, [pc, #184]	; (800126c <Timer4_Init+0x100>)
 80011b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011b6:	6213      	str	r3, [r2, #32]


	TIM4->PSC = 15;
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <Timer4_Init+0x104>)
 80011ba:	220f      	movs	r2, #15
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28

	TIM4->CCMR1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_IC1PSC | TIM_CCMR1_IC1F);
 80011be:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <Timer4_Init+0x104>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	4a2b      	ldr	r2, [pc, #172]	; (8001270 <Timer4_Init+0x104>)
 80011c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011c8:	6193      	str	r3, [r2, #24]

	TIM4->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80011ca:	4b29      	ldr	r3, [pc, #164]	; (8001270 <Timer4_Init+0x104>)
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	4a28      	ldr	r2, [pc, #160]	; (8001270 <Timer4_Init+0x104>)
 80011d0:	f023 030b 	bic.w	r3, r3, #11
 80011d4:	6213      	str	r3, [r2, #32]
	TIM4->CCMR1 &= ~(TIM_CCMR1_CC1S);
 80011d6:	4b26      	ldr	r3, [pc, #152]	; (8001270 <Timer4_Init+0x104>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	4a25      	ldr	r2, [pc, #148]	; (8001270 <Timer4_Init+0x104>)
 80011dc:	f023 0303 	bic.w	r3, r3, #3
 80011e0:	6193      	str	r3, [r2, #24]


	TIM4->CCMR1 |= TIM_CCMR1_CC1S_0;
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <Timer4_Init+0x104>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	4a22      	ldr	r2, [pc, #136]	; (8001270 <Timer4_Init+0x104>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6193      	str	r3, [r2, #24]

	TIM4->CCER |= TIM_CCER_CC1E;
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <Timer4_Init+0x104>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <Timer4_Init+0x104>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~TIM_CCER_CC1NP;
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <Timer4_Init+0x104>)
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	4a1c      	ldr	r2, [pc, #112]	; (8001270 <Timer4_Init+0x104>)
 8001200:	f023 0308 	bic.w	r3, r3, #8
 8001204:	6213      	str	r3, [r2, #32]

	TIM4->DIER &= ~(TIM_DIER_CC1IE | TIM_DIER_CC1DE);
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <Timer4_Init+0x104>)
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	4a19      	ldr	r2, [pc, #100]	; (8001270 <Timer4_Init+0x104>)
 800120c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001210:	f023 0302 	bic.w	r3, r3, #2
 8001214:	60d3      	str	r3, [r2, #12]

	TIM4->DIER |= TIM_DIER_CC1IE;
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <Timer4_Init+0x104>)
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	4a15      	ldr	r2, [pc, #84]	; (8001270 <Timer4_Init+0x104>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	60d3      	str	r3, [r2, #12]
	TIM4->DIER |= TIM_DIER_UIE;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <Timer4_Init+0x104>)
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <Timer4_Init+0x104>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	60d3      	str	r3, [r2, #12]

	TIM4->CR1 &= ~(TIM_CR1_CEN | TIM_CR1_OPM | TIM_CR1_URS | TIM_CR1_UDIS |
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <Timer4_Init+0x104>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <Timer4_Init+0x104>)
 8001234:	f423 630e 	bic.w	r3, r3, #2272	; 0x8e0
 8001238:	f023 030f 	bic.w	r3, r3, #15
 800123c:	6013      	str	r3, [r2, #0]
				   TIM_CR1_CMS | TIM_CR1_ARPE | TIM_CR1_UIFREMAP);
	TIM4->CR1 &= ~TIM_CR1_DIR;
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <Timer4_Init+0x104>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <Timer4_Init+0x104>)
 8001244:	f023 0310 	bic.w	r3, r3, #16
 8001248:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |= TIM_CR1_CEN;
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <Timer4_Init+0x104>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a08      	ldr	r2, [pc, #32]	; (8001270 <Timer4_Init+0x104>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(TIM4_IRQn);
 8001256:	201e      	movs	r0, #30
 8001258:	f7ff fbdc 	bl	8000a14 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM4_IRQn, 0);
 800125c:	2100      	movs	r1, #0
 800125e:	201e      	movs	r0, #30
 8001260:	f7ff fbf6 	bl	8000a50 <__NVIC_SetPriority>
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021000 	.word	0x40021000
 800126c:	48000400 	.word	0x48000400
 8001270:	40000800 	.word	0x40000800

08001274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_GPIO_Init+0x2c>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <MX_GPIO_Init+0x2c>)
 8001280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001284:	6153      	str	r3, [r2, #20]
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_GPIO_Init+0x2c>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	e7fe      	b.n	80012ac <Error_Handler+0x8>
	...

080012b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <HAL_MspInit+0x44>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <HAL_MspInit+0x44>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6193      	str	r3, [r2, #24]
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <HAL_MspInit+0x44>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_MspInit+0x44>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <HAL_MspInit+0x44>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	61d3      	str	r3, [r2, #28]
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_MspInit+0x44>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012fc:	e7fe      	b.n	80012fc <NMI_Handler+0x4>

080012fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <MemManage_Handler+0x4>

0800130a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <UsageFault_Handler+0x4>

08001316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001344:	f000 f884 	bl	8001450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}

0800134c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <SystemInit+0x20>)
 8001352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <SystemInit+0x20>)
 8001358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800135c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001374:	f7ff ffea 	bl	800134c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <LoopForever+0x6>)
  ldr r1, =_edata
 800137a:	490d      	ldr	r1, [pc, #52]	; (80013b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <LoopForever+0xe>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001390:	4c0a      	ldr	r4, [pc, #40]	; (80013bc <LoopForever+0x16>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139e:	f001 ffc3 	bl	8003328 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013a2:	f7ff fcd1 	bl	8000d48 <main>

080013a6 <LoopForever>:

LoopForever:
    b LoopForever
 80013a6:	e7fe      	b.n	80013a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80013b4:	080033c0 	.word	0x080033c0
  ldr r2, =_sbss
 80013b8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80013bc:	200000d8 	.word	0x200000d8

080013c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC1_2_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_Init+0x28>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_Init+0x28>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 f931 	bl	800163c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013da:	200f      	movs	r0, #15
 80013dc:	f000 f808 	bl	80013f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff ff66 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40022000 	.word	0x40022000

080013f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_InitTick+0x54>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_InitTick+0x58>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	fbb3 f3f1 	udiv	r3, r3, r1
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f93b 	bl	800168a <HAL_SYSTICK_Config>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e00e      	b.n	800143c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d80a      	bhi.n	800143a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f000 f911 	bl	8001652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001430:	4a06      	ldr	r2, [pc, #24]	; (800144c <HAL_InitTick+0x5c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e000      	b.n	800143c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2000001c 	.word	0x2000001c
 8001448:	20000024 	.word	0x20000024
 800144c:	20000020 	.word	0x20000020

08001450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_IncTick+0x20>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_IncTick+0x24>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4413      	add	r3, r2
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <HAL_IncTick+0x24>)
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000024 	.word	0x20000024
 8001474:	200000d4 	.word	0x200000d4

08001478 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return uwTick;  
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <HAL_GetTick+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	200000d4 	.word	0x200000d4

08001490 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001498:	f7ff ffee 	bl	8001478 <HAL_GetTick>
 800149c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a8:	d005      	beq.n	80014b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_Delay+0x44>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80014b6:	bf00      	nop
 80014b8:	f7ff ffde 	bl	8001478 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d8f7      	bhi.n	80014b8 <HAL_Delay+0x28>
  {
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000024 	.word	0x20000024

080014d8 <__NVIC_SetPriorityGrouping>:
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_GetPriorityGrouping>:
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_SetPriority>:
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	; (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	; (800158c <__NVIC_SetPriority+0x50>)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001608:	d301      	bcc.n	800160e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160a:	2301      	movs	r3, #1
 800160c:	e00f      	b.n	800162e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <SysTick_Config+0x40>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001616:	210f      	movs	r1, #15
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f7ff ff8e 	bl	800153c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <SysTick_Config+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001626:	4b04      	ldr	r3, [pc, #16]	; (8001638 <SysTick_Config+0x40>)
 8001628:	2207      	movs	r2, #7
 800162a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	e000e010 	.word	0xe000e010

0800163c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff47 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001664:	f7ff ff5c 	bl	8001520 <__NVIC_GetPriorityGrouping>
 8001668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	6978      	ldr	r0, [r7, #20]
 8001670:	f7ff ff8e 	bl	8001590 <NVIC_EncodePriority>
 8001674:	4602      	mov	r2, r0
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff5d 	bl	800153c <__NVIC_SetPriority>
}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffb0 	bl	80015f8 <SysTick_Config>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016b4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	f001 b83a 	b.w	800273e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 816f 	beq.w	80019be <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016e0:	4bb5      	ldr	r3, [pc, #724]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d00c      	beq.n	8001706 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016ec:	4bb2      	ldr	r3, [pc, #712]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d15c      	bne.n	80017b2 <HAL_RCC_OscConfig+0x10e>
 80016f8:	4baf      	ldr	r3, [pc, #700]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001704:	d155      	bne.n	80017b2 <HAL_RCC_OscConfig+0x10e>
 8001706:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800170a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001712:	fa93 f3a3 	rbit	r3, r3
 8001716:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800171a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171e:	fab3 f383 	clz	r3, r3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	095b      	lsrs	r3, r3, #5
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b01      	cmp	r3, #1
 8001730:	d102      	bne.n	8001738 <HAL_RCC_OscConfig+0x94>
 8001732:	4ba1      	ldr	r3, [pc, #644]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	e015      	b.n	8001764 <HAL_RCC_OscConfig+0xc0>
 8001738:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800173c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001744:	fa93 f3a3 	rbit	r3, r3
 8001748:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800174c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001750:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001754:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001758:	fa93 f3a3 	rbit	r3, r3
 800175c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001760:	4b95      	ldr	r3, [pc, #596]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001768:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800176c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001770:	fa92 f2a2 	rbit	r2, r2
 8001774:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001778:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800177c:	fab2 f282 	clz	r2, r2
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	f042 0220 	orr.w	r2, r2, #32
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	f002 021f 	and.w	r2, r2, #31
 800178c:	2101      	movs	r1, #1
 800178e:	fa01 f202 	lsl.w	r2, r1, r2
 8001792:	4013      	ands	r3, r2
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 8111 	beq.w	80019bc <HAL_RCC_OscConfig+0x318>
 800179a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800179e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f040 8108 	bne.w	80019bc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	f000 bfc6 	b.w	800273e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c2:	d106      	bne.n	80017d2 <HAL_RCC_OscConfig+0x12e>
 80017c4:	4b7c      	ldr	r3, [pc, #496]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a7b      	ldr	r2, [pc, #492]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 80017ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	e036      	b.n	8001840 <HAL_RCC_OscConfig+0x19c>
 80017d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x158>
 80017e2:	4b75      	ldr	r3, [pc, #468]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a74      	ldr	r2, [pc, #464]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 80017e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b72      	ldr	r3, [pc, #456]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a71      	ldr	r2, [pc, #452]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 80017f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e021      	b.n	8001840 <HAL_RCC_OscConfig+0x19c>
 80017fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001800:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x184>
 800180e:	4b6a      	ldr	r3, [pc, #424]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a69      	ldr	r2, [pc, #420]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 8001814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b67      	ldr	r3, [pc, #412]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a66      	ldr	r2, [pc, #408]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e00b      	b.n	8001840 <HAL_RCC_OscConfig+0x19c>
 8001828:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a62      	ldr	r2, [pc, #392]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 800182e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b60      	ldr	r3, [pc, #384]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a5f      	ldr	r2, [pc, #380]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 800183a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001844:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d059      	beq.n	8001904 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fe12 	bl	8001478 <HAL_GetTick>
 8001854:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800185a:	f7ff fe0d 	bl	8001478 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	; 0x64
 8001868:	d902      	bls.n	8001870 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	f000 bf67 	b.w	800273e <HAL_RCC_OscConfig+0x109a>
 8001870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001874:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800187c:	fa93 f3a3 	rbit	r3, r3
 8001880:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001884:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001888:	fab3 f383 	clz	r3, r3
 800188c:	b2db      	uxtb	r3, r3
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b01      	cmp	r3, #1
 800189a:	d102      	bne.n	80018a2 <HAL_RCC_OscConfig+0x1fe>
 800189c:	4b46      	ldr	r3, [pc, #280]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	e015      	b.n	80018ce <HAL_RCC_OscConfig+0x22a>
 80018a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018a6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80018ae:	fa93 f3a3 	rbit	r3, r3
 80018b2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80018b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ba:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80018be:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80018c2:	fa93 f3a3 	rbit	r3, r3
 80018c6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80018ca:	4b3b      	ldr	r3, [pc, #236]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018d2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80018d6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80018da:	fa92 f2a2 	rbit	r2, r2
 80018de:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80018e2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80018e6:	fab2 f282 	clz	r2, r2
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	f042 0220 	orr.w	r2, r2, #32
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	f002 021f 	and.w	r2, r2, #31
 80018f6:	2101      	movs	r1, #1
 80018f8:	fa01 f202 	lsl.w	r2, r1, r2
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0ab      	beq.n	800185a <HAL_RCC_OscConfig+0x1b6>
 8001902:	e05c      	b.n	80019be <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fdb8 	bl	8001478 <HAL_GetTick>
 8001908:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800190e:	f7ff fdb3 	bl	8001478 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d902      	bls.n	8001924 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	f000 bf0d 	b.w	800273e <HAL_RCC_OscConfig+0x109a>
 8001924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001928:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001930:	fa93 f3a3 	rbit	r3, r3
 8001934:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001938:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b01      	cmp	r3, #1
 800194e:	d102      	bne.n	8001956 <HAL_RCC_OscConfig+0x2b2>
 8001950:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	e015      	b.n	8001982 <HAL_RCC_OscConfig+0x2de>
 8001956:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800195a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800196a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800196e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001972:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_RCC_OscConfig+0x314>)
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001986:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800198a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800198e:	fa92 f2a2 	rbit	r2, r2
 8001992:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001996:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800199a:	fab2 f282 	clz	r2, r2
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	f042 0220 	orr.w	r2, r2, #32
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	f002 021f 	and.w	r2, r2, #31
 80019aa:	2101      	movs	r1, #1
 80019ac:	fa01 f202 	lsl.w	r2, r1, r2
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1ab      	bne.n	800190e <HAL_RCC_OscConfig+0x26a>
 80019b6:	e002      	b.n	80019be <HAL_RCC_OscConfig+0x31a>
 80019b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 817f 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019d4:	4ba7      	ldr	r3, [pc, #668]	; (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 030c 	and.w	r3, r3, #12
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00c      	beq.n	80019fa <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019e0:	4ba4      	ldr	r3, [pc, #656]	; (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d173      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x430>
 80019ec:	4ba1      	ldr	r3, [pc, #644]	; (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80019f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019f8:	d16c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x430>
 80019fa:	2302      	movs	r3, #2
 80019fc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001a0c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d102      	bne.n	8001a2a <HAL_RCC_OscConfig+0x386>
 8001a24:	4b93      	ldr	r3, [pc, #588]	; (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	e013      	b.n	8001a52 <HAL_RCC_OscConfig+0x3ae>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001a34:	fa93 f3a3 	rbit	r3, r3
 8001a38:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a42:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001a46:	fa93 f3a3 	rbit	r3, r3
 8001a4a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a4e:	4b89      	ldr	r3, [pc, #548]	; (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	2202      	movs	r2, #2
 8001a54:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001a58:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001a5c:	fa92 f2a2 	rbit	r2, r2
 8001a60:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001a64:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a68:	fab2 f282 	clz	r2, r2
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f042 0220 	orr.w	r2, r2, #32
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	f002 021f 	and.w	r2, r2, #31
 8001a78:	2101      	movs	r1, #1
 8001a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00a      	beq.n	8001a9a <HAL_RCC_OscConfig+0x3f6>
 8001a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d002      	beq.n	8001a9a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	f000 be52 	b.w	800273e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9a:	4b76      	ldr	r3, [pc, #472]	; (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	21f8      	movs	r1, #248	; 0xf8
 8001ab0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001ab8:	fa91 f1a1 	rbit	r1, r1
 8001abc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001ac0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ac4:	fab1 f181 	clz	r1, r1
 8001ac8:	b2c9      	uxtb	r1, r1
 8001aca:	408b      	lsls	r3, r1
 8001acc:	4969      	ldr	r1, [pc, #420]	; (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad2:	e0fe      	b.n	8001cd2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 8088 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x552>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001af8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	2301      	movs	r3, #1
 8001b10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff fcb1 	bl	8001478 <HAL_GetTick>
 8001b16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fcac 	bl	8001478 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d902      	bls.n	8001b32 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	f000 be06 	b.w	800273e <HAL_RCC_OscConfig+0x109a>
 8001b32:	2302      	movs	r3, #2
 8001b34:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001b44:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d102      	bne.n	8001b62 <HAL_RCC_OscConfig+0x4be>
 8001b5c:	4b45      	ldr	r3, [pc, #276]	; (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	e013      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e6>
 8001b62:	2302      	movs	r3, #2
 8001b64:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001b6c:	fa93 f3a3 	rbit	r3, r3
 8001b70:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001b74:	2302      	movs	r3, #2
 8001b76:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b7a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b86:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001b90:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001b94:	fa92 f2a2 	rbit	r2, r2
 8001b98:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001b9c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ba0:	fab2 f282 	clz	r2, r2
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	f042 0220 	orr.w	r2, r2, #32
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	f002 021f 	and.w	r2, r2, #31
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0af      	beq.n	8001b1c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	21f8      	movs	r1, #248	; 0xf8
 8001bd2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001bda:	fa91 f1a1 	rbit	r1, r1
 8001bde:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001be2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001be6:	fab1 f181 	clz	r1, r1
 8001bea:	b2c9      	uxtb	r1, r1
 8001bec:	408b      	lsls	r3, r1
 8001bee:	4921      	ldr	r1, [pc, #132]	; (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
 8001bf4:	e06d      	b.n	8001cd2 <HAL_RCC_OscConfig+0x62e>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001c08:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2300      	movs	r3, #0
 8001c20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff fc29 	bl	8001478 <HAL_GetTick>
 8001c26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fc24 	bl	8001478 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d902      	bls.n	8001c42 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	f000 bd7e 	b.w	800273e <HAL_RCC_OscConfig+0x109a>
 8001c42:	2302      	movs	r3, #2
 8001c44:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c4c:	fa93 f3a3 	rbit	r3, r3
 8001c50:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001c54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d105      	bne.n	8001c78 <HAL_RCC_OscConfig+0x5d4>
 8001c6c:	4b01      	ldr	r3, [pc, #4]	; (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	e016      	b.n	8001ca0 <HAL_RCC_OscConfig+0x5fc>
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	2302      	movs	r3, #2
 8001c7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c90:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c9c:	4bbf      	ldr	r3, [pc, #764]	; (8001f9c <HAL_RCC_OscConfig+0x8f8>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001ca6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001caa:	fa92 f2a2 	rbit	r2, r2
 8001cae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001cb2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001cb6:	fab2 f282 	clz	r2, r2
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f042 0220 	orr.w	r2, r2, #32
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	f002 021f 	and.w	r2, r2, #31
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1ac      	bne.n	8001c2c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8113 	beq.w	8001f0e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d07c      	beq.n	8001df2 <HAL_RCC_OscConfig+0x74e>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001d0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	461a      	mov	r2, r3
 8001d16:	4ba2      	ldr	r3, [pc, #648]	; (8001fa0 <HAL_RCC_OscConfig+0x8fc>)
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	2301      	movs	r3, #1
 8001d20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d22:	f7ff fba9 	bl	8001478 <HAL_GetTick>
 8001d26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	e00a      	b.n	8001d42 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2c:	f7ff fba4 	bl	8001478 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d902      	bls.n	8001d42 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	f000 bcfe 	b.w	800273e <HAL_RCC_OscConfig+0x109a>
 8001d42:	2302      	movs	r3, #2
 8001d44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001d4c:	fa93 f2a3 	rbit	r2, r3
 8001d50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d54:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d62:	2202      	movs	r2, #2
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fa93 f2a3 	rbit	r2, r3
 8001d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d86:	2202      	movs	r2, #2
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	fa93 f2a3 	rbit	r2, r3
 8001d98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001da0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da2:	4b7e      	ldr	r3, [pc, #504]	; (8001f9c <HAL_RCC_OscConfig+0x8f8>)
 8001da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001da6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001daa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001dae:	2102      	movs	r1, #2
 8001db0:	6019      	str	r1, [r3, #0]
 8001db2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	fa93 f1a3 	rbit	r1, r3
 8001dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001dc8:	6019      	str	r1, [r3, #0]
  return result;
 8001dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	fab3 f383 	clz	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d09d      	beq.n	8001d2c <HAL_RCC_OscConfig+0x688>
 8001df0:	e08d      	b.n	8001f0e <HAL_RCC_OscConfig+0x86a>
 8001df2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e02:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	fa93 f2a3 	rbit	r2, r3
 8001e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e10:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e14:	601a      	str	r2, [r3, #0]
  return result;
 8001e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e1e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b5d      	ldr	r3, [pc, #372]	; (8001fa0 <HAL_RCC_OscConfig+0x8fc>)
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2300      	movs	r3, #0
 8001e32:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e34:	f7ff fb20 	bl	8001478 <HAL_GetTick>
 8001e38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3e:	f7ff fb1b 	bl	8001478 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d902      	bls.n	8001e54 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	f000 bc75 	b.w	800273e <HAL_RCC_OscConfig+0x109a>
 8001e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e64:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f2a3 	rbit	r2, r3
 8001e6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e72:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e80:	2202      	movs	r2, #2
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	fa93 f2a3 	rbit	r2, r3
 8001e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	fa93 f2a3 	rbit	r2, r3
 8001eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ebe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec0:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <HAL_RCC_OscConfig+0x8f8>)
 8001ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ecc:	2102      	movs	r1, #2
 8001ece:	6019      	str	r1, [r3, #0]
 8001ed0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	fa93 f1a3 	rbit	r1, r3
 8001ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ee6:	6019      	str	r1, [r3, #0]
  return result;
 8001ee8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	2101      	movs	r1, #1
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d197      	bne.n	8001e3e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 81a5 	beq.w	800226e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <HAL_RCC_OscConfig+0x8f8>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d116      	bne.n	8001f64 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_RCC_OscConfig+0x8f8>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a18      	ldr	r2, [pc, #96]	; (8001f9c <HAL_RCC_OscConfig+0x8f8>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f40:	61d3      	str	r3, [r2, #28]
 8001f42:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <HAL_RCC_OscConfig+0x8f8>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f5c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_RCC_OscConfig+0x900>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d121      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_RCC_OscConfig+0x900>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <HAL_RCC_OscConfig+0x900>)
 8001f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7c:	f7ff fa7c 	bl	8001478 <HAL_GetTick>
 8001f80:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	e010      	b.n	8001fa8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f86:	f7ff fa77 	bl	8001478 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	; 0x64
 8001f94:	d908      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e3d1      	b.n	800273e <HAL_RCC_OscConfig+0x109a>
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	10908120 	.word	0x10908120
 8001fa4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	4b8d      	ldr	r3, [pc, #564]	; (80021e0 <HAL_RCC_OscConfig+0xb3c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0e8      	beq.n	8001f86 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x92e>
 8001fc4:	4b87      	ldr	r3, [pc, #540]	; (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4a86      	ldr	r2, [pc, #536]	; (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6213      	str	r3, [r2, #32]
 8001fd0:	e035      	b.n	800203e <HAL_RCC_OscConfig+0x99a>
 8001fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x958>
 8001fe2:	4b80      	ldr	r3, [pc, #512]	; (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4a7f      	ldr	r2, [pc, #508]	; (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	6213      	str	r3, [r2, #32]
 8001fee:	4b7d      	ldr	r3, [pc, #500]	; (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8001ff4:	f023 0304 	bic.w	r3, r3, #4
 8001ff8:	6213      	str	r3, [r2, #32]
 8001ffa:	e020      	b.n	800203e <HAL_RCC_OscConfig+0x99a>
 8001ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002000:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b05      	cmp	r3, #5
 800200a:	d10c      	bne.n	8002026 <HAL_RCC_OscConfig+0x982>
 800200c:	4b75      	ldr	r3, [pc, #468]	; (80021e4 <HAL_RCC_OscConfig+0xb40>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4a74      	ldr	r2, [pc, #464]	; (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	6213      	str	r3, [r2, #32]
 8002018:	4b72      	ldr	r3, [pc, #456]	; (80021e4 <HAL_RCC_OscConfig+0xb40>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4a71      	ldr	r2, [pc, #452]	; (80021e4 <HAL_RCC_OscConfig+0xb40>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6213      	str	r3, [r2, #32]
 8002024:	e00b      	b.n	800203e <HAL_RCC_OscConfig+0x99a>
 8002026:	4b6f      	ldr	r3, [pc, #444]	; (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4a6e      	ldr	r2, [pc, #440]	; (80021e4 <HAL_RCC_OscConfig+0xb40>)
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	6213      	str	r3, [r2, #32]
 8002032:	4b6c      	ldr	r3, [pc, #432]	; (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4a6b      	ldr	r2, [pc, #428]	; (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8002038:	f023 0304 	bic.w	r3, r3, #4
 800203c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800203e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002042:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8081 	beq.w	8002152 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7ff fa12 	bl	8001478 <HAL_GetTick>
 8002054:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002058:	e00b      	b.n	8002072 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7ff fa0d 	bl	8001478 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e365      	b.n	800273e <HAL_RCC_OscConfig+0x109a>
 8002072:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002076:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800207a:	2202      	movs	r2, #2
 800207c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002082:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	fa93 f2a3 	rbit	r2, r3
 800208c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002090:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800209e:	2202      	movs	r2, #2
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	fa93 f2a3 	rbit	r2, r3
 80020b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020b8:	601a      	str	r2, [r3, #0]
  return result;
 80020ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020be:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f043 0302 	orr.w	r3, r3, #2
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d102      	bne.n	80020de <HAL_RCC_OscConfig+0xa3a>
 80020d8:	4b42      	ldr	r3, [pc, #264]	; (80021e4 <HAL_RCC_OscConfig+0xb40>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	e013      	b.n	8002106 <HAL_RCC_OscConfig+0xa62>
 80020de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80020e6:	2202      	movs	r2, #2
 80020e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	fa93 f2a3 	rbit	r2, r3
 80020f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	4b38      	ldr	r3, [pc, #224]	; (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800210a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800210e:	2102      	movs	r1, #2
 8002110:	6011      	str	r1, [r2, #0]
 8002112:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002116:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	fa92 f1a2 	rbit	r1, r2
 8002120:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002124:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002128:	6011      	str	r1, [r2, #0]
  return result;
 800212a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800212e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	fab2 f282 	clz	r2, r2
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	f002 021f 	and.w	r2, r2, #31
 8002144:	2101      	movs	r1, #1
 8002146:	fa01 f202 	lsl.w	r2, r1, r2
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d084      	beq.n	800205a <HAL_RCC_OscConfig+0x9b6>
 8002150:	e083      	b.n	800225a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002152:	f7ff f991 	bl	8001478 <HAL_GetTick>
 8002156:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f7ff f98c 	bl	8001478 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	; 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e2e4      	b.n	800273e <HAL_RCC_OscConfig+0x109a>
 8002174:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002178:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800217c:	2202      	movs	r2, #2
 800217e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002184:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	fa93 f2a3 	rbit	r2, r3
 800218e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002192:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80021a0:	2202      	movs	r2, #2
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	fa93 f2a3 	rbit	r2, r3
 80021b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021ba:	601a      	str	r2, [r3, #0]
  return result;
 80021bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	095b      	lsrs	r3, r3, #5
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d106      	bne.n	80021e8 <HAL_RCC_OscConfig+0xb44>
 80021da:	4b02      	ldr	r3, [pc, #8]	; (80021e4 <HAL_RCC_OscConfig+0xb40>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	e017      	b.n	8002210 <HAL_RCC_OscConfig+0xb6c>
 80021e0:	40007000 	.word	0x40007000
 80021e4:	40021000 	.word	0x40021000
 80021e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80021f0:	2202      	movs	r2, #2
 80021f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	fa93 f2a3 	rbit	r2, r3
 8002202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002206:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	4bb3      	ldr	r3, [pc, #716]	; (80024dc <HAL_RCC_OscConfig+0xe38>)
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002214:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002218:	2102      	movs	r1, #2
 800221a:	6011      	str	r1, [r2, #0]
 800221c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002220:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	fa92 f1a2 	rbit	r1, r2
 800222a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800222e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002232:	6011      	str	r1, [r2, #0]
  return result;
 8002234:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002238:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	fab2 f282 	clz	r2, r2
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	f002 021f 	and.w	r2, r2, #31
 800224e:	2101      	movs	r1, #1
 8002250:	fa01 f202 	lsl.w	r2, r1, r2
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d180      	bne.n	800215c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800225a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800225e:	2b01      	cmp	r3, #1
 8002260:	d105      	bne.n	800226e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002262:	4b9e      	ldr	r3, [pc, #632]	; (80024dc <HAL_RCC_OscConfig+0xe38>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	4a9d      	ldr	r2, [pc, #628]	; (80024dc <HAL_RCC_OscConfig+0xe38>)
 8002268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800226e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002272:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 825e 	beq.w	800273c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002280:	4b96      	ldr	r3, [pc, #600]	; (80024dc <HAL_RCC_OscConfig+0xe38>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b08      	cmp	r3, #8
 800228a:	f000 821f 	beq.w	80026cc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800228e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002292:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b02      	cmp	r3, #2
 800229c:	f040 8170 	bne.w	8002580 <HAL_RCC_OscConfig+0xedc>
 80022a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80022a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	fa93 f2a3 	rbit	r2, r3
 80022bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022c4:	601a      	str	r2, [r3, #0]
  return result;
 80022c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ca:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022ce:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	461a      	mov	r2, r3
 80022e2:	2300      	movs	r3, #0
 80022e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7ff f8c7 	bl	8001478 <HAL_GetTick>
 80022ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ee:	e009      	b.n	8002304 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f0:	f7ff f8c2 	bl	8001478 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e21c      	b.n	800273e <HAL_RCC_OscConfig+0x109a>
 8002304:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002308:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800230c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002316:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fa93 f2a3 	rbit	r2, r3
 8002320:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002324:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002328:	601a      	str	r2, [r3, #0]
  return result;
 800232a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002332:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d102      	bne.n	800234e <HAL_RCC_OscConfig+0xcaa>
 8002348:	4b64      	ldr	r3, [pc, #400]	; (80024dc <HAL_RCC_OscConfig+0xe38>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	e027      	b.n	800239e <HAL_RCC_OscConfig+0xcfa>
 800234e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002352:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002356:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800235a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002360:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fa93 f2a3 	rbit	r2, r3
 800236a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800236e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002378:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800237c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002386:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	fa93 f2a3 	rbit	r2, r3
 8002390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002394:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	4b50      	ldr	r3, [pc, #320]	; (80024dc <HAL_RCC_OscConfig+0xe38>)
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023a2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80023a6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023aa:	6011      	str	r1, [r2, #0]
 80023ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023b0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	fa92 f1a2 	rbit	r1, r2
 80023ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023be:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80023c2:	6011      	str	r1, [r2, #0]
  return result;
 80023c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023c8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	fab2 f282 	clz	r2, r2
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	f042 0220 	orr.w	r2, r2, #32
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f002 021f 	and.w	r2, r2, #31
 80023de:	2101      	movs	r1, #1
 80023e0:	fa01 f202 	lsl.w	r2, r1, r2
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d182      	bne.n	80022f0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ea:	4b3c      	ldr	r3, [pc, #240]	; (80024dc <HAL_RCC_OscConfig+0xe38>)
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	f023 020f 	bic.w	r2, r3, #15
 80023f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	4937      	ldr	r1, [pc, #220]	; (80024dc <HAL_RCC_OscConfig+0xe38>)
 8002400:	4313      	orrs	r3, r2
 8002402:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002404:	4b35      	ldr	r3, [pc, #212]	; (80024dc <HAL_RCC_OscConfig+0xe38>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800240c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002410:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6a19      	ldr	r1, [r3, #32]
 8002418:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	430b      	orrs	r3, r1
 8002426:	492d      	ldr	r1, [pc, #180]	; (80024dc <HAL_RCC_OscConfig+0xe38>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
 800242c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002430:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002434:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800243e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	fa93 f2a3 	rbit	r2, r3
 8002448:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800244c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002450:	601a      	str	r2, [r3, #0]
  return result;
 8002452:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002456:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800245a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002466:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	461a      	mov	r2, r3
 800246e:	2301      	movs	r3, #1
 8002470:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7ff f801 	bl	8001478 <HAL_GetTick>
 8002476:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800247a:	e009      	b.n	8002490 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe fffc 	bl	8001478 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e156      	b.n	800273e <HAL_RCC_OscConfig+0x109a>
 8002490:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002494:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002498:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800249c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	fa93 f2a3 	rbit	r2, r3
 80024ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80024b4:	601a      	str	r2, [r3, #0]
  return result;
 80024b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80024be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d105      	bne.n	80024e0 <HAL_RCC_OscConfig+0xe3c>
 80024d4:	4b01      	ldr	r3, [pc, #4]	; (80024dc <HAL_RCC_OscConfig+0xe38>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	e02a      	b.n	8002530 <HAL_RCC_OscConfig+0xe8c>
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000
 80024e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80024e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	fa93 f2a3 	rbit	r2, r3
 80024fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002500:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800250a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800250e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002518:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	fa93 f2a3 	rbit	r2, r3
 8002522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002526:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	4b86      	ldr	r3, [pc, #536]	; (8002748 <HAL_RCC_OscConfig+0x10a4>)
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002534:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002538:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800253c:	6011      	str	r1, [r2, #0]
 800253e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002542:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	fa92 f1a2 	rbit	r1, r2
 800254c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002550:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002554:	6011      	str	r1, [r2, #0]
  return result;
 8002556:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800255a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	fab2 f282 	clz	r2, r2
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	f042 0220 	orr.w	r2, r2, #32
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	f002 021f 	and.w	r2, r2, #31
 8002570:	2101      	movs	r1, #1
 8002572:	fa01 f202 	lsl.w	r2, r1, r2
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	f43f af7f 	beq.w	800247c <HAL_RCC_OscConfig+0xdd8>
 800257e:	e0dd      	b.n	800273c <HAL_RCC_OscConfig+0x1098>
 8002580:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002584:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002588:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800258c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002592:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	fa93 f2a3 	rbit	r2, r3
 800259c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80025a4:	601a      	str	r2, [r3, #0]
  return result;
 80025a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025aa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80025ae:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b0:	fab3 f383 	clz	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	461a      	mov	r2, r3
 80025c2:	2300      	movs	r3, #0
 80025c4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c6:	f7fe ff57 	bl	8001478 <HAL_GetTick>
 80025ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ce:	e009      	b.n	80025e4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d0:	f7fe ff52 	bl	8001478 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e0ac      	b.n	800273e <HAL_RCC_OscConfig+0x109a>
 80025e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	fa93 f2a3 	rbit	r2, r3
 8002600:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002604:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002608:	601a      	str	r2, [r3, #0]
  return result;
 800260a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800260e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002612:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	fab3 f383 	clz	r3, r3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d102      	bne.n	800262e <HAL_RCC_OscConfig+0xf8a>
 8002628:	4b47      	ldr	r3, [pc, #284]	; (8002748 <HAL_RCC_OscConfig+0x10a4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	e027      	b.n	800267e <HAL_RCC_OscConfig+0xfda>
 800262e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002632:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002636:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800263a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002640:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	fa93 f2a3 	rbit	r2, r3
 800264a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800264e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002658:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800265c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002666:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	fa93 f2a3 	rbit	r2, r3
 8002670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002674:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	4b33      	ldr	r3, [pc, #204]	; (8002748 <HAL_RCC_OscConfig+0x10a4>)
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002682:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002686:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800268a:	6011      	str	r1, [r2, #0]
 800268c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002690:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	fa92 f1a2 	rbit	r1, r2
 800269a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800269e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80026a2:	6011      	str	r1, [r2, #0]
  return result;
 80026a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026a8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	fab2 f282 	clz	r2, r2
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	f042 0220 	orr.w	r2, r2, #32
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	f002 021f 	and.w	r2, r2, #31
 80026be:	2101      	movs	r1, #1
 80026c0:	fa01 f202 	lsl.w	r2, r1, r2
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d182      	bne.n	80025d0 <HAL_RCC_OscConfig+0xf2c>
 80026ca:	e037      	b.n	800273c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e02e      	b.n	800273e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <HAL_RCC_OscConfig+0x10a4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80026e8:	4b17      	ldr	r3, [pc, #92]	; (8002748 <HAL_RCC_OscConfig+0x10a4>)
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80026f4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80026f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	429a      	cmp	r2, r3
 8002706:	d117      	bne.n	8002738 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002708:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800270c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002714:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800271c:	429a      	cmp	r2, r3
 800271e:	d10b      	bne.n	8002738 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002720:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002724:	f003 020f 	and.w	r2, r3, #15
 8002728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800272c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000

0800274c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b09e      	sub	sp, #120	; 0x78
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e162      	b.n	8002a2a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002764:	4b90      	ldr	r3, [pc, #576]	; (80029a8 <HAL_RCC_ClockConfig+0x25c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d910      	bls.n	8002794 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b8d      	ldr	r3, [pc, #564]	; (80029a8 <HAL_RCC_ClockConfig+0x25c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 0207 	bic.w	r2, r3, #7
 800277a:	498b      	ldr	r1, [pc, #556]	; (80029a8 <HAL_RCC_ClockConfig+0x25c>)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b89      	ldr	r3, [pc, #548]	; (80029a8 <HAL_RCC_ClockConfig+0x25c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e14a      	b.n	8002a2a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a0:	4b82      	ldr	r3, [pc, #520]	; (80029ac <HAL_RCC_ClockConfig+0x260>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	497f      	ldr	r1, [pc, #508]	; (80029ac <HAL_RCC_ClockConfig+0x260>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80dc 	beq.w	8002978 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d13c      	bne.n	8002842 <HAL_RCC_ClockConfig+0xf6>
 80027c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d102      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xa6>
 80027ec:	4b6f      	ldr	r3, [pc, #444]	; (80029ac <HAL_RCC_ClockConfig+0x260>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	e00f      	b.n	8002812 <HAL_RCC_ClockConfig+0xc6>
 80027f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	667b      	str	r3, [r7, #100]	; 0x64
 8002800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002804:	663b      	str	r3, [r7, #96]	; 0x60
 8002806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800280e:	4b67      	ldr	r3, [pc, #412]	; (80029ac <HAL_RCC_ClockConfig+0x260>)
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002816:	65ba      	str	r2, [r7, #88]	; 0x58
 8002818:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800281a:	fa92 f2a2 	rbit	r2, r2
 800281e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002820:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002822:	fab2 f282 	clz	r2, r2
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	f042 0220 	orr.w	r2, r2, #32
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	f002 021f 	and.w	r2, r2, #31
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d17b      	bne.n	8002936 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0f3      	b.n	8002a2a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d13c      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x178>
 800284a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800284e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	095b      	lsrs	r3, r3, #5
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d102      	bne.n	8002874 <HAL_RCC_ClockConfig+0x128>
 800286e:	4b4f      	ldr	r3, [pc, #316]	; (80029ac <HAL_RCC_ClockConfig+0x260>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	e00f      	b.n	8002894 <HAL_RCC_ClockConfig+0x148>
 8002874:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002878:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800287c:	fa93 f3a3 	rbit	r3, r3
 8002880:	647b      	str	r3, [r7, #68]	; 0x44
 8002882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002886:	643b      	str	r3, [r7, #64]	; 0x40
 8002888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002890:	4b46      	ldr	r3, [pc, #280]	; (80029ac <HAL_RCC_ClockConfig+0x260>)
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002898:	63ba      	str	r2, [r7, #56]	; 0x38
 800289a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800289c:	fa92 f2a2 	rbit	r2, r2
 80028a0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80028a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028a4:	fab2 f282 	clz	r2, r2
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	f042 0220 	orr.w	r2, r2, #32
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	f002 021f 	and.w	r2, r2, #31
 80028b4:	2101      	movs	r1, #1
 80028b6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d13a      	bne.n	8002936 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0b2      	b.n	8002a2a <HAL_RCC_ClockConfig+0x2de>
 80028c4:	2302      	movs	r3, #2
 80028c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d102      	bne.n	80028ec <HAL_RCC_ClockConfig+0x1a0>
 80028e6:	4b31      	ldr	r3, [pc, #196]	; (80029ac <HAL_RCC_ClockConfig+0x260>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	e00d      	b.n	8002908 <HAL_RCC_ClockConfig+0x1bc>
 80028ec:	2302      	movs	r3, #2
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
 80028f8:	2302      	movs	r3, #2
 80028fa:	623b      	str	r3, [r7, #32]
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	61fb      	str	r3, [r7, #28]
 8002904:	4b29      	ldr	r3, [pc, #164]	; (80029ac <HAL_RCC_ClockConfig+0x260>)
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	2202      	movs	r2, #2
 800290a:	61ba      	str	r2, [r7, #24]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	fa92 f2a2 	rbit	r2, r2
 8002912:	617a      	str	r2, [r7, #20]
  return result;
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	fab2 f282 	clz	r2, r2
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	f042 0220 	orr.w	r2, r2, #32
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	f002 021f 	and.w	r2, r2, #31
 8002926:	2101      	movs	r1, #1
 8002928:	fa01 f202 	lsl.w	r2, r1, r2
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e079      	b.n	8002a2a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002936:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <HAL_RCC_ClockConfig+0x260>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f023 0203 	bic.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	491a      	ldr	r1, [pc, #104]	; (80029ac <HAL_RCC_ClockConfig+0x260>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002948:	f7fe fd96 	bl	8001478 <HAL_GetTick>
 800294c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	e00a      	b.n	8002966 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002950:	f7fe fd92 	bl	8001478 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e061      	b.n	8002a2a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <HAL_RCC_ClockConfig+0x260>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 020c 	and.w	r2, r3, #12
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	429a      	cmp	r2, r3
 8002976:	d1eb      	bne.n	8002950 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_RCC_ClockConfig+0x25c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d214      	bcs.n	80029b0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_RCC_ClockConfig+0x25c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 0207 	bic.w	r2, r3, #7
 800298e:	4906      	ldr	r1, [pc, #24]	; (80029a8 <HAL_RCC_ClockConfig+0x25c>)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <HAL_RCC_ClockConfig+0x25c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e040      	b.n	8002a2a <HAL_RCC_ClockConfig+0x2de>
 80029a8:	40022000 	.word	0x40022000
 80029ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029bc:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_RCC_ClockConfig+0x2e8>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	491a      	ldr	r1, [pc, #104]	; (8002a34 <HAL_RCC_ClockConfig+0x2e8>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029da:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <HAL_RCC_ClockConfig+0x2e8>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4912      	ldr	r1, [pc, #72]	; (8002a34 <HAL_RCC_ClockConfig+0x2e8>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029ee:	f000 f829 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 80029f2:	4601      	mov	r1, r0
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <HAL_RCC_ClockConfig+0x2e8>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029fc:	22f0      	movs	r2, #240	; 0xf0
 80029fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	fa92 f2a2 	rbit	r2, r2
 8002a06:	60fa      	str	r2, [r7, #12]
  return result;
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	fab2 f282 	clz	r2, r2
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	40d3      	lsrs	r3, r2
 8002a12:	4a09      	ldr	r2, [pc, #36]	; (8002a38 <HAL_RCC_ClockConfig+0x2ec>)
 8002a14:	5cd3      	ldrb	r3, [r2, r3]
 8002a16:	fa21 f303 	lsr.w	r3, r1, r3
 8002a1a:	4a08      	ldr	r2, [pc, #32]	; (8002a3c <HAL_RCC_ClockConfig+0x2f0>)
 8002a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <HAL_RCC_ClockConfig+0x2f4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fce4 	bl	80013f0 <HAL_InitTick>
  
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3778      	adds	r7, #120	; 0x78
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000
 8002a38:	08003388 	.word	0x08003388
 8002a3c:	2000001c 	.word	0x2000001c
 8002a40:	20000020 	.word	0x20000020

08002a44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b08b      	sub	sp, #44	; 0x2c
 8002a48:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	2300      	movs	r3, #0
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d002      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x30>
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_GetSysClockFreq+0x36>
 8002a72:	e03f      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a74:	4b25      	ldr	r3, [pc, #148]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a76:	623b      	str	r3, [r7, #32]
      break;
 8002a78:	e03f      	b.n	8002afa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a80:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a84:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	fa92 f2a2 	rbit	r2, r2
 8002a8c:	607a      	str	r2, [r7, #4]
  return result;
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	fab2 f282 	clz	r2, r2
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	40d3      	lsrs	r3, r2
 8002a98:	4a1d      	ldr	r2, [pc, #116]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a9a:	5cd3      	ldrb	r3, [r2, r3]
 8002a9c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	fa92 f2a2 	rbit	r2, r2
 8002ab0:	60fa      	str	r2, [r7, #12]
  return result;
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	fab2 f282 	clz	r2, r2
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	40d3      	lsrs	r3, r2
 8002abc:	4a15      	ldr	r2, [pc, #84]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002abe:	5cd3      	ldrb	r3, [r2, r3]
 8002ac0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002acc:	4a0f      	ldr	r2, [pc, #60]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
 8002adc:	e007      	b.n	8002aee <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ade:	4a0b      	ldr	r2, [pc, #44]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	fb02 f303 	mul.w	r3, r2, r3
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	623b      	str	r3, [r7, #32]
      break;
 8002af2:	e002      	b.n	8002afa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002af4:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002af6:	623b      	str	r3, [r7, #32]
      break;
 8002af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002afa:	6a3b      	ldr	r3, [r7, #32]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	372c      	adds	r7, #44	; 0x2c
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	007a1200 	.word	0x007a1200
 8002b10:	08003398 	.word	0x08003398
 8002b14:	080033a8 	.word	0x080033a8

08002b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b092      	sub	sp, #72	; 0x48
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 80d4 	beq.w	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b3c:	4b4e      	ldr	r3, [pc, #312]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10e      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b48:	4b4b      	ldr	r3, [pc, #300]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	4a4a      	ldr	r2, [pc, #296]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b52:	61d3      	str	r3, [r2, #28]
 8002b54:	4b48      	ldr	r3, [pc, #288]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b60:	2301      	movs	r3, #1
 8002b62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b66:	4b45      	ldr	r3, [pc, #276]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d118      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b72:	4b42      	ldr	r3, [pc, #264]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a41      	ldr	r2, [pc, #260]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b7e:	f7fe fc7b 	bl	8001478 <HAL_GetTick>
 8002b82:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b84:	e008      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b86:	f7fe fc77 	bl	8001478 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b64      	cmp	r3, #100	; 0x64
 8002b92:	d901      	bls.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e1d6      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b98:	4b38      	ldr	r3, [pc, #224]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ba4:	4b34      	ldr	r3, [pc, #208]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8084 	beq.w	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d07c      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bc4:	4b2c      	ldr	r3, [pc, #176]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	461a      	mov	r2, r3
 8002bee:	2301      	movs	r3, #1
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bf6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	461a      	mov	r2, r3
 8002c12:	2300      	movs	r3, #0
 8002c14:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c16:	4a18      	ldr	r2, [pc, #96]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d04b      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c26:	f7fe fc27 	bl	8001478 <HAL_GetTick>
 8002c2a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2e:	f7fe fc23 	bl	8001478 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e180      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002c44:	2302      	movs	r3, #2
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c50:	2302      	movs	r3, #2
 8002c52:	623b      	str	r3, [r7, #32]
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	61fb      	str	r3, [r7, #28]
  return result;
 8002c5c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	f043 0302 	orr.w	r3, r3, #2
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d108      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002c72:	4b01      	ldr	r3, [pc, #4]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	e00d      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40007000 	.word	0x40007000
 8002c80:	10908100 	.word	0x10908100
 8002c84:	2302      	movs	r3, #2
 8002c86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	4b9a      	ldr	r3, [pc, #616]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	2202      	movs	r2, #2
 8002c96:	613a      	str	r2, [r7, #16]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	fa92 f2a2 	rbit	r2, r2
 8002c9e:	60fa      	str	r2, [r7, #12]
  return result;
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	fab2 f282 	clz	r2, r2
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	f002 021f 	and.w	r2, r2, #31
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0b7      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002cbe:	4b8f      	ldr	r3, [pc, #572]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	498c      	ldr	r1, [pc, #560]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cd0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d105      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd8:	4b88      	ldr	r3, [pc, #544]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	4a87      	ldr	r2, [pc, #540]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cf0:	4b82      	ldr	r3, [pc, #520]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	f023 0203 	bic.w	r2, r3, #3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	497f      	ldr	r1, [pc, #508]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d0e:	4b7b      	ldr	r3, [pc, #492]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	4978      	ldr	r1, [pc, #480]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d2c:	4b73      	ldr	r3, [pc, #460]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	4970      	ldr	r1, [pc, #448]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d008      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d4a:	4b6c      	ldr	r3, [pc, #432]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	f023 0210 	bic.w	r2, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	4969      	ldr	r1, [pc, #420]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d68:	4b64      	ldr	r3, [pc, #400]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d74:	4961      	ldr	r1, [pc, #388]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d008      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d86:	4b5d      	ldr	r3, [pc, #372]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f023 0220 	bic.w	r2, r3, #32
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	495a      	ldr	r1, [pc, #360]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002da4:	4b55      	ldr	r3, [pc, #340]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	4952      	ldr	r1, [pc, #328]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dc2:	4b4e      	ldr	r3, [pc, #312]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	494b      	ldr	r1, [pc, #300]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002de0:	4b46      	ldr	r3, [pc, #280]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	4943      	ldr	r1, [pc, #268]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dfe:	4b3f      	ldr	r3, [pc, #252]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	493c      	ldr	r1, [pc, #240]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e1c:	4b37      	ldr	r3, [pc, #220]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	4934      	ldr	r1, [pc, #208]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002e3a:	4b30      	ldr	r3, [pc, #192]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e46:	492d      	ldr	r1, [pc, #180]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e58:	4b28      	ldr	r3, [pc, #160]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e64:	4925      	ldr	r1, [pc, #148]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002e76:	4b21      	ldr	r3, [pc, #132]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	491e      	ldr	r1, [pc, #120]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002e94:	4b19      	ldr	r3, [pc, #100]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea0:	4916      	ldr	r1, [pc, #88]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002eb2:	4b12      	ldr	r3, [pc, #72]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebe:	490f      	ldr	r1, [pc, #60]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002edc:	4907      	ldr	r1, [pc, #28]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00c      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002eee:	4b03      	ldr	r3, [pc, #12]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	e002      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f02:	4913      	ldr	r1, [pc, #76]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002f14:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f20:	490b      	ldr	r1, [pc, #44]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002f32:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f3e:	4904      	ldr	r1, [pc, #16]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3748      	adds	r7, #72	; 0x48
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000

08002f54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d001      	beq.n	8002f6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e047      	b.n	8002ffc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a23      	ldr	r2, [pc, #140]	; (8003008 <HAL_TIM_Base_Start+0xb4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01d      	beq.n	8002fba <HAL_TIM_Base_Start+0x66>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f86:	d018      	beq.n	8002fba <HAL_TIM_Base_Start+0x66>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1f      	ldr	r2, [pc, #124]	; (800300c <HAL_TIM_Base_Start+0xb8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <HAL_TIM_Base_Start+0x66>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <HAL_TIM_Base_Start+0xbc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00e      	beq.n	8002fba <HAL_TIM_Base_Start+0x66>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1c      	ldr	r2, [pc, #112]	; (8003014 <HAL_TIM_Base_Start+0xc0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d009      	beq.n	8002fba <HAL_TIM_Base_Start+0x66>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1b      	ldr	r2, [pc, #108]	; (8003018 <HAL_TIM_Base_Start+0xc4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d004      	beq.n	8002fba <HAL_TIM_Base_Start+0x66>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a19      	ldr	r2, [pc, #100]	; (800301c <HAL_TIM_Base_Start+0xc8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d115      	bne.n	8002fe6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	4b17      	ldr	r3, [pc, #92]	; (8003020 <HAL_TIM_Base_Start+0xcc>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b06      	cmp	r3, #6
 8002fca:	d015      	beq.n	8002ff8 <HAL_TIM_Base_Start+0xa4>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd2:	d011      	beq.n	8002ff8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe4:	e008      	b.n	8002ff8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0201 	orr.w	r2, r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e000      	b.n	8002ffa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40000400 	.word	0x40000400
 8003010:	40000800 	.word	0x40000800
 8003014:	40013400 	.word	0x40013400
 8003018:	40014000 	.word	0x40014000
 800301c:	40015000 	.word	0x40015000
 8003020:	00010007 	.word	0x00010007

08003024 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d104      	bne.n	8003042 <HAL_TIM_IC_Start_IT+0x1e>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800303e:	b2db      	uxtb	r3, r3
 8003040:	e023      	b.n	800308a <HAL_TIM_IC_Start_IT+0x66>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b04      	cmp	r3, #4
 8003046:	d104      	bne.n	8003052 <HAL_TIM_IC_Start_IT+0x2e>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800304e:	b2db      	uxtb	r3, r3
 8003050:	e01b      	b.n	800308a <HAL_TIM_IC_Start_IT+0x66>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d104      	bne.n	8003062 <HAL_TIM_IC_Start_IT+0x3e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800305e:	b2db      	uxtb	r3, r3
 8003060:	e013      	b.n	800308a <HAL_TIM_IC_Start_IT+0x66>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b0c      	cmp	r3, #12
 8003066:	d104      	bne.n	8003072 <HAL_TIM_IC_Start_IT+0x4e>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306e:	b2db      	uxtb	r3, r3
 8003070:	e00b      	b.n	800308a <HAL_TIM_IC_Start_IT+0x66>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b10      	cmp	r3, #16
 8003076:	d104      	bne.n	8003082 <HAL_TIM_IC_Start_IT+0x5e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800307e:	b2db      	uxtb	r3, r3
 8003080:	e003      	b.n	800308a <HAL_TIM_IC_Start_IT+0x66>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003088:	b2db      	uxtb	r3, r3
 800308a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d104      	bne.n	800309c <HAL_TIM_IC_Start_IT+0x78>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003098:	b2db      	uxtb	r3, r3
 800309a:	e013      	b.n	80030c4 <HAL_TIM_IC_Start_IT+0xa0>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d104      	bne.n	80030ac <HAL_TIM_IC_Start_IT+0x88>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	e00b      	b.n	80030c4 <HAL_TIM_IC_Start_IT+0xa0>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d104      	bne.n	80030bc <HAL_TIM_IC_Start_IT+0x98>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	e003      	b.n	80030c4 <HAL_TIM_IC_Start_IT+0xa0>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80030c6:	7bbb      	ldrb	r3, [r7, #14]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d102      	bne.n	80030d2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80030cc:	7b7b      	ldrb	r3, [r7, #13]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d001      	beq.n	80030d6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e0dd      	b.n	8003292 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d104      	bne.n	80030e6 <HAL_TIM_IC_Start_IT+0xc2>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030e4:	e023      	b.n	800312e <HAL_TIM_IC_Start_IT+0x10a>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d104      	bne.n	80030f6 <HAL_TIM_IC_Start_IT+0xd2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030f4:	e01b      	b.n	800312e <HAL_TIM_IC_Start_IT+0x10a>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d104      	bne.n	8003106 <HAL_TIM_IC_Start_IT+0xe2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003104:	e013      	b.n	800312e <HAL_TIM_IC_Start_IT+0x10a>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b0c      	cmp	r3, #12
 800310a:	d104      	bne.n	8003116 <HAL_TIM_IC_Start_IT+0xf2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003114:	e00b      	b.n	800312e <HAL_TIM_IC_Start_IT+0x10a>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b10      	cmp	r3, #16
 800311a:	d104      	bne.n	8003126 <HAL_TIM_IC_Start_IT+0x102>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003124:	e003      	b.n	800312e <HAL_TIM_IC_Start_IT+0x10a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2202      	movs	r2, #2
 800312a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d104      	bne.n	800313e <HAL_TIM_IC_Start_IT+0x11a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800313c:	e013      	b.n	8003166 <HAL_TIM_IC_Start_IT+0x142>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b04      	cmp	r3, #4
 8003142:	d104      	bne.n	800314e <HAL_TIM_IC_Start_IT+0x12a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800314c:	e00b      	b.n	8003166 <HAL_TIM_IC_Start_IT+0x142>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b08      	cmp	r3, #8
 8003152:	d104      	bne.n	800315e <HAL_TIM_IC_Start_IT+0x13a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800315c:	e003      	b.n	8003166 <HAL_TIM_IC_Start_IT+0x142>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2202      	movs	r2, #2
 8003162:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b0c      	cmp	r3, #12
 800316a:	d841      	bhi.n	80031f0 <HAL_TIM_IC_Start_IT+0x1cc>
 800316c:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <HAL_TIM_IC_Start_IT+0x150>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	080031a9 	.word	0x080031a9
 8003178:	080031f1 	.word	0x080031f1
 800317c:	080031f1 	.word	0x080031f1
 8003180:	080031f1 	.word	0x080031f1
 8003184:	080031bb 	.word	0x080031bb
 8003188:	080031f1 	.word	0x080031f1
 800318c:	080031f1 	.word	0x080031f1
 8003190:	080031f1 	.word	0x080031f1
 8003194:	080031cd 	.word	0x080031cd
 8003198:	080031f1 	.word	0x080031f1
 800319c:	080031f1 	.word	0x080031f1
 80031a0:	080031f1 	.word	0x080031f1
 80031a4:	080031df 	.word	0x080031df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0202 	orr.w	r2, r2, #2
 80031b6:	60da      	str	r2, [r3, #12]
      break;
 80031b8:	e01d      	b.n	80031f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0204 	orr.w	r2, r2, #4
 80031c8:	60da      	str	r2, [r3, #12]
      break;
 80031ca:	e014      	b.n	80031f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0208 	orr.w	r2, r2, #8
 80031da:	60da      	str	r2, [r3, #12]
      break;
 80031dc:	e00b      	b.n	80031f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0210 	orr.w	r2, r2, #16
 80031ec:	60da      	str	r2, [r3, #12]
      break;
 80031ee:	e002      	b.n	80031f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
      break;
 80031f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d149      	bne.n	8003290 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2201      	movs	r2, #1
 8003202:	6839      	ldr	r1, [r7, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f000 f861 	bl	80032cc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a23      	ldr	r2, [pc, #140]	; (800329c <HAL_TIM_IC_Start_IT+0x278>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d01d      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x22c>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321c:	d018      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x22c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1f      	ldr	r2, [pc, #124]	; (80032a0 <HAL_TIM_IC_Start_IT+0x27c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x22c>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1d      	ldr	r2, [pc, #116]	; (80032a4 <HAL_TIM_IC_Start_IT+0x280>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00e      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x22c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1c      	ldr	r2, [pc, #112]	; (80032a8 <HAL_TIM_IC_Start_IT+0x284>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d009      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x22c>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1a      	ldr	r2, [pc, #104]	; (80032ac <HAL_TIM_IC_Start_IT+0x288>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d004      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x22c>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a19      	ldr	r2, [pc, #100]	; (80032b0 <HAL_TIM_IC_Start_IT+0x28c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d115      	bne.n	800327c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <HAL_TIM_IC_Start_IT+0x290>)
 8003258:	4013      	ands	r3, r2
 800325a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b06      	cmp	r3, #6
 8003260:	d015      	beq.n	800328e <HAL_TIM_IC_Start_IT+0x26a>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003268:	d011      	beq.n	800328e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0201 	orr.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327a:	e008      	b.n	800328e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	e000      	b.n	8003290 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003290:	7bfb      	ldrb	r3, [r7, #15]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40012c00 	.word	0x40012c00
 80032a0:	40000400 	.word	0x40000400
 80032a4:	40000800 	.word	0x40000800
 80032a8:	40013400 	.word	0x40013400
 80032ac:	40014000 	.word	0x40014000
 80032b0:	40015000 	.word	0x40015000
 80032b4:	00010007 	.word	0x00010007

080032b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	2201      	movs	r2, #1
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a1a      	ldr	r2, [r3, #32]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	401a      	ands	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a1a      	ldr	r2, [r3, #32]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	431a      	orrs	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	621a      	str	r2, [r3, #32]
}
 800330a:	bf00      	nop
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <memset>:
 8003316:	4402      	add	r2, r0
 8003318:	4603      	mov	r3, r0
 800331a:	4293      	cmp	r3, r2
 800331c:	d100      	bne.n	8003320 <memset+0xa>
 800331e:	4770      	bx	lr
 8003320:	f803 1b01 	strb.w	r1, [r3], #1
 8003324:	e7f9      	b.n	800331a <memset+0x4>
	...

08003328 <__libc_init_array>:
 8003328:	b570      	push	{r4, r5, r6, lr}
 800332a:	4d0d      	ldr	r5, [pc, #52]	; (8003360 <__libc_init_array+0x38>)
 800332c:	4c0d      	ldr	r4, [pc, #52]	; (8003364 <__libc_init_array+0x3c>)
 800332e:	1b64      	subs	r4, r4, r5
 8003330:	10a4      	asrs	r4, r4, #2
 8003332:	2600      	movs	r6, #0
 8003334:	42a6      	cmp	r6, r4
 8003336:	d109      	bne.n	800334c <__libc_init_array+0x24>
 8003338:	4d0b      	ldr	r5, [pc, #44]	; (8003368 <__libc_init_array+0x40>)
 800333a:	4c0c      	ldr	r4, [pc, #48]	; (800336c <__libc_init_array+0x44>)
 800333c:	f000 f818 	bl	8003370 <_init>
 8003340:	1b64      	subs	r4, r4, r5
 8003342:	10a4      	asrs	r4, r4, #2
 8003344:	2600      	movs	r6, #0
 8003346:	42a6      	cmp	r6, r4
 8003348:	d105      	bne.n	8003356 <__libc_init_array+0x2e>
 800334a:	bd70      	pop	{r4, r5, r6, pc}
 800334c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003350:	4798      	blx	r3
 8003352:	3601      	adds	r6, #1
 8003354:	e7ee      	b.n	8003334 <__libc_init_array+0xc>
 8003356:	f855 3b04 	ldr.w	r3, [r5], #4
 800335a:	4798      	blx	r3
 800335c:	3601      	adds	r6, #1
 800335e:	e7f2      	b.n	8003346 <__libc_init_array+0x1e>
 8003360:	080033b8 	.word	0x080033b8
 8003364:	080033b8 	.word	0x080033b8
 8003368:	080033b8 	.word	0x080033b8
 800336c:	080033bc 	.word	0x080033bc

08003370 <_init>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	bf00      	nop
 8003374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003376:	bc08      	pop	{r3}
 8003378:	469e      	mov	lr, r3
 800337a:	4770      	bx	lr

0800337c <_fini>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	bf00      	nop
 8003380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003382:	bc08      	pop	{r3}
 8003384:	469e      	mov	lr, r3
 8003386:	4770      	bx	lr
