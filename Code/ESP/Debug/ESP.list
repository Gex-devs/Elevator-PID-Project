
ESP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002274  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002408  08002408  00003408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002438  08002438  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002438  08002438  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002438  08002438  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002438  08002438  00003438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800243c  0800243c  0000343c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002440  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000000c0  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000cc  200000cc  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004be6  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001010  00000000  00000000  00008c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000410  00000000  00000000  00009c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002ef  00000000  00000000  0000a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e8b4  00000000  00000000  0000a337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005a7c  00000000  00000000  00028beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb970  00000000  00000000  0002e667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e9fd7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e6c  00000000  00000000  000ea01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000eae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080023f0 	.word	0x080023f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080023f0 	.word	0x080023f0

080001d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__NVIC_GetPriorityGrouping+0x18>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	0a1b      	lsrs	r3, r3, #8
 80001de:	f003 0307 	and.w	r3, r3, #7
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	db0b      	blt.n	800021a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	f003 021f 	and.w	r2, r3, #31
 8000208:	4907      	ldr	r1, [pc, #28]	@ (8000228 <__NVIC_EnableIRQ+0x38>)
 800020a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020e:	095b      	lsrs	r3, r3, #5
 8000210:	2001      	movs	r0, #1
 8000212:	fa00 f202 	lsl.w	r2, r0, r2
 8000216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	e000e100 	.word	0xe000e100

0800022c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	6039      	str	r1, [r7, #0]
 8000236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023c:	2b00      	cmp	r3, #0
 800023e:	db0a      	blt.n	8000256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	b2da      	uxtb	r2, r3
 8000244:	490c      	ldr	r1, [pc, #48]	@ (8000278 <__NVIC_SetPriority+0x4c>)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	0112      	lsls	r2, r2, #4
 800024c:	b2d2      	uxtb	r2, r2
 800024e:	440b      	add	r3, r1
 8000250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000254:	e00a      	b.n	800026c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	b2da      	uxtb	r2, r3
 800025a:	4908      	ldr	r1, [pc, #32]	@ (800027c <__NVIC_SetPriority+0x50>)
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	f003 030f 	and.w	r3, r3, #15
 8000262:	3b04      	subs	r3, #4
 8000264:	0112      	lsls	r2, r2, #4
 8000266:	b2d2      	uxtb	r2, r2
 8000268:	440b      	add	r3, r1
 800026a:	761a      	strb	r2, [r3, #24]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	e000e100 	.word	0xe000e100
 800027c:	e000ed00 	.word	0xe000ed00

08000280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000280:	b480      	push	{r7}
 8000282:	b089      	sub	sp, #36	@ 0x24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	f003 0307 	and.w	r3, r3, #7
 8000292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000294:	69fb      	ldr	r3, [r7, #28]
 8000296:	f1c3 0307 	rsb	r3, r3, #7
 800029a:	2b04      	cmp	r3, #4
 800029c:	bf28      	it	cs
 800029e:	2304      	movcs	r3, #4
 80002a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a2:	69fb      	ldr	r3, [r7, #28]
 80002a4:	3304      	adds	r3, #4
 80002a6:	2b06      	cmp	r3, #6
 80002a8:	d902      	bls.n	80002b0 <NVIC_EncodePriority+0x30>
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	3b03      	subs	r3, #3
 80002ae:	e000      	b.n	80002b2 <NVIC_EncodePriority+0x32>
 80002b0:	2300      	movs	r3, #0
 80002b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b4:	f04f 32ff 	mov.w	r2, #4294967295
 80002b8:	69bb      	ldr	r3, [r7, #24]
 80002ba:	fa02 f303 	lsl.w	r3, r2, r3
 80002be:	43da      	mvns	r2, r3
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	401a      	ands	r2, r3
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002c8:	f04f 31ff 	mov.w	r1, #4294967295
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	43d9      	mvns	r1, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d8:	4313      	orrs	r3, r2
         );
}
 80002da:	4618      	mov	r0, r3
 80002dc:	3724      	adds	r7, #36	@ 0x24
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
	...

080002e8 <EXTI3_IRQHandler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile bool debounce_done = false;

void EXTI3_IRQHandler(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
    EXTI->PR |= EXTI_PR_PR3; // Clear the pending bit
 80002ec:	4b22      	ldr	r3, [pc, #136]	@ (8000378 <EXTI3_IRQHandler+0x90>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a21      	ldr	r2, [pc, #132]	@ (8000378 <EXTI3_IRQHandler+0x90>)
 80002f2:	f043 0308 	orr.w	r3, r3, #8
 80002f6:	6153      	str	r3, [r2, #20]

    if (!debounce_done && !(GPIOB->IDR & GPIO_IDR_3))
 80002f8:	4b20      	ldr	r3, [pc, #128]	@ (800037c <EXTI3_IRQHandler+0x94>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	f083 0301 	eor.w	r3, r3, #1
 8000302:	b2db      	uxtb	r3, r3
 8000304:	2b00      	cmp	r3, #0
 8000306:	d00e      	beq.n	8000326 <EXTI3_IRQHandler+0x3e>
 8000308:	4b1d      	ldr	r3, [pc, #116]	@ (8000380 <EXTI3_IRQHandler+0x98>)
 800030a:	691b      	ldr	r3, [r3, #16]
 800030c:	f003 0308 	and.w	r3, r3, #8
 8000310:	2b00      	cmp	r3, #0
 8000312:	d108      	bne.n	8000326 <EXTI3_IRQHandler+0x3e>
    {
        // Button is pressed (assuming it's stable after debounce)
        debounce_done = true;
 8000314:	4b19      	ldr	r3, [pc, #100]	@ (800037c <EXTI3_IRQHandler+0x94>)
 8000316:	2201      	movs	r2, #1
 8000318:	701a      	strb	r2, [r3, #0]
        start_time = HAL_GetTick();
 800031a:	f000 fae5 	bl	80008e8 <HAL_GetTick>
 800031e:	4603      	mov	r3, r0
 8000320:	4a18      	ldr	r2, [pc, #96]	@ (8000384 <EXTI3_IRQHandler+0x9c>)
 8000322:	6013      	str	r3, [r2, #0]
            counter++;
        }

        debounce_done = false; // Reset debounce flag
    }
}
 8000324:	e025      	b.n	8000372 <EXTI3_IRQHandler+0x8a>
    else if (debounce_done && (GPIOB->IDR & GPIO_IDR_3))
 8000326:	4b15      	ldr	r3, [pc, #84]	@ (800037c <EXTI3_IRQHandler+0x94>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	b2db      	uxtb	r3, r3
 800032c:	2b00      	cmp	r3, #0
 800032e:	d020      	beq.n	8000372 <EXTI3_IRQHandler+0x8a>
 8000330:	4b13      	ldr	r3, [pc, #76]	@ (8000380 <EXTI3_IRQHandler+0x98>)
 8000332:	691b      	ldr	r3, [r3, #16]
 8000334:	f003 0308 	and.w	r3, r3, #8
 8000338:	2b00      	cmp	r3, #0
 800033a:	d01a      	beq.n	8000372 <EXTI3_IRQHandler+0x8a>
        end_time = HAL_GetTick();
 800033c:	f000 fad4 	bl	80008e8 <HAL_GetTick>
 8000340:	4603      	mov	r3, r0
 8000342:	4a11      	ldr	r2, [pc, #68]	@ (8000388 <EXTI3_IRQHandler+0xa0>)
 8000344:	6013      	str	r3, [r2, #0]
        if ((end_time - start_time) < 50)
 8000346:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <EXTI3_IRQHandler+0xa0>)
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	4b0e      	ldr	r3, [pc, #56]	@ (8000384 <EXTI3_IRQHandler+0x9c>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	1ad3      	subs	r3, r2, r3
 8000350:	2b31      	cmp	r3, #49	@ 0x31
 8000352:	d806      	bhi.n	8000362 <EXTI3_IRQHandler+0x7a>
            GPIOB->ODR ^= GPIO_ODR_5; // Toggle LED on PB5
 8000354:	4b0a      	ldr	r3, [pc, #40]	@ (8000380 <EXTI3_IRQHandler+0x98>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a09      	ldr	r2, [pc, #36]	@ (8000380 <EXTI3_IRQHandler+0x98>)
 800035a:	f083 0320 	eor.w	r3, r3, #32
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	e004      	b.n	800036c <EXTI3_IRQHandler+0x84>
            counter++;
 8000362:	4b0a      	ldr	r3, [pc, #40]	@ (800038c <EXTI3_IRQHandler+0xa4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	3301      	adds	r3, #1
 8000368:	4a08      	ldr	r2, [pc, #32]	@ (800038c <EXTI3_IRQHandler+0xa4>)
 800036a:	6013      	str	r3, [r2, #0]
        debounce_done = false; // Reset debounce flag
 800036c:	4b03      	ldr	r3, [pc, #12]	@ (800037c <EXTI3_IRQHandler+0x94>)
 800036e:	2200      	movs	r2, #0
 8000370:	701a      	strb	r2, [r3, #0]
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40010400 	.word	0x40010400
 800037c:	200000c4 	.word	0x200000c4
 8000380:	48000400 	.word	0x48000400
 8000384:	20000030 	.word	0x20000030
 8000388:	20000034 	.word	0x20000034
 800038c:	20000038 	.word	0x20000038

08000390 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR5)
 8000394:	4b21      	ldr	r3, [pc, #132]	@ (800041c <EXTI9_5_IRQHandler+0x8c>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	f003 0320 	and.w	r3, r3, #32
 800039c:	2b00      	cmp	r3, #0
 800039e:	d03b      	beq.n	8000418 <EXTI9_5_IRQHandler+0x88>
    {
        EXTI->PR |= EXTI_PR_PR5; // Clear the pending bit
 80003a0:	4b1e      	ldr	r3, [pc, #120]	@ (800041c <EXTI9_5_IRQHandler+0x8c>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4a1d      	ldr	r2, [pc, #116]	@ (800041c <EXTI9_5_IRQHandler+0x8c>)
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	6153      	str	r3, [r2, #20]

        if (!debounce_done && !(GPIOB->IDR & GPIO_IDR_5))
 80003ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000420 <EXTI9_5_IRQHandler+0x90>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	f083 0301 	eor.w	r3, r3, #1
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d00e      	beq.n	80003da <EXTI9_5_IRQHandler+0x4a>
 80003bc:	4b19      	ldr	r3, [pc, #100]	@ (8000424 <EXTI9_5_IRQHandler+0x94>)
 80003be:	691b      	ldr	r3, [r3, #16]
 80003c0:	f003 0320 	and.w	r3, r3, #32
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d108      	bne.n	80003da <EXTI9_5_IRQHandler+0x4a>
        {
            // Button is pressed (assuming it's stable after debounce)
            debounce_done = true;
 80003c8:	4b15      	ldr	r3, [pc, #84]	@ (8000420 <EXTI9_5_IRQHandler+0x90>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	701a      	strb	r2, [r3, #0]
            start_time2 = HAL_GetTick();
 80003ce:	f000 fa8b 	bl	80008e8 <HAL_GetTick>
 80003d2:	4603      	mov	r3, r0
 80003d4:	4a14      	ldr	r2, [pc, #80]	@ (8000428 <EXTI9_5_IRQHandler+0x98>)
 80003d6:	6013      	str	r3, [r2, #0]
            }

            debounce_done = false; // Reset debounce flag
        }
    }
}
 80003d8:	e01e      	b.n	8000418 <EXTI9_5_IRQHandler+0x88>
        else if (debounce_done && (GPIOB->IDR & GPIO_IDR_5))
 80003da:	4b11      	ldr	r3, [pc, #68]	@ (8000420 <EXTI9_5_IRQHandler+0x90>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d019      	beq.n	8000418 <EXTI9_5_IRQHandler+0x88>
 80003e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000424 <EXTI9_5_IRQHandler+0x94>)
 80003e6:	691b      	ldr	r3, [r3, #16]
 80003e8:	f003 0320 	and.w	r3, r3, #32
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d013      	beq.n	8000418 <EXTI9_5_IRQHandler+0x88>
            end_time2 = HAL_GetTick();
 80003f0:	f000 fa7a 	bl	80008e8 <HAL_GetTick>
 80003f4:	4603      	mov	r3, r0
 80003f6:	4a0d      	ldr	r2, [pc, #52]	@ (800042c <EXTI9_5_IRQHandler+0x9c>)
 80003f8:	6013      	str	r3, [r2, #0]
            if ((end_time2 - start_time2) < 50)
 80003fa:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <EXTI9_5_IRQHandler+0x9c>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000428 <EXTI9_5_IRQHandler+0x98>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	1ad3      	subs	r3, r2, r3
 8000404:	2b31      	cmp	r3, #49	@ 0x31
 8000406:	d904      	bls.n	8000412 <EXTI9_5_IRQHandler+0x82>
                counter--;
 8000408:	4b09      	ldr	r3, [pc, #36]	@ (8000430 <EXTI9_5_IRQHandler+0xa0>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	3b01      	subs	r3, #1
 800040e:	4a08      	ldr	r2, [pc, #32]	@ (8000430 <EXTI9_5_IRQHandler+0xa0>)
 8000410:	6013      	str	r3, [r2, #0]
            debounce_done = false; // Reset debounce flag
 8000412:	4b03      	ldr	r3, [pc, #12]	@ (8000420 <EXTI9_5_IRQHandler+0x90>)
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40010400 	.word	0x40010400
 8000420:	200000c4 	.word	0x200000c4
 8000424:	48000400 	.word	0x48000400
 8000428:	20000028 	.word	0x20000028
 800042c:	2000002c 	.word	0x2000002c
 8000430:	20000038 	.word	0x20000038

08000434 <main>:

int main(void) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af02      	add	r7, sp, #8

	HAL_Init();
 800043a:	f000 f9fb 	bl	8000834 <HAL_Init>

	HAL_InitTick(TICK_INT_PRIORITY);
 800043e:	200f      	movs	r0, #15
 8000440:	f000 fa0e 	bl	8000860 <HAL_InitTick>
	SystemClock_Config();
 8000444:	f000 f8d7 	bl	80005f6 <SystemClock_Config>
//	  MX_GPIO_Init();
	MX_USART2_UART_Init();
 8000448:	f000 f934 	bl	80006b4 <MX_USART2_UART_Init>

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN;
 800044c:	4b31      	ldr	r3, [pc, #196]	@ (8000514 <main+0xe0>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	4a30      	ldr	r2, [pc, #192]	@ (8000514 <main+0xe0>)
 8000452:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 8000456:	6153      	str	r3, [r2, #20]
//  EXTI->FTSR |= EXTI_FTSR_TR13;
//  EXTI->RTSR |= EXTI_RTSR_TR13;
//  EXTI->IMR |= EXTI_IMR_MR13;
//  NVIC_EnableIRQ(EXTI15_10_IRQn);
	// Configure EXTI for PB3 (B1 button)
	SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI3; // Clear EXTI3 configuration
 8000458:	4b2f      	ldr	r3, [pc, #188]	@ (8000518 <main+0xe4>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	4a2e      	ldr	r2, [pc, #184]	@ (8000518 <main+0xe4>)
 800045e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000462:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PB; // PB3 as EXTI line 3
 8000464:	4b2c      	ldr	r3, [pc, #176]	@ (8000518 <main+0xe4>)
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	4a2b      	ldr	r2, [pc, #172]	@ (8000518 <main+0xe4>)
 800046a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800046e:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_IM3; // Enable interrupt for EXTI line 3
 8000470:	4b2a      	ldr	r3, [pc, #168]	@ (800051c <main+0xe8>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a29      	ldr	r2, [pc, #164]	@ (800051c <main+0xe8>)
 8000476:	f043 0308 	orr.w	r3, r3, #8
 800047a:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_TR3;
 800047c:	4b27      	ldr	r3, [pc, #156]	@ (800051c <main+0xe8>)
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	4a26      	ldr	r2, [pc, #152]	@ (800051c <main+0xe8>)
 8000482:	f043 0308 	orr.w	r3, r3, #8
 8000486:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR |= EXTI_RTSR_TR3;
 8000488:	4b24      	ldr	r3, [pc, #144]	@ (800051c <main+0xe8>)
 800048a:	689b      	ldr	r3, [r3, #8]
 800048c:	4a23      	ldr	r2, [pc, #140]	@ (800051c <main+0xe8>)
 800048e:	f043 0308 	orr.w	r3, r3, #8
 8000492:	6093      	str	r3, [r2, #8]

	// Configure EXTI for PB5 (Button connected here)
	SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR2_EXTI5; // Clear EXTI5 configuration
 8000494:	4b20      	ldr	r3, [pc, #128]	@ (8000518 <main+0xe4>)
 8000496:	68db      	ldr	r3, [r3, #12]
 8000498:	4a1f      	ldr	r2, [pc, #124]	@ (8000518 <main+0xe4>)
 800049a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800049e:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI5_PB; // PB5 as EXTI line 5
 80004a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000518 <main+0xe4>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	4a1c      	ldr	r2, [pc, #112]	@ (8000518 <main+0xe4>)
 80004a6:	f043 0310 	orr.w	r3, r3, #16
 80004aa:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_IM5; // Enable interrupt for EXTI line 5
 80004ac:	4b1b      	ldr	r3, [pc, #108]	@ (800051c <main+0xe8>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a1a      	ldr	r2, [pc, #104]	@ (800051c <main+0xe8>)
 80004b2:	f043 0320 	orr.w	r3, r3, #32
 80004b6:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_FT5; // Trigger on falling edge for EXTI line 5
 80004b8:	4b18      	ldr	r3, [pc, #96]	@ (800051c <main+0xe8>)
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	4a17      	ldr	r2, [pc, #92]	@ (800051c <main+0xe8>)
 80004be:	f043 0320 	orr.w	r3, r3, #32
 80004c2:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR |= EXTI_RTSR_RT5; // Trigger on falling edge for EXTI line 5
 80004c4:	4b15      	ldr	r3, [pc, #84]	@ (800051c <main+0xe8>)
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	4a14      	ldr	r2, [pc, #80]	@ (800051c <main+0xe8>)
 80004ca:	f043 0320 	orr.w	r3, r3, #32
 80004ce:	6093      	str	r3, [r2, #8]

	// Enable NVIC interrupts for EXTI lines
	NVIC_EnableIRQ(EXTI3_IRQn); // Enable NVIC IRQ for EXTI line 3 (PB3)
 80004d0:	2009      	movs	r0, #9
 80004d2:	f7ff fe8d 	bl	80001f0 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI9_5_IRQn); // Enable NVIC IRQ for EXTI lines 5 to 9 (PB5 is EXTI line 5)
 80004d6:	2017      	movs	r0, #23
 80004d8:	f7ff fe8a 	bl	80001f0 <__NVIC_EnableIRQ>

	configure_GPIO(&GPIOB->MODER, NULL, &GPIOB->PUPDR, 5, 0);
 80004dc:	2300      	movs	r3, #0
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	2305      	movs	r3, #5
 80004e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000520 <main+0xec>)
 80004e4:	2100      	movs	r1, #0
 80004e6:	480f      	ldr	r0, [pc, #60]	@ (8000524 <main+0xf0>)
 80004e8:	f000 f839 	bl	800055e <configure_GPIO>
	configure_GPIO(&GPIOB->MODER, NULL, &GPIOB->PUPDR, 3, 0);
 80004ec:	2300      	movs	r3, #0
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2303      	movs	r3, #3
 80004f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000520 <main+0xec>)
 80004f4:	2100      	movs	r1, #0
 80004f6:	480b      	ldr	r0, [pc, #44]	@ (8000524 <main+0xf0>)
 80004f8:	f000 f831 	bl	800055e <configure_GPIO>


	set_interrupt_priority(EXTI3_IRQn, 2);
 80004fc:	2102      	movs	r1, #2
 80004fe:	2009      	movs	r0, #9
 8000500:	f000 f814 	bl	800052c <set_interrupt_priority>
	set_interrupt_priority(EXTI15_10_IRQn, 1);
 8000504:	2101      	movs	r1, #1
 8000506:	2028      	movs	r0, #40	@ 0x28
 8000508:	f000 f810 	bl	800052c <set_interrupt_priority>

	while (1) {

		HAL_Delay(1000000);
 800050c:	4806      	ldr	r0, [pc, #24]	@ (8000528 <main+0xf4>)
 800050e:	f000 f9f7 	bl	8000900 <HAL_Delay>
 8000512:	e7fb      	b.n	800050c <main+0xd8>
 8000514:	40021000 	.word	0x40021000
 8000518:	40010000 	.word	0x40010000
 800051c:	40010400 	.word	0x40010400
 8000520:	4800040c 	.word	0x4800040c
 8000524:	48000400 	.word	0x48000400
 8000528:	000f4240 	.word	0x000f4240

0800052c <set_interrupt_priority>:

	}
}

void set_interrupt_priority(IRQn_Type IRQn, uint32_t priority) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	71fb      	strb	r3, [r7, #7]
	uint32_t priority_group = NVIC_GetPriorityGrouping();
 8000538:	f7ff fe4c 	bl	80001d4 <__NVIC_GetPriorityGrouping>
 800053c:	60f8      	str	r0, [r7, #12]

	uint32_t priority_value = NVIC_EncodePriority(priority_group, priority, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	6839      	ldr	r1, [r7, #0]
 8000542:	68f8      	ldr	r0, [r7, #12]
 8000544:	f7ff fe9c 	bl	8000280 <NVIC_EncodePriority>
 8000548:	60b8      	str	r0, [r7, #8]

	// Set the priority for the given interrupt
	NVIC_SetPriority(IRQn, priority_value);
 800054a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054e:	68b9      	ldr	r1, [r7, #8]
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff fe6b 	bl	800022c <__NVIC_SetPriority>
}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <configure_GPIO>:

void configure_GPIO(volatile uint32_t *GPIO_MODER,
		volatile uint32_t *GPIO_OTYPER, volatile uint32_t *GPIO_PUPDR,
		uint8_t pin, uint8_t mode) {
 800055e:	b480      	push	{r7}
 8000560:	b085      	sub	sp, #20
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	60b9      	str	r1, [r7, #8]
 8000568:	607a      	str	r2, [r7, #4]
 800056a:	70fb      	strb	r3, [r7, #3]
	*GPIO_MODER &= ~(0b10 << (pin * 2));
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	78fa      	ldrb	r2, [r7, #3]
 8000572:	0052      	lsls	r2, r2, #1
 8000574:	2102      	movs	r1, #2
 8000576:	fa01 f202 	lsl.w	r2, r1, r2
 800057a:	43d2      	mvns	r2, r2
 800057c:	401a      	ands	r2, r3
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	601a      	str	r2, [r3, #0]

	*GPIO_MODER |= (mode << (pin * 2));
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	7e39      	ldrb	r1, [r7, #24]
 8000588:	78fa      	ldrb	r2, [r7, #3]
 800058a:	0052      	lsls	r2, r2, #1
 800058c:	fa01 f202 	lsl.w	r2, r1, r2
 8000590:	431a      	orrs	r2, r3
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	601a      	str	r2, [r3, #0]

	if (GPIO_OTYPER == NULL) {
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d115      	bne.n	80005c8 <configure_GPIO+0x6a>
		*GPIO_PUPDR &= ~(0b10 << (pin * 2));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	78fa      	ldrb	r2, [r7, #3]
 80005a2:	0052      	lsls	r2, r2, #1
 80005a4:	2102      	movs	r1, #2
 80005a6:	fa01 f202 	lsl.w	r2, r1, r2
 80005aa:	43d2      	mvns	r2, r2
 80005ac:	401a      	ands	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	601a      	str	r2, [r3, #0]
		*GPIO_PUPDR |= (0b01 << (pin * 2));
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	78fa      	ldrb	r2, [r7, #3]
 80005b8:	0052      	lsls	r2, r2, #1
 80005ba:	2101      	movs	r1, #1
 80005bc:	fa01 f202 	lsl.w	r2, r1, r2
 80005c0:	431a      	orrs	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]
	} else if (GPIO_PUPDR == NULL) {
		*GPIO_OTYPER &= ~(0b10 << pin);
		*GPIO_OTYPER |= (0 << pin);
	}
}
 80005c6:	e010      	b.n	80005ea <configure_GPIO+0x8c>
	} else if (GPIO_PUPDR == NULL) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d10d      	bne.n	80005ea <configure_GPIO+0x8c>
		*GPIO_OTYPER &= ~(0b10 << pin);
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	78fa      	ldrb	r2, [r7, #3]
 80005d4:	2102      	movs	r1, #2
 80005d6:	fa01 f202 	lsl.w	r2, r1, r2
 80005da:	43d2      	mvns	r2, r2
 80005dc:	401a      	ands	r2, r3
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	601a      	str	r2, [r3, #0]
		*GPIO_OTYPER |= (0 << pin);
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	601a      	str	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b0a6      	sub	sp, #152	@ 0x98
 80005fa:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005fc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000600:	2228      	movs	r2, #40	@ 0x28
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f001 fec7 	bl	8002398 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800060a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2258      	movs	r2, #88	@ 0x58
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f001 feb9 	bl	8002398 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000626:	2302      	movs	r3, #2
 8000628:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062a:	2301      	movs	r3, #1
 800062c:	67fb      	str	r3, [r7, #124]	@ 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062e:	2310      	movs	r3, #16
 8000630:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800063e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000642:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000646:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000650:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fa5d 	bl	8000b14 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x6e>
		Error_Handler();
 8000660:	f000 f852 	bl	8000708 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	65fb      	str	r3, [r7, #92]	@ 0x5c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2302      	movs	r3, #2
 800066a:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000674:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	66fb      	str	r3, [r7, #108]	@ 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800067a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800067e:	2102      	movs	r1, #2
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fa9b 	bl	8001bbc <HAL_RCC_ClockConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x9a>
		Error_Handler();
 800068c:	f000 f83c 	bl	8000708 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000690:	2302      	movs	r3, #2
 8000692:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fc5e 	bl	8001f5c <HAL_RCCEx_PeriphCLKConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xb4>
		Error_Handler();
 80006a6:	f000 f82f 	bl	8000708 <Error_Handler>
	}
}
 80006aa:	bf00      	nop
 80006ac:	3798      	adds	r7, #152	@ 0x98
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	@ (8000704 <MX_USART2_UART_Init+0x50>)
 80006bc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006c0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80006c4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ea:	4b05      	ldr	r3, [pc, #20]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f0:	4b03      	ldr	r3, [pc, #12]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	@ 0x24
//  }
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	2000003c 	.word	0x2000003c
 8000704:	40004400 	.word	0x40004400

08000708 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <Error_Handler+0x8>

08000714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <HAL_MspInit+0x44>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	4a0e      	ldr	r2, [pc, #56]	@ (8000758 <HAL_MspInit+0x44>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6193      	str	r3, [r2, #24]
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <HAL_MspInit+0x44>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <HAL_MspInit+0x44>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	4a08      	ldr	r2, [pc, #32]	@ (8000758 <HAL_MspInit+0x44>)
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073c:	61d3      	str	r3, [r2, #28]
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <HAL_MspInit+0x44>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000

0800075c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <NMI_Handler+0x4>

08000764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <MemManage_Handler+0x4>

08000774 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <UsageFault_Handler+0x4>

08000784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b2:	f000 f885 	bl	80008c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <SystemInit+0x20>)
 80007c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007c6:	4a05      	ldr	r2, [pc, #20]	@ (80007dc <SystemInit+0x20>)
 80007c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000818 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007e4:	f7ff ffea 	bl	80007bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e8:	480c      	ldr	r0, [pc, #48]	@ (800081c <LoopForever+0x6>)
  ldr r1, =_edata
 80007ea:	490d      	ldr	r1, [pc, #52]	@ (8000820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000824 <LoopForever+0xe>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000828 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000800:	4c0a      	ldr	r4, [pc, #40]	@ (800082c <LoopForever+0x16>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800080e:	f001 fdcb 	bl	80023a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000812:	f7ff fe0f 	bl	8000434 <main>

08000816 <LoopForever>:

LoopForever:
    b LoopForever
 8000816:	e7fe      	b.n	8000816 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000818:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000820:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000824:	08002440 	.word	0x08002440
  ldr r2, =_sbss
 8000828:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800082c:	200000cc 	.word	0x200000cc

08000830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000830:	e7fe      	b.n	8000830 <ADC1_2_IRQHandler>
	...

08000834 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000838:	4b08      	ldr	r3, [pc, #32]	@ (800085c <HAL_Init+0x28>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a07      	ldr	r2, [pc, #28]	@ (800085c <HAL_Init+0x28>)
 800083e:	f043 0310 	orr.w	r3, r3, #16
 8000842:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000844:	2003      	movs	r0, #3
 8000846:	f000 f931 	bl	8000aac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800084a:	200f      	movs	r0, #15
 800084c:	f000 f808 	bl	8000860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000850:	f7ff ff60 	bl	8000714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40022000 	.word	0x40022000

08000860 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <HAL_InitTick+0x54>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <HAL_InitTick+0x58>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4619      	mov	r1, r3
 8000872:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000876:	fbb3 f3f1 	udiv	r3, r3, r1
 800087a:	fbb2 f3f3 	udiv	r3, r2, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f93b 	bl	8000afa <HAL_SYSTICK_Config>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	e00e      	b.n	80008ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b0f      	cmp	r3, #15
 8000892:	d80a      	bhi.n	80008aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000894:	2200      	movs	r2, #0
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	f04f 30ff 	mov.w	r0, #4294967295
 800089c:	f000 f911 	bl	8000ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a0:	4a06      	ldr	r2, [pc, #24]	@ (80008bc <HAL_InitTick+0x5c>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008a6:	2300      	movs	r3, #0
 80008a8:	e000      	b.n	80008ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000000 	.word	0x20000000
 80008b8:	20000008 	.word	0x20000008
 80008bc:	20000004 	.word	0x20000004

080008c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <HAL_IncTick+0x20>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <HAL_IncTick+0x24>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	4a04      	ldr	r2, [pc, #16]	@ (80008e4 <HAL_IncTick+0x24>)
 80008d2:	6013      	str	r3, [r2, #0]
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000008 	.word	0x20000008
 80008e4:	200000c8 	.word	0x200000c8

080008e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80008ec:	4b03      	ldr	r3, [pc, #12]	@ (80008fc <HAL_GetTick+0x14>)
 80008ee:	681b      	ldr	r3, [r3, #0]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	200000c8 	.word	0x200000c8

08000900 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000908:	f7ff ffee 	bl	80008e8 <HAL_GetTick>
 800090c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000918:	d005      	beq.n	8000926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800091a:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <HAL_Delay+0x44>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4413      	add	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000926:	bf00      	nop
 8000928:	f7ff ffde 	bl	80008e8 <HAL_GetTick>
 800092c:	4602      	mov	r2, r0
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	429a      	cmp	r2, r3
 8000936:	d8f7      	bhi.n	8000928 <HAL_Delay+0x28>
  {
  }
}
 8000938:	bf00      	nop
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000008 	.word	0x20000008

08000948 <__NVIC_SetPriorityGrouping>:
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	@ (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_GetPriorityGrouping>:
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	@ (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_SetPriority>:
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	db0a      	blt.n	80009d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	490c      	ldr	r1, [pc, #48]	@ (80009f8 <__NVIC_SetPriority+0x4c>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	0112      	lsls	r2, r2, #4
 80009cc:	b2d2      	uxtb	r2, r2
 80009ce:	440b      	add	r3, r1
 80009d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80009d4:	e00a      	b.n	80009ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4908      	ldr	r1, [pc, #32]	@ (80009fc <__NVIC_SetPriority+0x50>)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	3b04      	subs	r3, #4
 80009e4:	0112      	lsls	r2, r2, #4
 80009e6:	b2d2      	uxtb	r2, r2
 80009e8:	440b      	add	r3, r1
 80009ea:	761a      	strb	r2, [r3, #24]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000e100 	.word	0xe000e100
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <NVIC_EncodePriority>:
{
 8000a00:	b480      	push	{r7}
 8000a02:	b089      	sub	sp, #36	@ 0x24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	f1c3 0307 	rsb	r3, r3, #7
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	bf28      	it	cs
 8000a1e:	2304      	movcs	r3, #4
 8000a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3304      	adds	r3, #4
 8000a26:	2b06      	cmp	r3, #6
 8000a28:	d902      	bls.n	8000a30 <NVIC_EncodePriority+0x30>
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3b03      	subs	r3, #3
 8000a2e:	e000      	b.n	8000a32 <NVIC_EncodePriority+0x32>
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	f04f 32ff 	mov.w	r2, #4294967295
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43da      	mvns	r2, r3
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	401a      	ands	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a48:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43d9      	mvns	r1, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	4313      	orrs	r3, r2
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3724      	adds	r7, #36	@ 0x24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a78:	d301      	bcc.n	8000a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00f      	b.n	8000a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <SysTick_Config+0x40>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a86:	210f      	movs	r1, #15
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f7ff ff8e 	bl	80009ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a90:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <SysTick_Config+0x40>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a96:	4b04      	ldr	r3, [pc, #16]	@ (8000aa8 <SysTick_Config+0x40>)
 8000a98:	2207      	movs	r2, #7
 8000a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	e000e010 	.word	0xe000e010

08000aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff ff47 	bl	8000948 <__NVIC_SetPriorityGrouping>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
 8000ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad4:	f7ff ff5c 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8000ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	6978      	ldr	r0, [r7, #20]
 8000ae0:	f7ff ff8e 	bl	8000a00 <NVIC_EncodePriority>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff5d 	bl	80009ac <__NVIC_SetPriority>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ffb0 	bl	8000a68 <SysTick_Config>
 8000b08:	4603      	mov	r3, r0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b24:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	f001 b83a 	b.w	8001bae <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f000 816f 	beq.w	8000e2e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b50:	4bb5      	ldr	r3, [pc, #724]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f003 030c 	and.w	r3, r3, #12
 8000b58:	2b04      	cmp	r3, #4
 8000b5a:	d00c      	beq.n	8000b76 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b5c:	4bb2      	ldr	r3, [pc, #712]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 030c 	and.w	r3, r3, #12
 8000b64:	2b08      	cmp	r3, #8
 8000b66:	d15c      	bne.n	8000c22 <HAL_RCC_OscConfig+0x10e>
 8000b68:	4baf      	ldr	r3, [pc, #700]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b74:	d155      	bne.n	8000c22 <HAL_RCC_OscConfig+0x10e>
 8000b76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000b7a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000b82:	fa93 f3a3 	rbit	r3, r3
 8000b86:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b8e:	fab3 f383 	clz	r3, r3
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	095b      	lsrs	r3, r3, #5
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d102      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x94>
 8000ba2:	4ba1      	ldr	r3, [pc, #644]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	e015      	b.n	8000bd4 <HAL_RCC_OscConfig+0xc0>
 8000ba8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bac:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000bb4:	fa93 f3a3 	rbit	r3, r3
 8000bb8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000bbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bc0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000bc4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000bc8:	fa93 f3a3 	rbit	r3, r3
 8000bcc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000bd0:	4b95      	ldr	r3, [pc, #596]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bd4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000bd8:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000bdc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000be0:	fa92 f2a2 	rbit	r2, r2
 8000be4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000be8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	f042 0220 	orr.w	r2, r2, #32
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	f002 021f 	and.w	r2, r2, #31
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000c02:	4013      	ands	r3, r2
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f000 8111 	beq.w	8000e2c <HAL_RCC_OscConfig+0x318>
 8000c0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8108 	bne.w	8000e2c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	f000 bfc6 	b.w	8001bae <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c32:	d106      	bne.n	8000c42 <HAL_RCC_OscConfig+0x12e>
 8000c34:	4b7c      	ldr	r3, [pc, #496]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a7b      	ldr	r2, [pc, #492]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	e036      	b.n	8000cb0 <HAL_RCC_OscConfig+0x19c>
 8000c42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c46:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d10c      	bne.n	8000c6c <HAL_RCC_OscConfig+0x158>
 8000c52:	4b75      	ldr	r3, [pc, #468]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a74      	ldr	r2, [pc, #464]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000c58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	4b72      	ldr	r3, [pc, #456]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a71      	ldr	r2, [pc, #452]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000c64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	e021      	b.n	8000cb0 <HAL_RCC_OscConfig+0x19c>
 8000c6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c7c:	d10c      	bne.n	8000c98 <HAL_RCC_OscConfig+0x184>
 8000c7e:	4b6a      	ldr	r3, [pc, #424]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a69      	ldr	r2, [pc, #420]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	4b67      	ldr	r3, [pc, #412]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a66      	ldr	r2, [pc, #408]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	e00b      	b.n	8000cb0 <HAL_RCC_OscConfig+0x19c>
 8000c98:	4b63      	ldr	r3, [pc, #396]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a62      	ldr	r2, [pc, #392]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	4b60      	ldr	r3, [pc, #384]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a5f      	ldr	r2, [pc, #380]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cae:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cb4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d059      	beq.n	8000d74 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc0:	f7ff fe12 	bl	80008e8 <HAL_GetTick>
 8000cc4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc8:	e00a      	b.n	8000ce0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cca:	f7ff fe0d 	bl	80008e8 <HAL_GetTick>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b64      	cmp	r3, #100	@ 0x64
 8000cd8:	d902      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	f000 bf67 	b.w	8001bae <HAL_RCC_OscConfig+0x109a>
 8000ce0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ce4:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000cec:	fa93 f3a3 	rbit	r3, r3
 8000cf0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000cf4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf8:	fab3 f383 	clz	r3, r3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d102      	bne.n	8000d12 <HAL_RCC_OscConfig+0x1fe>
 8000d0c:	4b46      	ldr	r3, [pc, #280]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	e015      	b.n	8000d3e <HAL_RCC_OscConfig+0x22a>
 8000d12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d16:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000d1e:	fa93 f3a3 	rbit	r3, r3
 8000d22:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000d26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d2a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000d2e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000d32:	fa93 f3a3 	rbit	r3, r3
 8000d36:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d42:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000d46:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000d4a:	fa92 f2a2 	rbit	r2, r2
 8000d4e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000d52:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	f042 0220 	orr.w	r2, r2, #32
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	f002 021f 	and.w	r2, r2, #31
 8000d66:	2101      	movs	r1, #1
 8000d68:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0ab      	beq.n	8000cca <HAL_RCC_OscConfig+0x1b6>
 8000d72:	e05c      	b.n	8000e2e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d74:	f7ff fdb8 	bl	80008e8 <HAL_GetTick>
 8000d78:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7c:	e00a      	b.n	8000d94 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d7e:	f7ff fdb3 	bl	80008e8 <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b64      	cmp	r3, #100	@ 0x64
 8000d8c:	d902      	bls.n	8000d94 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	f000 bf0d 	b.w	8001bae <HAL_RCC_OscConfig+0x109a>
 8000d94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d98:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000da0:	fa93 f3a3 	rbit	r3, r3
 8000da4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000da8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dac:	fab3 f383 	clz	r3, r3
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d102      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x2b2>
 8000dc0:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	e015      	b.n	8000df2 <HAL_RCC_OscConfig+0x2de>
 8000dc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dca:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000dd2:	fa93 f3a3 	rbit	r3, r3
 8000dd6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000dda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dde:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000de2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000de6:	fa93 f3a3 	rbit	r3, r3
 8000dea:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <HAL_RCC_OscConfig+0x314>)
 8000df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000df6:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000dfa:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000dfe:	fa92 f2a2 	rbit	r2, r2
 8000e02:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000e06:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000e0a:	fab2 f282 	clz	r2, r2
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	f042 0220 	orr.w	r2, r2, #32
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	f002 021f 	and.w	r2, r2, #31
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e20:	4013      	ands	r3, r2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1ab      	bne.n	8000d7e <HAL_RCC_OscConfig+0x26a>
 8000e26:	e002      	b.n	8000e2e <HAL_RCC_OscConfig+0x31a>
 8000e28:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 817f 	beq.w	8001142 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e44:	4ba7      	ldr	r3, [pc, #668]	@ (80010e4 <HAL_RCC_OscConfig+0x5d0>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 030c 	and.w	r3, r3, #12
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d00c      	beq.n	8000e6a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e50:	4ba4      	ldr	r3, [pc, #656]	@ (80010e4 <HAL_RCC_OscConfig+0x5d0>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 030c 	and.w	r3, r3, #12
 8000e58:	2b08      	cmp	r3, #8
 8000e5a:	d173      	bne.n	8000f44 <HAL_RCC_OscConfig+0x430>
 8000e5c:	4ba1      	ldr	r3, [pc, #644]	@ (80010e4 <HAL_RCC_OscConfig+0x5d0>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000e64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000e68:	d16c      	bne.n	8000f44 <HAL_RCC_OscConfig+0x430>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e70:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000e74:	fa93 f3a3 	rbit	r3, r3
 8000e78:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8000e7c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e80:	fab3 f383 	clz	r3, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d102      	bne.n	8000e9a <HAL_RCC_OscConfig+0x386>
 8000e94:	4b93      	ldr	r3, [pc, #588]	@ (80010e4 <HAL_RCC_OscConfig+0x5d0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	e013      	b.n	8000ec2 <HAL_RCC_OscConfig+0x3ae>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8000ea4:	fa93 f3a3 	rbit	r3, r3
 8000ea8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8000eac:	2302      	movs	r3, #2
 8000eae:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000eb2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8000eb6:	fa93 f3a3 	rbit	r3, r3
 8000eba:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000ebe:	4b89      	ldr	r3, [pc, #548]	@ (80010e4 <HAL_RCC_OscConfig+0x5d0>)
 8000ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8000ec8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000ecc:	fa92 f2a2 	rbit	r2, r2
 8000ed0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8000ed4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000ed8:	fab2 f282 	clz	r2, r2
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	f042 0220 	orr.w	r2, r2, #32
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	f002 021f 	and.w	r2, r2, #31
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fa01 f202 	lsl.w	r2, r1, r2
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00a      	beq.n	8000f0a <HAL_RCC_OscConfig+0x3f6>
 8000ef4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ef8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d002      	beq.n	8000f0a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	f000 be52 	b.w	8001bae <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0a:	4b76      	ldr	r3, [pc, #472]	@ (80010e4 <HAL_RCC_OscConfig+0x5d0>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f16:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	21f8      	movs	r1, #248	@ 0xf8
 8000f20:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f24:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8000f28:	fa91 f1a1 	rbit	r1, r1
 8000f2c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8000f30:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000f34:	fab1 f181 	clz	r1, r1
 8000f38:	b2c9      	uxtb	r1, r1
 8000f3a:	408b      	lsls	r3, r1
 8000f3c:	4969      	ldr	r1, [pc, #420]	@ (80010e4 <HAL_RCC_OscConfig+0x5d0>)
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f42:	e0fe      	b.n	8001142 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 8088 	beq.w	8001066 <HAL_RCC_OscConfig+0x552>
 8000f56:	2301      	movs	r3, #1
 8000f58:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8000f60:	fa93 f3a3 	rbit	r3, r3
 8000f64:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8000f68:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f6c:	fab3 f383 	clz	r3, r3
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000f76:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2301      	movs	r3, #1
 8000f80:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f82:	f7ff fcb1 	bl	80008e8 <HAL_GetTick>
 8000f86:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8a:	e00a      	b.n	8000fa2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f8c:	f7ff fcac 	bl	80008e8 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d902      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	f000 be06 	b.w	8001bae <HAL_RCC_OscConfig+0x109a>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000fac:	fa93 f3a3 	rbit	r3, r3
 8000fb0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8000fb4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb8:	fab3 f383 	clz	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d102      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x4be>
 8000fcc:	4b45      	ldr	r3, [pc, #276]	@ (80010e4 <HAL_RCC_OscConfig+0x5d0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	e013      	b.n	8000ffa <HAL_RCC_OscConfig+0x4e6>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000fdc:	fa93 f3a3 	rbit	r3, r3
 8000fe0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000fea:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000fee:	fa93 f3a3 	rbit	r3, r3
 8000ff2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80010e4 <HAL_RCC_OscConfig+0x5d0>)
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001000:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001004:	fa92 f2a2 	rbit	r2, r2
 8001008:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800100c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001010:	fab2 f282 	clz	r2, r2
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	f042 0220 	orr.w	r2, r2, #32
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	f002 021f 	and.w	r2, r2, #31
 8001020:	2101      	movs	r1, #1
 8001022:	fa01 f202 	lsl.w	r2, r1, r2
 8001026:	4013      	ands	r3, r2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0af      	beq.n	8000f8c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102c:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <HAL_RCC_OscConfig+0x5d0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001034:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001038:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	21f8      	movs	r1, #248	@ 0xf8
 8001042:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001046:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800104a:	fa91 f1a1 	rbit	r1, r1
 800104e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001052:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001056:	fab1 f181 	clz	r1, r1
 800105a:	b2c9      	uxtb	r1, r1
 800105c:	408b      	lsls	r3, r1
 800105e:	4921      	ldr	r1, [pc, #132]	@ (80010e4 <HAL_RCC_OscConfig+0x5d0>)
 8001060:	4313      	orrs	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
 8001064:	e06d      	b.n	8001142 <HAL_RCC_OscConfig+0x62e>
 8001066:	2301      	movs	r3, #1
 8001068:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001070:	fa93 f3a3 	rbit	r3, r3
 8001074:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001078:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800107c:	fab3 f383 	clz	r3, r3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001086:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	461a      	mov	r2, r3
 800108e:	2300      	movs	r3, #0
 8001090:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fc29 	bl	80008e8 <HAL_GetTick>
 8001096:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109a:	e00a      	b.n	80010b2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800109c:	f7ff fc24 	bl	80008e8 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d902      	bls.n	80010b2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	f000 bd7e 	b.w	8001bae <HAL_RCC_OscConfig+0x109a>
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80010bc:	fa93 f3a3 	rbit	r3, r3
 80010c0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80010c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c8:	fab3 f383 	clz	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d105      	bne.n	80010e8 <HAL_RCC_OscConfig+0x5d4>
 80010dc:	4b01      	ldr	r3, [pc, #4]	@ (80010e4 <HAL_RCC_OscConfig+0x5d0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	e016      	b.n	8001110 <HAL_RCC_OscConfig+0x5fc>
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	2302      	movs	r3, #2
 80010ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80010fa:	2302      	movs	r3, #2
 80010fc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001100:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001104:	fa93 f3a3 	rbit	r3, r3
 8001108:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800110c:	4bbf      	ldr	r3, [pc, #764]	@ (800140c <HAL_RCC_OscConfig+0x8f8>)
 800110e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001110:	2202      	movs	r2, #2
 8001112:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001116:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800111a:	fa92 f2a2 	rbit	r2, r2
 800111e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001122:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001126:	fab2 f282 	clz	r2, r2
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	f042 0220 	orr.w	r2, r2, #32
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	f002 021f 	and.w	r2, r2, #31
 8001136:	2101      	movs	r1, #1
 8001138:	fa01 f202 	lsl.w	r2, r1, r2
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1ac      	bne.n	800109c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001142:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001146:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8113 	beq.w	800137e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001158:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800115c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d07c      	beq.n	8001262 <HAL_RCC_OscConfig+0x74e>
 8001168:	2301      	movs	r3, #1
 800116a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001172:	fa93 f3a3 	rbit	r3, r3
 8001176:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800117a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800117e:	fab3 f383 	clz	r3, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461a      	mov	r2, r3
 8001186:	4ba2      	ldr	r3, [pc, #648]	@ (8001410 <HAL_RCC_OscConfig+0x8fc>)
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	461a      	mov	r2, r3
 800118e:	2301      	movs	r3, #1
 8001190:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001192:	f7ff fba9 	bl	80008e8 <HAL_GetTick>
 8001196:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119a:	e00a      	b.n	80011b2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800119c:	f7ff fba4 	bl	80008e8 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d902      	bls.n	80011b2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	f000 bcfe 	b.w	8001bae <HAL_RCC_OscConfig+0x109a>
 80011b2:	2302      	movs	r3, #2
 80011b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80011bc:	fa93 f2a3 	rbit	r2, r3
 80011c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011d2:	2202      	movs	r2, #2
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	fa93 f2a3 	rbit	r2, r3
 80011e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011f6:	2202      	movs	r2, #2
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	fa93 f2a3 	rbit	r2, r3
 8001208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800120c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001210:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001212:	4b7e      	ldr	r3, [pc, #504]	@ (800140c <HAL_RCC_OscConfig+0x8f8>)
 8001214:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800121a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800121e:	2102      	movs	r1, #2
 8001220:	6019      	str	r1, [r3, #0]
 8001222:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001226:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	fa93 f1a3 	rbit	r1, r3
 8001230:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001234:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001238:	6019      	str	r1, [r3, #0]
  return result;
 800123a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800123e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	fab3 f383 	clz	r3, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800124e:	b2db      	uxtb	r3, r3
 8001250:	f003 031f 	and.w	r3, r3, #31
 8001254:	2101      	movs	r1, #1
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	4013      	ands	r3, r2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d09d      	beq.n	800119c <HAL_RCC_OscConfig+0x688>
 8001260:	e08d      	b.n	800137e <HAL_RCC_OscConfig+0x86a>
 8001262:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001266:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800126a:	2201      	movs	r2, #1
 800126c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001272:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	fa93 f2a3 	rbit	r2, r3
 800127c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001280:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001284:	601a      	str	r2, [r3, #0]
  return result;
 8001286:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800128a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800128e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001290:	fab3 f383 	clz	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	461a      	mov	r2, r3
 8001298:	4b5d      	ldr	r3, [pc, #372]	@ (8001410 <HAL_RCC_OscConfig+0x8fc>)
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	461a      	mov	r2, r3
 80012a0:	2300      	movs	r3, #0
 80012a2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a4:	f7ff fb20 	bl	80008e8 <HAL_GetTick>
 80012a8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ac:	e00a      	b.n	80012c4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ae:	f7ff fb1b 	bl	80008e8 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d902      	bls.n	80012c4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	f000 bc75 	b.w	8001bae <HAL_RCC_OscConfig+0x109a>
 80012c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012cc:	2202      	movs	r2, #2
 80012ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	fa93 f2a3 	rbit	r2, r3
 80012de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012f0:	2202      	movs	r2, #2
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	fa93 f2a3 	rbit	r2, r3
 8001302:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001306:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001310:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001314:	2202      	movs	r2, #2
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800131c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	fa93 f2a3 	rbit	r2, r3
 8001326:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800132a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800132e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001330:	4b36      	ldr	r3, [pc, #216]	@ (800140c <HAL_RCC_OscConfig+0x8f8>)
 8001332:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001334:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001338:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800133c:	2102      	movs	r1, #2
 800133e:	6019      	str	r1, [r3, #0]
 8001340:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001344:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	fa93 f1a3 	rbit	r1, r3
 800134e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001352:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001356:	6019      	str	r1, [r3, #0]
  return result;
 8001358:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800135c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	fab3 f383 	clz	r3, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f003 031f 	and.w	r3, r3, #31
 8001372:	2101      	movs	r1, #1
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d197      	bne.n	80012ae <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800137e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001382:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 81a5 	beq.w	80016de <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800139a:	4b1c      	ldr	r3, [pc, #112]	@ (800140c <HAL_RCC_OscConfig+0x8f8>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d116      	bne.n	80013d4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	4b19      	ldr	r3, [pc, #100]	@ (800140c <HAL_RCC_OscConfig+0x8f8>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	4a18      	ldr	r2, [pc, #96]	@ (800140c <HAL_RCC_OscConfig+0x8f8>)
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b0:	61d3      	str	r3, [r2, #28]
 80013b2:	4b16      	ldr	r3, [pc, #88]	@ (800140c <HAL_RCC_OscConfig+0x8f8>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80013ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013cc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80013ce:	2301      	movs	r3, #1
 80013d0:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <HAL_RCC_OscConfig+0x900>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d121      	bne.n	8001424 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <HAL_RCC_OscConfig+0x900>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001414 <HAL_RCC_OscConfig+0x900>)
 80013e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ec:	f7ff fa7c 	bl	80008e8 <HAL_GetTick>
 80013f0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f4:	e010      	b.n	8001418 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f6:	f7ff fa77 	bl	80008e8 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	@ 0x64
 8001404:	d908      	bls.n	8001418 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e3d1      	b.n	8001bae <HAL_RCC_OscConfig+0x109a>
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	10908120 	.word	0x10908120
 8001414:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	4b8d      	ldr	r3, [pc, #564]	@ (8001650 <HAL_RCC_OscConfig+0xb3c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0e8      	beq.n	80013f6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001424:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001428:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d106      	bne.n	8001442 <HAL_RCC_OscConfig+0x92e>
 8001434:	4b87      	ldr	r3, [pc, #540]	@ (8001654 <HAL_RCC_OscConfig+0xb40>)
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	4a86      	ldr	r2, [pc, #536]	@ (8001654 <HAL_RCC_OscConfig+0xb40>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6213      	str	r3, [r2, #32]
 8001440:	e035      	b.n	80014ae <HAL_RCC_OscConfig+0x99a>
 8001442:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001446:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10c      	bne.n	800146c <HAL_RCC_OscConfig+0x958>
 8001452:	4b80      	ldr	r3, [pc, #512]	@ (8001654 <HAL_RCC_OscConfig+0xb40>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	4a7f      	ldr	r2, [pc, #508]	@ (8001654 <HAL_RCC_OscConfig+0xb40>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	6213      	str	r3, [r2, #32]
 800145e:	4b7d      	ldr	r3, [pc, #500]	@ (8001654 <HAL_RCC_OscConfig+0xb40>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4a7c      	ldr	r2, [pc, #496]	@ (8001654 <HAL_RCC_OscConfig+0xb40>)
 8001464:	f023 0304 	bic.w	r3, r3, #4
 8001468:	6213      	str	r3, [r2, #32]
 800146a:	e020      	b.n	80014ae <HAL_RCC_OscConfig+0x99a>
 800146c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001470:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b05      	cmp	r3, #5
 800147a:	d10c      	bne.n	8001496 <HAL_RCC_OscConfig+0x982>
 800147c:	4b75      	ldr	r3, [pc, #468]	@ (8001654 <HAL_RCC_OscConfig+0xb40>)
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	4a74      	ldr	r2, [pc, #464]	@ (8001654 <HAL_RCC_OscConfig+0xb40>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	6213      	str	r3, [r2, #32]
 8001488:	4b72      	ldr	r3, [pc, #456]	@ (8001654 <HAL_RCC_OscConfig+0xb40>)
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	4a71      	ldr	r2, [pc, #452]	@ (8001654 <HAL_RCC_OscConfig+0xb40>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6213      	str	r3, [r2, #32]
 8001494:	e00b      	b.n	80014ae <HAL_RCC_OscConfig+0x99a>
 8001496:	4b6f      	ldr	r3, [pc, #444]	@ (8001654 <HAL_RCC_OscConfig+0xb40>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4a6e      	ldr	r2, [pc, #440]	@ (8001654 <HAL_RCC_OscConfig+0xb40>)
 800149c:	f023 0301 	bic.w	r3, r3, #1
 80014a0:	6213      	str	r3, [r2, #32]
 80014a2:	4b6c      	ldr	r3, [pc, #432]	@ (8001654 <HAL_RCC_OscConfig+0xb40>)
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	4a6b      	ldr	r2, [pc, #428]	@ (8001654 <HAL_RCC_OscConfig+0xb40>)
 80014a8:	f023 0304 	bic.w	r3, r3, #4
 80014ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8081 	beq.w	80015c2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c0:	f7ff fa12 	bl	80008e8 <HAL_GetTick>
 80014c4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c8:	e00b      	b.n	80014e2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ca:	f7ff fa0d 	bl	80008e8 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e365      	b.n	8001bae <HAL_RCC_OscConfig+0x109a>
 80014e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014e6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80014ea:	2202      	movs	r2, #2
 80014ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014f2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	fa93 f2a3 	rbit	r2, r3
 80014fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001500:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800150a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800150e:	2202      	movs	r2, #2
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001516:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f2a3 	rbit	r2, r3
 8001520:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001524:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001528:	601a      	str	r2, [r3, #0]
  return result;
 800152a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800152e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001532:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001534:	fab3 f383 	clz	r3, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f043 0302 	orr.w	r3, r3, #2
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d102      	bne.n	800154e <HAL_RCC_OscConfig+0xa3a>
 8001548:	4b42      	ldr	r3, [pc, #264]	@ (8001654 <HAL_RCC_OscConfig+0xb40>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	e013      	b.n	8001576 <HAL_RCC_OscConfig+0xa62>
 800154e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001552:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001556:	2202      	movs	r2, #2
 8001558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800155e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	fa93 f2a3 	rbit	r2, r3
 8001568:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800156c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	4b38      	ldr	r3, [pc, #224]	@ (8001654 <HAL_RCC_OscConfig+0xb40>)
 8001574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001576:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800157a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800157e:	2102      	movs	r1, #2
 8001580:	6011      	str	r1, [r2, #0]
 8001582:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001586:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	fa92 f1a2 	rbit	r1, r2
 8001590:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001594:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001598:	6011      	str	r1, [r2, #0]
  return result;
 800159a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800159e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	fab2 f282 	clz	r2, r2
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	f002 021f 	and.w	r2, r2, #31
 80015b4:	2101      	movs	r1, #1
 80015b6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d084      	beq.n	80014ca <HAL_RCC_OscConfig+0x9b6>
 80015c0:	e083      	b.n	80016ca <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c2:	f7ff f991 	bl	80008e8 <HAL_GetTick>
 80015c6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ca:	e00b      	b.n	80015e4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015cc:	f7ff f98c 	bl	80008e8 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015dc:	4293      	cmp	r3, r2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e2e4      	b.n	8001bae <HAL_RCC_OscConfig+0x109a>
 80015e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80015ec:	2202      	movs	r2, #2
 80015ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015f4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	fa93 f2a3 	rbit	r2, r3
 80015fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001602:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800160c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001610:	2202      	movs	r2, #2
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001618:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	fa93 f2a3 	rbit	r2, r3
 8001622:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001626:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800162a:	601a      	str	r2, [r3, #0]
  return result;
 800162c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001630:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001634:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001636:	fab3 f383 	clz	r3, r3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	095b      	lsrs	r3, r3, #5
 800163e:	b2db      	uxtb	r3, r3
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d106      	bne.n	8001658 <HAL_RCC_OscConfig+0xb44>
 800164a:	4b02      	ldr	r3, [pc, #8]	@ (8001654 <HAL_RCC_OscConfig+0xb40>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	e017      	b.n	8001680 <HAL_RCC_OscConfig+0xb6c>
 8001650:	40007000 	.word	0x40007000
 8001654:	40021000 	.word	0x40021000
 8001658:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800165c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001660:	2202      	movs	r2, #2
 8001662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001664:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001668:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	fa93 f2a3 	rbit	r2, r3
 8001672:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001676:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	4bb3      	ldr	r3, [pc, #716]	@ (800194c <HAL_RCC_OscConfig+0xe38>)
 800167e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001680:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001684:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001688:	2102      	movs	r1, #2
 800168a:	6011      	str	r1, [r2, #0]
 800168c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001690:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	fa92 f1a2 	rbit	r1, r2
 800169a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800169e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80016a2:	6011      	str	r1, [r2, #0]
  return result;
 80016a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016a8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	fab2 f282 	clz	r2, r2
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	f002 021f 	and.w	r2, r2, #31
 80016be:	2101      	movs	r1, #1
 80016c0:	fa01 f202 	lsl.w	r2, r1, r2
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d180      	bne.n	80015cc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016ca:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d105      	bne.n	80016de <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d2:	4b9e      	ldr	r3, [pc, #632]	@ (800194c <HAL_RCC_OscConfig+0xe38>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a9d      	ldr	r2, [pc, #628]	@ (800194c <HAL_RCC_OscConfig+0xe38>)
 80016d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016dc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 825e 	beq.w	8001bac <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f0:	4b96      	ldr	r3, [pc, #600]	@ (800194c <HAL_RCC_OscConfig+0xe38>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	f000 821f 	beq.w	8001b3c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001702:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	2b02      	cmp	r3, #2
 800170c:	f040 8170 	bne.w	80019f0 <HAL_RCC_OscConfig+0xedc>
 8001710:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001714:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001718:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800171c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001722:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	fa93 f2a3 	rbit	r2, r3
 800172c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001730:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001734:	601a      	str	r2, [r3, #0]
  return result;
 8001736:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800173a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800173e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001740:	fab3 f383 	clz	r3, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800174a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	461a      	mov	r2, r3
 8001752:	2300      	movs	r3, #0
 8001754:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff f8c7 	bl	80008e8 <HAL_GetTick>
 800175a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175e:	e009      	b.n	8001774 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001760:	f7ff f8c2 	bl	80008e8 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e21c      	b.n	8001bae <HAL_RCC_OscConfig+0x109a>
 8001774:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001778:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800177c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001786:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	fa93 f2a3 	rbit	r2, r3
 8001790:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001794:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001798:	601a      	str	r2, [r3, #0]
  return result;
 800179a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800179e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80017a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a4:	fab3 f383 	clz	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	095b      	lsrs	r3, r3, #5
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d102      	bne.n	80017be <HAL_RCC_OscConfig+0xcaa>
 80017b8:	4b64      	ldr	r3, [pc, #400]	@ (800194c <HAL_RCC_OscConfig+0xe38>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	e027      	b.n	800180e <HAL_RCC_OscConfig+0xcfa>
 80017be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017c2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80017c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	fa93 f2a3 	rbit	r2, r3
 80017da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017de:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80017ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	fa93 f2a3 	rbit	r2, r3
 8001800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001804:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	4b50      	ldr	r3, [pc, #320]	@ (800194c <HAL_RCC_OscConfig+0xe38>)
 800180c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001812:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001816:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800181a:	6011      	str	r1, [r2, #0]
 800181c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001820:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	fa92 f1a2 	rbit	r1, r2
 800182a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800182e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001832:	6011      	str	r1, [r2, #0]
  return result;
 8001834:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001838:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	fab2 f282 	clz	r2, r2
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	f042 0220 	orr.w	r2, r2, #32
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	f002 021f 	and.w	r2, r2, #31
 800184e:	2101      	movs	r1, #1
 8001850:	fa01 f202 	lsl.w	r2, r1, r2
 8001854:	4013      	ands	r3, r2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d182      	bne.n	8001760 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800185a:	4b3c      	ldr	r3, [pc, #240]	@ (800194c <HAL_RCC_OscConfig+0xe38>)
 800185c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185e:	f023 020f 	bic.w	r2, r3, #15
 8001862:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001866:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186e:	4937      	ldr	r1, [pc, #220]	@ (800194c <HAL_RCC_OscConfig+0xe38>)
 8001870:	4313      	orrs	r3, r2
 8001872:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001874:	4b35      	ldr	r3, [pc, #212]	@ (800194c <HAL_RCC_OscConfig+0xe38>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800187c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001880:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a19      	ldr	r1, [r3, #32]
 8001888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800188c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	430b      	orrs	r3, r1
 8001896:	492d      	ldr	r1, [pc, #180]	@ (800194c <HAL_RCC_OscConfig+0xe38>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
 800189c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80018a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ae:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	fa93 f2a3 	rbit	r2, r3
 80018b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018bc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80018c0:	601a      	str	r2, [r3, #0]
  return result;
 80018c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80018ca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018cc:	fab3 f383 	clz	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018d6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	461a      	mov	r2, r3
 80018de:	2301      	movs	r3, #1
 80018e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff f801 	bl	80008e8 <HAL_GetTick>
 80018e6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ea:	e009      	b.n	8001900 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ec:	f7fe fffc 	bl	80008e8 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e156      	b.n	8001bae <HAL_RCC_OscConfig+0x109a>
 8001900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001904:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001908:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800190c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001912:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	fa93 f2a3 	rbit	r2, r3
 800191c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001920:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001924:	601a      	str	r2, [r3, #0]
  return result;
 8001926:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800192a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800192e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001930:	fab3 f383 	clz	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <HAL_RCC_OscConfig+0xe3c>
 8001944:	4b01      	ldr	r3, [pc, #4]	@ (800194c <HAL_RCC_OscConfig+0xe38>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	e02a      	b.n	80019a0 <HAL_RCC_OscConfig+0xe8c>
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001954:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001958:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800195c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001962:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	fa93 f2a3 	rbit	r2, r3
 800196c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001970:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800197a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800197e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001988:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	fa93 f2a3 	rbit	r2, r3
 8001992:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001996:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	4b86      	ldr	r3, [pc, #536]	@ (8001bb8 <HAL_RCC_OscConfig+0x10a4>)
 800199e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019a4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80019a8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80019ac:	6011      	str	r1, [r2, #0]
 80019ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019b2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	fa92 f1a2 	rbit	r1, r2
 80019bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019c0:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80019c4:	6011      	str	r1, [r2, #0]
  return result;
 80019c6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019ca:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	fab2 f282 	clz	r2, r2
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	f042 0220 	orr.w	r2, r2, #32
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	f002 021f 	and.w	r2, r2, #31
 80019e0:	2101      	movs	r1, #1
 80019e2:	fa01 f202 	lsl.w	r2, r1, r2
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f43f af7f 	beq.w	80018ec <HAL_RCC_OscConfig+0xdd8>
 80019ee:	e0dd      	b.n	8001bac <HAL_RCC_OscConfig+0x1098>
 80019f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80019f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a02:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	fa93 f2a3 	rbit	r2, r3
 8001a0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a10:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001a14:	601a      	str	r2, [r3, #0]
  return result;
 8001a16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a1a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001a1e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a20:	fab3 f383 	clz	r3, r3
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a2a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	461a      	mov	r2, r3
 8001a32:	2300      	movs	r3, #0
 8001a34:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7fe ff57 	bl	80008e8 <HAL_GetTick>
 8001a3a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3e:	e009      	b.n	8001a54 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a40:	f7fe ff52 	bl	80008e8 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e0ac      	b.n	8001bae <HAL_RCC_OscConfig+0x109a>
 8001a54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a58:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001a5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a66:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	fa93 f2a3 	rbit	r2, r3
 8001a70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a74:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001a78:	601a      	str	r2, [r3, #0]
  return result;
 8001a7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a7e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001a82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d102      	bne.n	8001a9e <HAL_RCC_OscConfig+0xf8a>
 8001a98:	4b47      	ldr	r3, [pc, #284]	@ (8001bb8 <HAL_RCC_OscConfig+0x10a4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	e027      	b.n	8001aee <HAL_RCC_OscConfig+0xfda>
 8001a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001aa6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	fa93 f2a3 	rbit	r2, r3
 8001aba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001abe:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001acc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	fa93 f2a3 	rbit	r2, r3
 8001ae0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae4:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	4b33      	ldr	r3, [pc, #204]	@ (8001bb8 <HAL_RCC_OscConfig+0x10a4>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001af2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001af6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001afa:	6011      	str	r1, [r2, #0]
 8001afc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b00:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	fa92 f1a2 	rbit	r1, r2
 8001b0a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b0e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001b12:	6011      	str	r1, [r2, #0]
  return result;
 8001b14:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b18:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	fab2 f282 	clz	r2, r2
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	f042 0220 	orr.w	r2, r2, #32
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	f002 021f 	and.w	r2, r2, #31
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f202 	lsl.w	r2, r1, r2
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d182      	bne.n	8001a40 <HAL_RCC_OscConfig+0xf2c>
 8001b3a:	e037      	b.n	8001bac <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e02e      	b.n	8001bae <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b50:	4b19      	ldr	r3, [pc, #100]	@ (8001bb8 <HAL_RCC_OscConfig+0x10a4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b58:	4b17      	ldr	r3, [pc, #92]	@ (8001bb8 <HAL_RCC_OscConfig+0x10a4>)
 8001b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001b64:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d117      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001b7c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d10b      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b94:	f003 020f 	and.w	r2, r3, #15
 8001b98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000

08001bbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b09e      	sub	sp, #120	@ 0x78
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e162      	b.n	8001e9a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b90      	ldr	r3, [pc, #576]	@ (8001e18 <HAL_RCC_ClockConfig+0x25c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d910      	bls.n	8001c04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b8d      	ldr	r3, [pc, #564]	@ (8001e18 <HAL_RCC_ClockConfig+0x25c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 0207 	bic.w	r2, r3, #7
 8001bea:	498b      	ldr	r1, [pc, #556]	@ (8001e18 <HAL_RCC_ClockConfig+0x25c>)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b89      	ldr	r3, [pc, #548]	@ (8001e18 <HAL_RCC_ClockConfig+0x25c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e14a      	b.n	8001e9a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c10:	4b82      	ldr	r3, [pc, #520]	@ (8001e1c <HAL_RCC_ClockConfig+0x260>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	497f      	ldr	r1, [pc, #508]	@ (8001e1c <HAL_RCC_ClockConfig+0x260>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 80dc 	beq.w	8001de8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d13c      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xf6>
 8001c38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c3c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d102      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xa6>
 8001c5c:	4b6f      	ldr	r3, [pc, #444]	@ (8001e1c <HAL_RCC_ClockConfig+0x260>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	e00f      	b.n	8001c82 <HAL_RCC_ClockConfig+0xc6>
 8001c62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c66:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c74:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c78:	fa93 f3a3 	rbit	r3, r3
 8001c7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c7e:	4b67      	ldr	r3, [pc, #412]	@ (8001e1c <HAL_RCC_ClockConfig+0x260>)
 8001c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c86:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001c88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001c8a:	fa92 f2a2 	rbit	r2, r2
 8001c8e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001c90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001c92:	fab2 f282 	clz	r2, r2
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	f042 0220 	orr.w	r2, r2, #32
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	f002 021f 	and.w	r2, r2, #31
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d17b      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e0f3      	b.n	8001e9a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d13c      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x178>
 8001cba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cbe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	095b      	lsrs	r3, r3, #5
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d102      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x128>
 8001cde:	4b4f      	ldr	r3, [pc, #316]	@ (8001e1c <HAL_RCC_ClockConfig+0x260>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	e00f      	b.n	8001d04 <HAL_RCC_ClockConfig+0x148>
 8001ce4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cf6:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d00:	4b46      	ldr	r3, [pc, #280]	@ (8001e1c <HAL_RCC_ClockConfig+0x260>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d08:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001d0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d0c:	fa92 f2a2 	rbit	r2, r2
 8001d10:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001d12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d14:	fab2 f282 	clz	r2, r2
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	f042 0220 	orr.w	r2, r2, #32
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	f002 021f 	and.w	r2, r2, #31
 8001d24:	2101      	movs	r1, #1
 8001d26:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d13a      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0b2      	b.n	8001e9a <HAL_RCC_ClockConfig+0x2de>
 8001d34:	2302      	movs	r3, #2
 8001d36:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	095b      	lsrs	r3, r3, #5
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d102      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x1a0>
 8001d56:	4b31      	ldr	r3, [pc, #196]	@ (8001e1c <HAL_RCC_ClockConfig+0x260>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	e00d      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1bc>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d68:	2302      	movs	r3, #2
 8001d6a:	623b      	str	r3, [r7, #32]
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	4b29      	ldr	r3, [pc, #164]	@ (8001e1c <HAL_RCC_ClockConfig+0x260>)
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	2202      	movs	r2, #2
 8001d7a:	61ba      	str	r2, [r7, #24]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	fa92 f2a2 	rbit	r2, r2
 8001d82:	617a      	str	r2, [r7, #20]
  return result;
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	fab2 f282 	clz	r2, r2
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	f042 0220 	orr.w	r2, r2, #32
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	f002 021f 	and.w	r2, r2, #31
 8001d96:	2101      	movs	r1, #1
 8001d98:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e079      	b.n	8001e9a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <HAL_RCC_ClockConfig+0x260>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f023 0203 	bic.w	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	491a      	ldr	r1, [pc, #104]	@ (8001e1c <HAL_RCC_ClockConfig+0x260>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db8:	f7fe fd96 	bl	80008e8 <HAL_GetTick>
 8001dbc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc0:	f7fe fd92 	bl	80008e8 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e061      	b.n	8001e9a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <HAL_RCC_ClockConfig+0x260>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 020c 	and.w	r2, r3, #12
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d1eb      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001de8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <HAL_RCC_ClockConfig+0x25c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d214      	bcs.n	8001e20 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b08      	ldr	r3, [pc, #32]	@ (8001e18 <HAL_RCC_ClockConfig+0x25c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 0207 	bic.w	r2, r3, #7
 8001dfe:	4906      	ldr	r1, [pc, #24]	@ (8001e18 <HAL_RCC_ClockConfig+0x25c>)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e06:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <HAL_RCC_ClockConfig+0x25c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e040      	b.n	8001e9a <HAL_RCC_ClockConfig+0x2de>
 8001e18:	40022000 	.word	0x40022000
 8001e1c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	491a      	ldr	r1, [pc, #104]	@ (8001ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4912      	ldr	r1, [pc, #72]	@ (8001ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e5e:	f000 f829 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 8001e62:	4601      	mov	r1, r0
 8001e64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e6c:	22f0      	movs	r2, #240	@ 0xf0
 8001e6e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	fa92 f2a2 	rbit	r2, r2
 8001e76:	60fa      	str	r2, [r7, #12]
  return result;
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	fab2 f282 	clz	r2, r2
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	40d3      	lsrs	r3, r2
 8001e82:	4a09      	ldr	r2, [pc, #36]	@ (8001ea8 <HAL_RCC_ClockConfig+0x2ec>)
 8001e84:	5cd3      	ldrb	r3, [r2, r3]
 8001e86:	fa21 f303 	lsr.w	r3, r1, r3
 8001e8a:	4a08      	ldr	r2, [pc, #32]	@ (8001eac <HAL_RCC_ClockConfig+0x2f0>)
 8001e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e8e:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <HAL_RCC_ClockConfig+0x2f4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fce4 	bl	8000860 <HAL_InitTick>
  
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3778      	adds	r7, #120	@ 0x78
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	08002408 	.word	0x08002408
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	20000004 	.word	0x20000004

08001eb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001ece:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d002      	beq.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x30>
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d003      	beq.n	8001eea <HAL_RCC_GetSysClockFreq+0x36>
 8001ee2:	e029      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ee6:	613b      	str	r3, [r7, #16]
      break;
 8001ee8:	e029      	b.n	8001f3e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	0c9b      	lsrs	r3, r3, #18
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	4a18      	ldr	r2, [pc, #96]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ef4:	5cd3      	ldrb	r3, [r2, r3]
 8001ef6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001ef8:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efc:	f003 030f 	and.w	r3, r3, #15
 8001f00:	4a15      	ldr	r2, [pc, #84]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f10:	4a0f      	ldr	r2, [pc, #60]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	e007      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f22:	4a0b      	ldr	r2, [pc, #44]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	fb02 f303 	mul.w	r3, r2, r3
 8001f30:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	613b      	str	r3, [r7, #16]
      break;
 8001f36:	e002      	b.n	8001f3e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f38:	4b05      	ldr	r3, [pc, #20]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f3a:	613b      	str	r3, [r7, #16]
      break;
 8001f3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f3e:	693b      	ldr	r3, [r7, #16]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	007a1200 	.word	0x007a1200
 8001f54:	08002418 	.word	0x08002418
 8001f58:	08002428 	.word	0x08002428

08001f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b092      	sub	sp, #72	@ 0x48
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80d4 	beq.w	8002128 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f80:	4b4e      	ldr	r3, [pc, #312]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10e      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8c:	4b4b      	ldr	r3, [pc, #300]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	4a4a      	ldr	r2, [pc, #296]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f96:	61d3      	str	r3, [r2, #28]
 8001f98:	4b48      	ldr	r3, [pc, #288]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b45      	ldr	r3, [pc, #276]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d118      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb6:	4b42      	ldr	r3, [pc, #264]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a41      	ldr	r2, [pc, #260]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc2:	f7fe fc91 	bl	80008e8 <HAL_GetTick>
 8001fc6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	e008      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fca:	f7fe fc8d 	bl	80008e8 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b64      	cmp	r3, #100	@ 0x64
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e1d6      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	4b38      	ldr	r3, [pc, #224]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fe8:	4b34      	ldr	r3, [pc, #208]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 8084 	beq.w	8002102 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002002:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002004:	429a      	cmp	r2, r3
 8002006:	d07c      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002008:	4b2c      	ldr	r3, [pc, #176]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002012:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002016:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	4b26      	ldr	r3, [pc, #152]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	461a      	mov	r2, r3
 8002032:	2301      	movs	r3, #1
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800203a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	461a      	mov	r2, r3
 8002056:	2300      	movs	r3, #0
 8002058:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800205a:	4a18      	ldr	r2, [pc, #96]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800205e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d04b      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7fe fc3d 	bl	80008e8 <HAL_GetTick>
 800206e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002070:	e00a      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7fe fc39 	bl	80008e8 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002080:	4293      	cmp	r3, r2
 8002082:	d901      	bls.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e180      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002088:	2302      	movs	r3, #2
 800208a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24
 8002094:	2302      	movs	r3, #2
 8002096:	623b      	str	r3, [r7, #32]
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	61fb      	str	r3, [r7, #28]
  return result;
 80020a0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	095b      	lsrs	r3, r3, #5
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d108      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80020b6:	4b01      	ldr	r3, [pc, #4]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	e00d      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40007000 	.word	0x40007000
 80020c4:	10908100 	.word	0x10908100
 80020c8:	2302      	movs	r3, #2
 80020ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	4b9a      	ldr	r3, [pc, #616]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80020d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d8:	2202      	movs	r2, #2
 80020da:	613a      	str	r2, [r7, #16]
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	fa92 f2a2 	rbit	r2, r2
 80020e2:	60fa      	str	r2, [r7, #12]
  return result;
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	fab2 f282 	clz	r2, r2
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	f002 021f 	and.w	r2, r2, #31
 80020f6:	2101      	movs	r1, #1
 80020f8:	fa01 f202 	lsl.w	r2, r1, r2
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0b7      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002102:	4b8f      	ldr	r3, [pc, #572]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	498c      	ldr	r1, [pc, #560]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002110:	4313      	orrs	r3, r2
 8002112:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002114:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002118:	2b01      	cmp	r3, #1
 800211a:	d105      	bne.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211c:	4b88      	ldr	r3, [pc, #544]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	4a87      	ldr	r2, [pc, #540]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002122:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002126:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002134:	4b82      	ldr	r3, [pc, #520]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002138:	f023 0203 	bic.w	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	497f      	ldr	r1, [pc, #508]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002142:	4313      	orrs	r3, r2
 8002144:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d008      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002152:	4b7b      	ldr	r3, [pc, #492]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	4978      	ldr	r1, [pc, #480]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002160:	4313      	orrs	r3, r2
 8002162:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002170:	4b73      	ldr	r3, [pc, #460]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002174:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	4970      	ldr	r1, [pc, #448]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800217e:	4313      	orrs	r3, r2
 8002180:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b00      	cmp	r3, #0
 800218c:	d008      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800218e:	4b6c      	ldr	r3, [pc, #432]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	f023 0210 	bic.w	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	4969      	ldr	r1, [pc, #420]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800219c:	4313      	orrs	r3, r2
 800219e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80021ac:	4b64      	ldr	r3, [pc, #400]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b8:	4961      	ldr	r1, [pc, #388]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	f023 0220 	bic.w	r2, r3, #32
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	495a      	ldr	r1, [pc, #360]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021e8:	4b55      	ldr	r3, [pc, #340]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ec:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	4952      	ldr	r1, [pc, #328]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002206:	4b4e      	ldr	r3, [pc, #312]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	494b      	ldr	r1, [pc, #300]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002214:	4313      	orrs	r3, r2
 8002216:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002224:	4b46      	ldr	r3, [pc, #280]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002228:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	4943      	ldr	r1, [pc, #268]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002232:	4313      	orrs	r3, r2
 8002234:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800223e:	2b00      	cmp	r3, #0
 8002240:	d008      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002242:	4b3f      	ldr	r3, [pc, #252]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	493c      	ldr	r1, [pc, #240]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002260:	4b37      	ldr	r3, [pc, #220]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002264:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226c:	4934      	ldr	r1, [pc, #208]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800226e:	4313      	orrs	r3, r2
 8002270:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d008      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800227e:	4b30      	ldr	r3, [pc, #192]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002282:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228a:	492d      	ldr	r1, [pc, #180]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800228c:	4313      	orrs	r3, r2
 800228e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800229c:	4b28      	ldr	r3, [pc, #160]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a8:	4925      	ldr	r1, [pc, #148]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d008      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80022ba:	4b21      	ldr	r3, [pc, #132]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	491e      	ldr	r1, [pc, #120]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80022d8:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e4:	4916      	ldr	r1, [pc, #88]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d008      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80022f6:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002302:	490f      	ldr	r1, [pc, #60]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002304:	4313      	orrs	r3, r2
 8002306:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002314:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002318:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002320:	4907      	ldr	r1, [pc, #28]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002322:	4313      	orrs	r3, r2
 8002324:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00c      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002332:	4b03      	ldr	r3, [pc, #12]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	e002      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002346:	4913      	ldr	r1, [pc, #76]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002348:	4313      	orrs	r3, r2
 800234a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002358:	4b0e      	ldr	r3, [pc, #56]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002364:	490b      	ldr	r1, [pc, #44]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002366:	4313      	orrs	r3, r2
 8002368:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002376:	4b07      	ldr	r3, [pc, #28]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002382:	4904      	ldr	r1, [pc, #16]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002384:	4313      	orrs	r3, r2
 8002386:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3748      	adds	r7, #72	@ 0x48
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000

08002398 <memset>:
 8002398:	4402      	add	r2, r0
 800239a:	4603      	mov	r3, r0
 800239c:	4293      	cmp	r3, r2
 800239e:	d100      	bne.n	80023a2 <memset+0xa>
 80023a0:	4770      	bx	lr
 80023a2:	f803 1b01 	strb.w	r1, [r3], #1
 80023a6:	e7f9      	b.n	800239c <memset+0x4>

080023a8 <__libc_init_array>:
 80023a8:	b570      	push	{r4, r5, r6, lr}
 80023aa:	4d0d      	ldr	r5, [pc, #52]	@ (80023e0 <__libc_init_array+0x38>)
 80023ac:	4c0d      	ldr	r4, [pc, #52]	@ (80023e4 <__libc_init_array+0x3c>)
 80023ae:	1b64      	subs	r4, r4, r5
 80023b0:	10a4      	asrs	r4, r4, #2
 80023b2:	2600      	movs	r6, #0
 80023b4:	42a6      	cmp	r6, r4
 80023b6:	d109      	bne.n	80023cc <__libc_init_array+0x24>
 80023b8:	4d0b      	ldr	r5, [pc, #44]	@ (80023e8 <__libc_init_array+0x40>)
 80023ba:	4c0c      	ldr	r4, [pc, #48]	@ (80023ec <__libc_init_array+0x44>)
 80023bc:	f000 f818 	bl	80023f0 <_init>
 80023c0:	1b64      	subs	r4, r4, r5
 80023c2:	10a4      	asrs	r4, r4, #2
 80023c4:	2600      	movs	r6, #0
 80023c6:	42a6      	cmp	r6, r4
 80023c8:	d105      	bne.n	80023d6 <__libc_init_array+0x2e>
 80023ca:	bd70      	pop	{r4, r5, r6, pc}
 80023cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80023d0:	4798      	blx	r3
 80023d2:	3601      	adds	r6, #1
 80023d4:	e7ee      	b.n	80023b4 <__libc_init_array+0xc>
 80023d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80023da:	4798      	blx	r3
 80023dc:	3601      	adds	r6, #1
 80023de:	e7f2      	b.n	80023c6 <__libc_init_array+0x1e>
 80023e0:	08002438 	.word	0x08002438
 80023e4:	08002438 	.word	0x08002438
 80023e8:	08002438 	.word	0x08002438
 80023ec:	0800243c 	.word	0x0800243c

080023f0 <_init>:
 80023f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023f2:	bf00      	nop
 80023f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023f6:	bc08      	pop	{r3}
 80023f8:	469e      	mov	lr, r3
 80023fa:	4770      	bx	lr

080023fc <_fini>:
 80023fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fe:	bf00      	nop
 8002400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002402:	bc08      	pop	{r3}
 8002404:	469e      	mov	lr, r3
 8002406:	4770      	bx	lr
