
ElevatorProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08006fac  08006fac  00016fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007264  08007264  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08007264  08007264  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007264  08007264  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007264  08007264  00017264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007268  08007268  00017268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800726c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000354  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c0  200003c0  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000be4d  00000000  00000000  00020122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001efa  00000000  00000000  0002bf6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000938  00000000  00000000  0002de70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000070a  00000000  00000000  0002e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002104b  00000000  00000000  0002eeb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000cc6f  00000000  00000000  0004fefd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2f97  00000000  00000000  0005cb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003154  00000000  00000000  0011fb04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00122c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f94 	.word	0x08006f94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006f94 	.word	0x08006f94

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <initPIDController>:
#include <stdlib.h>
#include <math.h>

#include "PIDController.h"

PIDController* initPIDController(double Kp, double Ki, double Kd, double timeDelta, double maxError) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	; 0x30
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	ed87 0b08 	vstr	d0, [r7, #32]
 8000c56:	ed87 1b06 	vstr	d1, [r7, #24]
 8000c5a:	ed87 2b04 	vstr	d2, [r7, #16]
 8000c5e:	ed87 3b02 	vstr	d3, [r7, #8]
 8000c62:	ed87 4b00 	vstr	d4, [r7]
    PIDController *pid = (PIDController*)malloc(sizeof(PIDController));
 8000c66:	2050      	movs	r0, #80	; 0x50
 8000c68:	f004 fef8 	bl	8005a5c <malloc>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (pid == NULL) {
 8000c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d101      	bne.n	8000c7a <initPIDController+0x2e>
        return NULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e035      	b.n	8000ce6 <initPIDController+0x9a>
    }

    pid->constants.Kp = Kp;
 8000c7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000c7c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000c80:	e9c1 2300 	strd	r2, r3, [r1]
    pid->constants.Ki = Ki;
 8000c84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000c86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000c8a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid->constants.Kd = Kd;
 8000c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000c90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c94:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid->constants.maxError = maxError;
 8000c98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000c9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c9e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->values.timeDelta = timeDelta;
 8000ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ca8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    // Initialize other members to zero, they're
    // going to be calculated during operation.
    pid->values.currentError = 0.0;
 8000cac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000cae:	f04f 0200 	mov.w	r2, #0
 8000cb2:	f04f 0300 	mov.w	r3, #0
 8000cb6:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid->values.previousError = 0.0;
 8000cba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000cbc:	f04f 0200 	mov.w	r2, #0
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    pid->values.integral = 0.0;
 8000cc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	f04f 0300 	mov.w	r3, #0
 8000cd2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    pid->values.derivative = 0.0;
 8000cd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000cd8:	f04f 0200 	mov.w	r2, #0
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    return pid;
 8000ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3730      	adds	r7, #48	; 0x30
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <updatePIDError>:

int updatePIDError(PIDController *pid, double currentProcessValue) {
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b084      	sub	sp, #16
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	60f8      	str	r0, [r7, #12]
 8000cf6:	ed87 0b00 	vstr	d0, [r7]
    if (pid == NULL) {
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <updatePIDError+0x18>
        return -1;
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	e00c      	b.n	8000d20 <updatePIDError+0x32>
    }
    pid->values.currentError = pid->values.targetStep - currentProcessValue;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8000d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d10:	f7ff fad2 	bl	80002b8 <__aeabi_dsub>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	68f9      	ldr	r1, [r7, #12]
 8000d1a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    return 0;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <setPIDStep>:


void setPIDStep(PIDController* pid, double targetStep, double currentProcessValue) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6178      	str	r0, [r7, #20]
 8000d30:	ed87 0b02 	vstr	d0, [r7, #8]
 8000d34:	ed87 1b00 	vstr	d1, [r7]
    if (pid == NULL) {
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d017      	beq.n	8000d6e <setPIDStep+0x46>
        return;
    }

    pid->values.targetStep = targetStep;
 8000d3e:	6979      	ldr	r1, [r7, #20]
 8000d40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d44:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    pid->values.currentError = targetStep - currentProcessValue;
 8000d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d50:	f7ff fab2 	bl	80002b8 <__aeabi_dsub>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	6979      	ldr	r1, [r7, #20]
 8000d5a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid->values.previousError = 0.0; // reset to not mess up initial derivative calculation
 8000d5e:	6979      	ldr	r1, [r7, #20]
 8000d60:	f04f 0200 	mov.w	r2, #0
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8000d6c:	e000      	b.n	8000d70 <setPIDStep+0x48>
        return;
 8000d6e:	bf00      	nop
}
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <calculateNormalizedPIDControlValue>:
    }
    return pid->values.timeDelta;
}


double calculateNormalizedPIDControlValue(PIDController *controller) {
 8000d78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d7c:	b08a      	sub	sp, #40	; 0x28
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
    if (controller == NULL) {
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d104      	bne.n	8000d92 <calculateNormalizedPIDControlValue+0x1a>
        return 0.0; // does nothing, i.e., pauses given actuator.
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e0a4      	b.n	8000edc <calculateNormalizedPIDControlValue+0x164>
    }

    // Calculate difference between the current and previous error:
    double errorDifference = controller->values.currentError - controller->values.previousError;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000d9e:	f7ff fa8b 	bl	80002b8 <__aeabi_dsub>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Update integral term:
    controller->values.integral += controller->values.currentError * controller->values.timeDelta;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000dbc:	f7ff fc34 	bl	8000628 <__aeabi_dmul>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4640      	mov	r0, r8
 8000dc6:	4649      	mov	r1, r9
 8000dc8:	f7ff fa78 	bl	80002bc <__adddf3>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

    // Update derivative term using time delta:
    controller->values.derivative = errorDifference / controller->values.timeDelta;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000ddc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000de0:	f7ff fd4c 	bl	800087c <__aeabi_ddiv>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Control value calculation:
    double controlValue = (controller->constants.Kp * controller->values.currentError) +
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000dfa:	f7ff fc15 	bl	8000628 <__aeabi_dmul>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	4690      	mov	r8, r2
 8000e04:	4699      	mov	r9, r3
                          (controller->constants.Ki * controller->values.integral) +
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8000e12:	f7ff fc09 	bl	8000628 <__aeabi_dmul>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
    double controlValue = (controller->constants.Kp * controller->values.currentError) +
 8000e1a:	4640      	mov	r0, r8
 8000e1c:	4649      	mov	r1, r9
 8000e1e:	f7ff fa4d 	bl	80002bc <__adddf3>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4690      	mov	r8, r2
 8000e28:	4699      	mov	r9, r3
                          (controller->constants.Kd * controller->values.derivative);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8000e36:	f7ff fbf7 	bl	8000628 <__aeabi_dmul>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
    double controlValue = (controller->constants.Kp * controller->values.currentError) +
 8000e3e:	4640      	mov	r0, r8
 8000e40:	4649      	mov	r1, r9
 8000e42:	f7ff fa3b 	bl	80002bc <__adddf3>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // Normalize control value based on maximum control effort:
    double maxControlEffort = controller->constants.Kp * fabs(controller->constants.maxError);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000e5a:	4614      	mov	r4, r2
 8000e5c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8000e60:	4622      	mov	r2, r4
 8000e62:	462b      	mov	r3, r5
 8000e64:	f7ff fbe0 	bl	8000628 <__aeabi_dmul>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (maxControlEffort == 0.0) {
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e7c:	f7ff fe3c 	bl	8000af8 <__aeabi_dcmpeq>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d004      	beq.n	8000e90 <calculateNormalizedPIDControlValue+0x118>
        return 0.0; // Prevent division by zero if maxError is zero.
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	f04f 0300 	mov.w	r3, #0
 8000e8e:	e025      	b.n	8000edc <calculateNormalizedPIDControlValue+0x164>
    }

    double normalizedControlValue = controlValue / maxControlEffort;
 8000e90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e98:	f7ff fcf0 	bl	800087c <__aeabi_ddiv>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    normalizedControlValue = fmax(fmin(normalizedControlValue, 1.0), -1.0);
 8000ea4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8000ef0 <calculateNormalizedPIDControlValue+0x178>
 8000ea8:	ed97 0b02 	vldr	d0, [r7, #8]
 8000eac:	f006 f820 	bl	8006ef0 <fmin>
 8000eb0:	eeb0 7a40 	vmov.f32	s14, s0
 8000eb4:	eef0 7a60 	vmov.f32	s15, s1
 8000eb8:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8000ef8 <calculateNormalizedPIDControlValue+0x180>
 8000ebc:	eeb0 0a47 	vmov.f32	s0, s14
 8000ec0:	eef0 0a67 	vmov.f32	s1, s15
 8000ec4:	f005 ffed 	bl	8006ea2 <fmax>
 8000ec8:	ed87 0b02 	vstr	d0, [r7, #8]

    // Update the previous error for next iteration:
    controller->values.previousError = controller->values.currentError;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    return normalizedControlValue;
 8000ed8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000edc:	ec43 2b17 	vmov	d7, r2, r3
 8000ee0:	eeb0 0a47 	vmov.f32	s0, s14
 8000ee4:	eef0 0a67 	vmov.f32	s1, s15
 8000ee8:	3728      	adds	r7, #40	; 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000ef0:	00000000 	.word	0x00000000
 8000ef4:	3ff00000 	.word	0x3ff00000
 8000ef8:	00000000 	.word	0x00000000
 8000efc:	bff00000 	.word	0xbff00000

08000f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db0b      	blt.n	8000f46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	4907      	ldr	r1, [pc, #28]	; (8000f54 <__NVIC_EnableIRQ+0x38>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
         );
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	; 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <set_interrupt_priority>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void set_interrupt_priority(IRQn_Type IRQn, uint32_t priority) {
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	6039      	str	r1, [r7, #0]
 800101c:	71fb      	strb	r3, [r7, #7]
	uint32_t priority_group = NVIC_GetPriorityGrouping();
 800101e:	f7ff ff6f 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 8001022:	60f8      	str	r0, [r7, #12]

	uint32_t priority_value = NVIC_EncodePriority(priority_group, priority, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	6839      	ldr	r1, [r7, #0]
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f7ff ffbf 	bl	8000fac <NVIC_EncodePriority>
 800102e:	60b8      	str	r0, [r7, #8]

	// Set the priority for the given interrupt
	NVIC_SetPriority(IRQn, priority_value);
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff8e 	bl	8000f58 <__NVIC_SetPriority>
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <configure_GPIO>:

void configure_GPIO(volatile uint32_t *GPIO_MODER,
		volatile uint32_t *GPIO_OTYPER, volatile uint32_t *GPIO_PUPDR,
		uint8_t pin, uint8_t mode) {
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	70fb      	strb	r3, [r7, #3]
	*GPIO_MODER &= ~(0b10 << (pin * 2));
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	78fa      	ldrb	r2, [r7, #3]
 8001058:	0052      	lsls	r2, r2, #1
 800105a:	2102      	movs	r1, #2
 800105c:	fa01 f202 	lsl.w	r2, r1, r2
 8001060:	43d2      	mvns	r2, r2
 8001062:	401a      	ands	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	601a      	str	r2, [r3, #0]

	*GPIO_MODER |= (mode << (pin * 2));
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	7e39      	ldrb	r1, [r7, #24]
 800106e:	78fa      	ldrb	r2, [r7, #3]
 8001070:	0052      	lsls	r2, r2, #1
 8001072:	fa01 f202 	lsl.w	r2, r1, r2
 8001076:	431a      	orrs	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	601a      	str	r2, [r3, #0]

	if (GPIO_OTYPER == NULL) {
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d115      	bne.n	80010ae <configure_GPIO+0x6a>
		*GPIO_PUPDR &= ~(0b10 << (pin * 2));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	78fa      	ldrb	r2, [r7, #3]
 8001088:	0052      	lsls	r2, r2, #1
 800108a:	2102      	movs	r1, #2
 800108c:	fa01 f202 	lsl.w	r2, r1, r2
 8001090:	43d2      	mvns	r2, r2
 8001092:	401a      	ands	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	601a      	str	r2, [r3, #0]
		*GPIO_PUPDR |= (0b01 << (pin * 2));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	78fa      	ldrb	r2, [r7, #3]
 800109e:	0052      	lsls	r2, r2, #1
 80010a0:	2101      	movs	r1, #1
 80010a2:	fa01 f202 	lsl.w	r2, r1, r2
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	601a      	str	r2, [r3, #0]
	} else if (GPIO_PUPDR == NULL) {
		*GPIO_OTYPER &= ~(0b10 << pin);
		*GPIO_OTYPER |= (0 << pin);
	}
}
 80010ac:	e010      	b.n	80010d0 <configure_GPIO+0x8c>
	} else if (GPIO_PUPDR == NULL) {
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10d      	bne.n	80010d0 <configure_GPIO+0x8c>
		*GPIO_OTYPER &= ~(0b10 << pin);
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	78fa      	ldrb	r2, [r7, #3]
 80010ba:	2102      	movs	r1, #2
 80010bc:	fa01 f202 	lsl.w	r2, r1, r2
 80010c0:	43d2      	mvns	r2, r2
 80010c2:	401a      	ands	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	601a      	str	r2, [r3, #0]
		*GPIO_OTYPER |= (0 << pin);
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	601a      	str	r2, [r3, #0]
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
    EXTI->PR |= EXTI_PR_PR3; // Clear the pending bit
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <EXTI3_IRQHandler+0x9c>)
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	4a24      	ldr	r2, [pc, #144]	; (8001178 <EXTI3_IRQHandler+0x9c>)
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	6153      	str	r3, [r2, #20]

    if (!debounce_done && !(GPIOB->IDR & GPIO_IDR_3))
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <EXTI3_IRQHandler+0xa0>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	f083 0301 	eor.w	r3, r3, #1
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00e      	beq.n	800111a <EXTI3_IRQHandler+0x3e>
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <EXTI3_IRQHandler+0xa4>)
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	2b00      	cmp	r3, #0
 8001106:	d108      	bne.n	800111a <EXTI3_IRQHandler+0x3e>
    {
        // Button is pressed (assuming it's stable after debounce)
        debounce_done = true;
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <EXTI3_IRQHandler+0xa0>)
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
        start_time = HAL_GetTick();
 800110e:	f001 f9ef 	bl	80024f0 <HAL_GetTick>
 8001112:	4603      	mov	r3, r0
 8001114:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <EXTI3_IRQHandler+0xa8>)
 8001116:	6013      	str	r3, [r2, #0]
            if (desiredFloor > MAXFLOOR) desiredFloor = MAXFLOOR;
        }

        debounce_done = false; // Reset debounce flag
    }
}
 8001118:	e02c      	b.n	8001174 <EXTI3_IRQHandler+0x98>
    else if (debounce_done && (GPIOB->IDR & GPIO_IDR_3))
 800111a:	4b18      	ldr	r3, [pc, #96]	; (800117c <EXTI3_IRQHandler+0xa0>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d027      	beq.n	8001174 <EXTI3_IRQHandler+0x98>
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <EXTI3_IRQHandler+0xa4>)
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	2b00      	cmp	r3, #0
 800112e:	d021      	beq.n	8001174 <EXTI3_IRQHandler+0x98>
        end_time = HAL_GetTick();
 8001130:	f001 f9de 	bl	80024f0 <HAL_GetTick>
 8001134:	4603      	mov	r3, r0
 8001136:	4a14      	ldr	r2, [pc, #80]	; (8001188 <EXTI3_IRQHandler+0xac>)
 8001138:	6013      	str	r3, [r2, #0]
        if ((end_time - start_time) < 50)
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <EXTI3_IRQHandler+0xac>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <EXTI3_IRQHandler+0xa8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b31      	cmp	r3, #49	; 0x31
 8001146:	d806      	bhi.n	8001156 <EXTI3_IRQHandler+0x7a>
            GPIOB->ODR ^= GPIO_ODR_5; // Toggle LED on PB5
 8001148:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <EXTI3_IRQHandler+0xa4>)
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <EXTI3_IRQHandler+0xa4>)
 800114e:	f083 0320 	eor.w	r3, r3, #32
 8001152:	6153      	str	r3, [r2, #20]
 8001154:	e00b      	b.n	800116e <EXTI3_IRQHandler+0x92>
            desiredFloor++;
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <EXTI3_IRQHandler+0xb0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	4a0b      	ldr	r2, [pc, #44]	; (800118c <EXTI3_IRQHandler+0xb0>)
 800115e:	6013      	str	r3, [r2, #0]
            if (desiredFloor > MAXFLOOR) desiredFloor = MAXFLOOR;
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <EXTI3_IRQHandler+0xb0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b04      	cmp	r3, #4
 8001166:	dd02      	ble.n	800116e <EXTI3_IRQHandler+0x92>
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <EXTI3_IRQHandler+0xb0>)
 800116a:	2204      	movs	r2, #4
 800116c:	601a      	str	r2, [r3, #0]
        debounce_done = false; // Reset debounce flag
 800116e:	4b03      	ldr	r3, [pc, #12]	; (800117c <EXTI3_IRQHandler+0xa0>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40010400 	.word	0x40010400
 800117c:	20000268 	.word	0x20000268
 8001180:	48000400 	.word	0x48000400
 8001184:	20000260 	.word	0x20000260
 8001188:	20000264 	.word	0x20000264
 800118c:	20000254 	.word	0x20000254

08001190 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR10)
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <EXTI15_10_IRQHandler+0x9c>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119c:	2b00      	cmp	r3, #0
 800119e:	d042      	beq.n	8001226 <EXTI15_10_IRQHandler+0x96>
    {
        EXTI->PR |= EXTI_PR_PR6; // Clear the pending bit
 80011a0:	4b22      	ldr	r3, [pc, #136]	; (800122c <EXTI15_10_IRQHandler+0x9c>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	4a21      	ldr	r2, [pc, #132]	; (800122c <EXTI15_10_IRQHandler+0x9c>)
 80011a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011aa:	6153      	str	r3, [r2, #20]

        if (!debounce_done && !(GPIOB->IDR & GPIO_IDR_10))
 80011ac:	4b20      	ldr	r3, [pc, #128]	; (8001230 <EXTI15_10_IRQHandler+0xa0>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f083 0301 	eor.w	r3, r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00e      	beq.n	80011da <EXTI15_10_IRQHandler+0x4a>
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <EXTI15_10_IRQHandler+0xa4>)
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d108      	bne.n	80011da <EXTI15_10_IRQHandler+0x4a>
        {
            // Button is pressed (assuming it's stable after debounce)
            debounce_done = true;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <EXTI15_10_IRQHandler+0xa0>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
            start_time2 = HAL_GetTick();
 80011ce:	f001 f98f 	bl	80024f0 <HAL_GetTick>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4a18      	ldr	r2, [pc, #96]	; (8001238 <EXTI15_10_IRQHandler+0xa8>)
 80011d6:	6013      	str	r3, [r2, #0]
            }

            debounce_done = false; // Reset debounce flag
        }
    }
}
 80011d8:	e025      	b.n	8001226 <EXTI15_10_IRQHandler+0x96>
        else if (debounce_done && (GPIOB->IDR & GPIO_IDR_10))
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <EXTI15_10_IRQHandler+0xa0>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d020      	beq.n	8001226 <EXTI15_10_IRQHandler+0x96>
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <EXTI15_10_IRQHandler+0xa4>)
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d01a      	beq.n	8001226 <EXTI15_10_IRQHandler+0x96>
            end_time2 = HAL_GetTick();
 80011f0:	f001 f97e 	bl	80024f0 <HAL_GetTick>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a11      	ldr	r2, [pc, #68]	; (800123c <EXTI15_10_IRQHandler+0xac>)
 80011f8:	6013      	str	r3, [r2, #0]
            if ((end_time2 - start_time2) < 50)
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <EXTI15_10_IRQHandler+0xac>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <EXTI15_10_IRQHandler+0xa8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b31      	cmp	r3, #49	; 0x31
 8001206:	d90b      	bls.n	8001220 <EXTI15_10_IRQHandler+0x90>
                desiredFloor--;
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <EXTI15_10_IRQHandler+0xb0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	3b01      	subs	r3, #1
 800120e:	4a0c      	ldr	r2, [pc, #48]	; (8001240 <EXTI15_10_IRQHandler+0xb0>)
 8001210:	6013      	str	r3, [r2, #0]
                if (desiredFloor < MINFLOOR) desiredFloor = MINFLOOR;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <EXTI15_10_IRQHandler+0xb0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	da02      	bge.n	8001220 <EXTI15_10_IRQHandler+0x90>
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <EXTI15_10_IRQHandler+0xb0>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
            debounce_done = false; // Reset debounce flag
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <EXTI15_10_IRQHandler+0xa0>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40010400 	.word	0x40010400
 8001230:	20000268 	.word	0x20000268
 8001234:	48000400 	.word	0x48000400
 8001238:	20000258 	.word	0x20000258
 800123c:	2000025c 	.word	0x2000025c
 8001240:	20000254 	.word	0x20000254

08001244 <configure_buttons>:

void configure_buttons(void) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af02      	add	r7, sp, #8
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN;
 800124a:	4b31      	ldr	r3, [pc, #196]	; (8001310 <configure_buttons+0xcc>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	4a30      	ldr	r2, [pc, #192]	; (8001310 <configure_buttons+0xcc>)
 8001250:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 8001254:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI3; // Clear EXTI3 configuration
 8001256:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <configure_buttons+0xd0>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	4a2e      	ldr	r2, [pc, #184]	; (8001314 <configure_buttons+0xd0>)
 800125c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001260:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PB; // PB3 as EXTI line 3
 8001262:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <configure_buttons+0xd0>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	4a2b      	ldr	r2, [pc, #172]	; (8001314 <configure_buttons+0xd0>)
 8001268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800126c:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_IM3; // Enable interrupt for EXTI line 3
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <configure_buttons+0xd4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a29      	ldr	r2, [pc, #164]	; (8001318 <configure_buttons+0xd4>)
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_TR3;
 800127a:	4b27      	ldr	r3, [pc, #156]	; (8001318 <configure_buttons+0xd4>)
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	4a26      	ldr	r2, [pc, #152]	; (8001318 <configure_buttons+0xd4>)
 8001280:	f043 0308 	orr.w	r3, r3, #8
 8001284:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR |= EXTI_RTSR_TR3;
 8001286:	4b24      	ldr	r3, [pc, #144]	; (8001318 <configure_buttons+0xd4>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	4a23      	ldr	r2, [pc, #140]	; (8001318 <configure_buttons+0xd4>)
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	6093      	str	r3, [r2, #8]

	// Configure EXTI for PB5 (Button connected here)
	SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR3_EXTI10; // Clear EXTI10 configuration
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <configure_buttons+0xd0>)
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	4a1f      	ldr	r2, [pc, #124]	; (8001314 <configure_buttons+0xd0>)
 8001298:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800129c:	6113      	str	r3, [r2, #16]
	SYSCFG->EXTICR[2] |= SYSCFG_EXTICR3_EXTI10_PB; // PB10 as EXTI line 10
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <configure_buttons+0xd0>)
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <configure_buttons+0xd0>)
 80012a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a8:	6113      	str	r3, [r2, #16]
	EXTI->IMR |= EXTI_IMR_IM10; // Enable interrupt for EXTI line 10
 80012aa:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <configure_buttons+0xd4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a1a      	ldr	r2, [pc, #104]	; (8001318 <configure_buttons+0xd4>)
 80012b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b4:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_FT10; // Trigger on falling edge for EXTI line 10
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <configure_buttons+0xd4>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	4a17      	ldr	r2, [pc, #92]	; (8001318 <configure_buttons+0xd4>)
 80012bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c0:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR |= EXTI_RTSR_RT10; // Trigger on rising edge for EXTI line 10
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <configure_buttons+0xd4>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	4a14      	ldr	r2, [pc, #80]	; (8001318 <configure_buttons+0xd4>)
 80012c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012cc:	6093      	str	r3, [r2, #8]


	// Enable NVIC interrupts for EXTI lines
	 NVIC_EnableIRQ(EXTI3_IRQn); // Enable NVIC IRQ for EXTI line 3 (PB3)
 80012ce:	2009      	movs	r0, #9
 80012d0:	f7ff fe24 	bl	8000f1c <__NVIC_EnableIRQ>
	 NVIC_EnableIRQ(EXTI15_10_IRQn); // Enable NVIC IRQ for EXTI lines 10 to 15 (PB10 is EXTI line 10)
 80012d4:	2028      	movs	r0, #40	; 0x28
 80012d6:	f7ff fe21 	bl	8000f1c <__NVIC_EnableIRQ>

	configure_GPIO(&GPIOB->MODER, NULL, &GPIOB->PUPDR, 10, 0);
 80012da:	2300      	movs	r3, #0
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	230a      	movs	r3, #10
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <configure_buttons+0xd8>)
 80012e2:	2100      	movs	r1, #0
 80012e4:	480e      	ldr	r0, [pc, #56]	; (8001320 <configure_buttons+0xdc>)
 80012e6:	f7ff fead 	bl	8001044 <configure_GPIO>
	configure_GPIO(&GPIOB->MODER, NULL, &GPIOB->PUPDR, 3, 0);
 80012ea:	2300      	movs	r3, #0
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2303      	movs	r3, #3
 80012f0:	4a0a      	ldr	r2, [pc, #40]	; (800131c <configure_buttons+0xd8>)
 80012f2:	2100      	movs	r1, #0
 80012f4:	480a      	ldr	r0, [pc, #40]	; (8001320 <configure_buttons+0xdc>)
 80012f6:	f7ff fea5 	bl	8001044 <configure_GPIO>


	set_interrupt_priority(EXTI3_IRQn, 1);
 80012fa:	2101      	movs	r1, #1
 80012fc:	2009      	movs	r0, #9
 80012fe:	f7ff fe88 	bl	8001012 <set_interrupt_priority>
	set_interrupt_priority(EXTI15_10_IRQn, 1);
 8001302:	2101      	movs	r1, #1
 8001304:	2028      	movs	r0, #40	; 0x28
 8001306:	f7ff fe84 	bl	8001012 <set_interrupt_priority>
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000
 8001314:	40010000 	.word	0x40010000
 8001318:	40010400 	.word	0x40010400
 800131c:	4800040c 	.word	0x4800040c
 8001320:	48000400 	.word	0x48000400

08001324 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <HAL_UART_ErrorCallback+0xa4>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d143      	bne.n	80013be <HAL_UART_ErrorCallback+0x9a>
        printf("UART Error Callback: Error Code %lu\n", huart->ErrorCode);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800133c:	4619      	mov	r1, r3
 800133e:	4823      	ldr	r0, [pc, #140]	; (80013cc <HAL_UART_ErrorCallback+0xa8>)
 8001340:	f004 fd7c 	bl	8005e3c <iprintf>
        if (huart->ErrorCode & HAL_UART_ERROR_NE) {
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <HAL_UART_ErrorCallback+0x34>
            printf("Noise Error Detected.\n");
 8001352:	481f      	ldr	r0, [pc, #124]	; (80013d0 <HAL_UART_ErrorCallback+0xac>)
 8001354:	f004 fdd8 	bl	8005f08 <puts>
        }
        if (huart->ErrorCode & HAL_UART_ERROR_FE) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <HAL_UART_ErrorCallback+0x48>
            printf("Framing Error Detected.\n");
 8001366:	481b      	ldr	r0, [pc, #108]	; (80013d4 <HAL_UART_ErrorCallback+0xb0>)
 8001368:	f004 fdce 	bl	8005f08 <puts>
        }
        if (huart->ErrorCode & HAL_UART_ERROR_ORE) {
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <HAL_UART_ErrorCallback+0x5c>
            printf("Overrun Error Detected.\n");
 800137a:	4817      	ldr	r0, [pc, #92]	; (80013d8 <HAL_UART_ErrorCallback+0xb4>)
 800137c:	f004 fdc4 	bl	8005f08 <puts>
        }
        if (huart->ErrorCode & HAL_UART_ERROR_PE) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <HAL_UART_ErrorCallback+0x70>
            printf("Parity Error Detected.\n");
 800138e:	4813      	ldr	r0, [pc, #76]	; (80013dc <HAL_UART_ErrorCallback+0xb8>)
 8001390:	f004 fdba 	bl	8005f08 <puts>
        }

        // Clear errors and reinitialize
        __HAL_UART_CLEAR_NEFLAG(huart);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2204      	movs	r2, #4
 800139a:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_FEFLAG(huart);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2202      	movs	r2, #2
 80013a2:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_OREFLAG(huart);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2208      	movs	r2, #8
 80013aa:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_PEFLAG(huart);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2201      	movs	r2, #1
 80013b2:	621a      	str	r2, [r3, #32]

        HAL_UART_Receive_IT(huart, RxBuffer, UART_BUFFER_SIZE);
 80013b4:	2201      	movs	r2, #1
 80013b6:	490a      	ldr	r1, [pc, #40]	; (80013e0 <HAL_UART_ErrorCallback+0xbc>)
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f003 f963 	bl	8004684 <HAL_UART_Receive_IT>
    }
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40004400 	.word	0x40004400
 80013cc:	08006fac 	.word	0x08006fac
 80013d0:	08006fd4 	.word	0x08006fd4
 80013d4:	08006fec 	.word	0x08006fec
 80013d8:	08007004 	.word	0x08007004
 80013dc:	0800701c 	.word	0x0800701c
 80013e0:	20000198 	.word	0x20000198

080013e4 <USART2_IRQHandler>:


void USART2_IRQHandler(void) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
    if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <USART2_IRQHandler+0x30>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	2b10      	cmp	r3, #16
 80013f4:	d108      	bne.n	8001408 <USART2_IRQHandler+0x24>
        __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80013f6:	4b07      	ldr	r3, [pc, #28]	; (8001414 <USART2_IRQHandler+0x30>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2210      	movs	r2, #16
 80013fc:	621a      	str	r2, [r3, #32]
        HAL_UART_Receive_IT(&huart2, RxBuffer, UART_BUFFER_SIZE);
 80013fe:	2201      	movs	r2, #1
 8001400:	4905      	ldr	r1, [pc, #20]	; (8001418 <USART2_IRQHandler+0x34>)
 8001402:	4804      	ldr	r0, [pc, #16]	; (8001414 <USART2_IRQHandler+0x30>)
 8001404:	f003 f93e 	bl	8004684 <HAL_UART_Receive_IT>
    }
    HAL_UART_IRQHandler(&huart2);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <USART2_IRQHandler+0x30>)
 800140a:	f003 f97f 	bl	800470c <HAL_UART_IRQHandler>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000110 	.word	0x20000110
 8001418:	20000198 	.word	0x20000198

0800141c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a16      	ldr	r2, [pc, #88]	; (8001484 <HAL_UART_RxCpltCallback+0x68>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d125      	bne.n	800147a <HAL_UART_RxCpltCallback+0x5e>
        // Copy received data to circular buffer
        for (int i = 0; i < UART_BUFFER_SIZE; i++) {
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	e01a      	b.n	800146a <HAL_UART_RxCpltCallback+0x4e>
            CircularBuffer[writeIndex] = RxBuffer[i];
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <HAL_UART_RxCpltCallback+0x6c>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	b29b      	uxth	r3, r3
 800143a:	4619      	mov	r1, r3
 800143c:	4a13      	ldr	r2, [pc, #76]	; (800148c <HAL_UART_RxCpltCallback+0x70>)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4413      	add	r3, r2
 8001442:	781a      	ldrb	r2, [r3, #0]
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_UART_RxCpltCallback+0x74>)
 8001446:	545a      	strb	r2, [r3, r1]
            writeIndex = (writeIndex + 1) % CIRCULAR_BUFFER_SIZE;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_UART_RxCpltCallback+0x6c>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	3301      	adds	r3, #1
 8001450:	425a      	negs	r2, r3
 8001452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001456:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800145a:	bf58      	it	pl
 800145c:	4253      	negpl	r3, r2
 800145e:	b29a      	uxth	r2, r3
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_UART_RxCpltCallback+0x6c>)
 8001462:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < UART_BUFFER_SIZE; i++) {
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3301      	adds	r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	dde1      	ble.n	8001434 <HAL_UART_RxCpltCallback+0x18>
        }

        // Re-enable UART receive interrupt
        HAL_UART_Receive_IT(&huart1, RxBuffer, UART_BUFFER_SIZE);
 8001470:	2201      	movs	r2, #1
 8001472:	4906      	ldr	r1, [pc, #24]	; (800148c <HAL_UART_RxCpltCallback+0x70>)
 8001474:	4807      	ldr	r0, [pc, #28]	; (8001494 <HAL_UART_RxCpltCallback+0x78>)
 8001476:	f003 f905 	bl	8004684 <HAL_UART_Receive_IT>
    }
}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40013800 	.word	0x40013800
 8001488:	2000021c 	.word	0x2000021c
 800148c:	20000198 	.word	0x20000198
 8001490:	2000019c 	.word	0x2000019c
 8001494:	20000088 	.word	0x20000088

08001498 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <USART1_IRQHandler+0x30>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f003 0310 	and.w	r3, r3, #16
 80014a6:	2b10      	cmp	r3, #16
 80014a8:	d108      	bne.n	80014bc <USART1_IRQHandler+0x24>
        __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <USART1_IRQHandler+0x30>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2210      	movs	r2, #16
 80014b0:	621a      	str	r2, [r3, #32]
        HAL_UART_Receive_IT(&huart1, RxBuffer, UART_BUFFER_SIZE);
 80014b2:	2201      	movs	r2, #1
 80014b4:	4905      	ldr	r1, [pc, #20]	; (80014cc <USART1_IRQHandler+0x34>)
 80014b6:	4804      	ldr	r0, [pc, #16]	; (80014c8 <USART1_IRQHandler+0x30>)
 80014b8:	f003 f8e4 	bl	8004684 <HAL_UART_Receive_IT>
    }
    HAL_UART_IRQHandler(&huart1);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <USART1_IRQHandler+0x30>)
 80014be:	f003 f925 	bl	800470c <HAL_UART_IRQHandler>
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000088 	.word	0x20000088
 80014cc:	20000198 	.word	0x20000198

080014d0 <UART_print>:
/**
  * @brief UART transmission function to output a string to the serial monitor
  * @param string the string literal to transmit over UART
  * @author Wouter Swinkels
 */
void UART_print(const char *string) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    if (string != NULL) {
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00a      	beq.n	80014f4 <UART_print+0x24>
        HAL_UART_Transmit(&huart2, (uint8_t *)string, strlen(string), HAL_MAX_DELAY);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7fe fe88 	bl	80001f4 <strlen>
 80014e4:	4603      	mov	r3, r0
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	4803      	ldr	r0, [pc, #12]	; (80014fc <UART_print+0x2c>)
 80014f0:	f003 f83e 	bl	8004570 <HAL_UART_Transmit>
    }
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000110 	.word	0x20000110

08001500 <UART1_print>:

void UART1_print(const char *string) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    if (string != NULL) {
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00a      	beq.n	8001524 <UART1_print+0x24>
        HAL_UART_Transmit(&huart1, (uint8_t *)string, strlen(string), HAL_MAX_DELAY);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7fe fe70 	bl	80001f4 <strlen>
 8001514:	4603      	mov	r3, r0
 8001516:	b29a      	uxth	r2, r3
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4803      	ldr	r0, [pc, #12]	; (800152c <UART1_print+0x2c>)
 8001520:	f003 f826 	bl	8004570 <HAL_UART_Transmit>
    }
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000088 	.word	0x20000088

08001530 <UART_print_formatted>:
  * @brief UART transmission of a string with formatting (like in `sprintf()`).
  * @param string the string literal to transmit over UART, (e.g., "distance: %d")
  * @param ... any parameters to be formatted into the string (e.g., int distance)
  * @author Wouter Swinkels
 */
void UART_print_formatted(const char *format, ...) {
 8001530:	b40f      	push	{r0, r1, r2, r3}
 8001532:	b580      	push	{r7, lr}
 8001534:	b092      	sub	sp, #72	; 0x48
 8001536:	af00      	add	r7, sp, #0
    char UARTString[64];

    va_list args;
    va_start(args, format);
 8001538:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800153c:	607b      	str	r3, [r7, #4]
    vsnprintf(UARTString, sizeof(UARTString), format, args);
 800153e:	f107 0008 	add.w	r0, r7, #8
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001546:	2140      	movs	r1, #64	; 0x40
 8001548:	f004 fd54 	bl	8005ff4 <vsniprintf>
    va_end(args);
    UART_print(UARTString); // Use UART_print to transmit
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ffbd 	bl	80014d0 <UART_print>
}
 8001556:	bf00      	nop
 8001558:	3748      	adds	r7, #72	; 0x48
 800155a:	46bd      	mov	sp, r7
 800155c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001560:	b004      	add	sp, #16
 8001562:	4770      	bx	lr

08001564 <UART1_print_formatted>:

void UART1_print_formatted(const char *format, ...) {
 8001564:	b40f      	push	{r0, r1, r2, r3}
 8001566:	b580      	push	{r7, lr}
 8001568:	b092      	sub	sp, #72	; 0x48
 800156a:	af00      	add	r7, sp, #0
    char UARTString[64];

    va_list args;
    va_start(args, format);
 800156c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001570:	607b      	str	r3, [r7, #4]
    vsnprintf(UARTString, sizeof(UARTString), format, args);
 8001572:	f107 0008 	add.w	r0, r7, #8
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800157a:	2140      	movs	r1, #64	; 0x40
 800157c:	f004 fd3a 	bl	8005ff4 <vsniprintf>
    va_end(args);
    UART1_print(UARTString); // Use UART_print to transmit
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ffbb 	bl	8001500 <UART1_print>
}
 800158a:	bf00      	nop
 800158c:	3748      	adds	r7, #72	; 0x48
 800158e:	46bd      	mov	sp, r7
 8001590:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001594:	b004      	add	sp, #16
 8001596:	4770      	bx	lr

08001598 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

	// Rising or falling edge trigger:
	if (TIM4->SR & TIM_SR_CC1IF) {
 800159c:	4b3a      	ldr	r3, [pc, #232]	; (8001688 <TIM4_IRQHandler+0xf0>)
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d04c      	beq.n	8001642 <TIM4_IRQHandler+0xaa>
		TIM4->SR &= ~TIM_SR_CC1IF;
 80015a8:	4b37      	ldr	r3, [pc, #220]	; (8001688 <TIM4_IRQHandler+0xf0>)
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	4a36      	ldr	r2, [pc, #216]	; (8001688 <TIM4_IRQHandler+0xf0>)
 80015ae:	f023 0302 	bic.w	r3, r3, #2
 80015b2:	6113      	str	r3, [r2, #16]
		if (!capture_flag && !capture_done_flag) {	// Rising edge
 80015b4:	4b35      	ldr	r3, [pc, #212]	; (800168c <TIM4_IRQHandler+0xf4>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	f083 0301 	eor.w	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d01e      	beq.n	8001602 <TIM4_IRQHandler+0x6a>
 80015c4:	4b32      	ldr	r3, [pc, #200]	; (8001690 <TIM4_IRQHandler+0xf8>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f083 0301 	eor.w	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d016      	beq.n	8001602 <TIM4_IRQHandler+0x6a>
			thigh = TIM4->CCR1;          // Store time of rising edge
 80015d4:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <TIM4_IRQHandler+0xf0>)
 80015d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d8:	4a2e      	ldr	r2, [pc, #184]	; (8001694 <TIM4_IRQHandler+0xfc>)
 80015da:	6013      	str	r3, [r2, #0]
			TIM4->CCER ^= TIM_CCER_CC1P; // Switch to capturing falling edge
 80015dc:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <TIM4_IRQHandler+0xf0>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4a29      	ldr	r2, [pc, #164]	; (8001688 <TIM4_IRQHandler+0xf0>)
 80015e2:	f083 0302 	eor.w	r3, r3, #2
 80015e6:	6213      	str	r3, [r2, #32]
			capture_flag = true;
 80015e8:	4b28      	ldr	r3, [pc, #160]	; (800168c <TIM4_IRQHandler+0xf4>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
			overflow_count = 0;          // Reset overflow, as this is a new time capture
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <TIM4_IRQHandler+0x100>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
			capture_done_flag = false;
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <TIM4_IRQHandler+0xf8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
			capture_flag = true;
 80015fa:	4b24      	ldr	r3, [pc, #144]	; (800168c <TIM4_IRQHandler+0xf4>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	e01f      	b.n	8001642 <TIM4_IRQHandler+0xaa>
		} else if (capture_flag && !capture_done_flag) { // Falling edge
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <TIM4_IRQHandler+0xf4>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01a      	beq.n	8001642 <TIM4_IRQHandler+0xaa>
 800160c:	4b20      	ldr	r3, [pc, #128]	; (8001690 <TIM4_IRQHandler+0xf8>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f083 0301 	eor.w	r3, r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d012      	beq.n	8001642 <TIM4_IRQHandler+0xaa>
			tlow = TIM4->CCR1;           // Store time of the falling edge using CCR
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <TIM4_IRQHandler+0xf0>)
 800161e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001620:	4a1e      	ldr	r2, [pc, #120]	; (800169c <TIM4_IRQHandler+0x104>)
 8001622:	6013      	str	r3, [r2, #0]
			capture_flag = false;
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <TIM4_IRQHandler+0xf4>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
			capture_done_flag = true;
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <TIM4_IRQHandler+0xf8>)
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
			TIM4->CCER ^= TIM_CCER_CC1P; // Switch back to capture the rising edge
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <TIM4_IRQHandler+0xf0>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4a14      	ldr	r2, [pc, #80]	; (8001688 <TIM4_IRQHandler+0xf0>)
 8001636:	f083 0302 	eor.w	r3, r3, #2
 800163a:	6213      	str	r3, [r2, #32]
			capture_done_flag = true; // should be set false in other task handler.
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <TIM4_IRQHandler+0xf8>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
		}
	}

  // Overflow of TIM4, increment the overflow count
  // to ensure proper calculation of time duration.
	if (TIM4->SR & TIM_SR_UIF) {
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <TIM4_IRQHandler+0xf0>)
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d017      	beq.n	800167e <TIM4_IRQHandler+0xe6>
		TIM4->SR &= ~TIM_SR_UIF;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <TIM4_IRQHandler+0xf0>)
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <TIM4_IRQHandler+0xf0>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6113      	str	r3, [r2, #16]
		if (capture_flag && !capture_done_flag) {
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <TIM4_IRQHandler+0xf4>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00c      	beq.n	800167e <TIM4_IRQHandler+0xe6>
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <TIM4_IRQHandler+0xf8>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	f083 0301 	eor.w	r3, r3, #1
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d004      	beq.n	800167e <TIM4_IRQHandler+0xe6>
			overflow_count++;
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <TIM4_IRQHandler+0x100>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	3301      	adds	r3, #1
 800167a:	4a07      	ldr	r2, [pc, #28]	; (8001698 <TIM4_IRQHandler+0x100>)
 800167c:	6013      	str	r3, [r2, #0]
		}
	}
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	40000800 	.word	0x40000800
 800168c:	20000241 	.word	0x20000241
 8001690:	20000242 	.word	0x20000242
 8001694:	20000244 	.word	0x20000244
 8001698:	2000024c 	.word	0x2000024c
 800169c:	20000248 	.word	0x20000248

080016a0 <TIM3_Configuration>:
  * @details Sets TIM3 to a PWM output signal for a servo motor on a 50Hz frequency
  * @param None
  * @retval None
  * @author Merna Gramoun, Wouter Swinkels
  */
void TIM3_Configuration(void) {
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80016a4:	4b29      	ldr	r3, [pc, #164]	; (800174c <TIM3_Configuration+0xac>)
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	4a28      	ldr	r2, [pc, #160]	; (800174c <TIM3_Configuration+0xac>)
 80016aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ae:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80016b0:	4b26      	ldr	r3, [pc, #152]	; (800174c <TIM3_Configuration+0xac>)
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	4a25      	ldr	r2, [pc, #148]	; (800174c <TIM3_Configuration+0xac>)
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	61d3      	str	r3, [r2, #28]

    GPIOB->MODER &= ~(GPIO_MODER_MODER5);
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <TIM3_Configuration+0xb0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a23      	ldr	r2, [pc, #140]	; (8001750 <TIM3_Configuration+0xb0>)
 80016c2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80016c6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODER5_1;
 80016c8:	4b21      	ldr	r3, [pc, #132]	; (8001750 <TIM3_Configuration+0xb0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a20      	ldr	r2, [pc, #128]	; (8001750 <TIM3_Configuration+0xb0>)
 80016ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016d2:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[0] &= ~GPIO_AFRL_AFRL5;
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <TIM3_Configuration+0xb0>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4a1d      	ldr	r2, [pc, #116]	; (8001750 <TIM3_Configuration+0xb0>)
 80016da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80016de:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (0b0010 << GPIO_AFRL_AFRL5_Pos);
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <TIM3_Configuration+0xb0>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4a1a      	ldr	r2, [pc, #104]	; (8001750 <TIM3_Configuration+0xb0>)
 80016e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ea:	6213      	str	r3, [r2, #32]

    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <TIM3_Configuration+0xac>)
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	4a16      	ldr	r2, [pc, #88]	; (800174c <TIM3_Configuration+0xac>)
 80016f2:	f043 0302 	orr.w	r3, r3, #2
 80016f6:	61d3      	str	r3, [r2, #28]
    TIM3->PSC = 71;
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <TIM3_Configuration+0xb4>)
 80016fa:	2247      	movs	r2, #71	; 0x47
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 19999; // Set auto-reload value to 50Hz (period of 20ms on 1MHz)
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <TIM3_Configuration+0xb4>)
 8001700:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c

    TIM3->CCMR1 &= ~(TIM_CCMR1_OC2M);
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <TIM3_Configuration+0xb4>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <TIM3_Configuration+0xb4>)
 800170c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001714:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= (TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2);
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <TIM3_Configuration+0xb4>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <TIM3_Configuration+0xb4>)
 800171c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001720:	6193      	str	r3, [r2, #24]
    TIM3->CCER |= TIM_CCER_CC2E;
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <TIM3_Configuration+0xb4>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <TIM3_Configuration+0xb4>)
 8001728:	f043 0310 	orr.w	r3, r3, #16
 800172c:	6213      	str	r3, [r2, #32]
    TIM3->CR1 |= TIM_CR1_CEN;
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <TIM3_Configuration+0xb4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a08      	ldr	r2, [pc, #32]	; (8001754 <TIM3_Configuration+0xb4>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6013      	str	r3, [r2, #0]

    TIM3->CCR2 = 1500; // Set the signal to 1.5ms to pause the motor initially.
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <TIM3_Configuration+0xb4>)
 800173c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001740:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	40021000 	.word	0x40021000
 8001750:	48000400 	.word	0x48000400
 8001754:	40000400 	.word	0x40000400

08001758 <Timer4_Init>:
  * @details Sets TIM4 to capturing both the rising and falling edges on a 1MHz capture rate.
  * @param None
  * @retval None
  * @author Merna Gramoun, Wouter Swinkels
  */
void Timer4_Init(void) {
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;	// Enable clock for GPIOB
 800175c:	4b3d      	ldr	r3, [pc, #244]	; (8001854 <Timer4_Init+0xfc>)
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	4a3c      	ldr	r2, [pc, #240]	; (8001854 <Timer4_Init+0xfc>)
 8001762:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001766:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN; // Enable APB clock for TIM4
 8001768:	4b3a      	ldr	r3, [pc, #232]	; (8001854 <Timer4_Init+0xfc>)
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	4a39      	ldr	r2, [pc, #228]	; (8001854 <Timer4_Init+0xfc>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	61d3      	str	r3, [r2, #28]


    GPIOB->MODER &= ~(GPIO_MODER_MODER6); // Configure PB6 to AF mode
 8001774:	4b38      	ldr	r3, [pc, #224]	; (8001858 <Timer4_Init+0x100>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a37      	ldr	r2, [pc, #220]	; (8001858 <Timer4_Init+0x100>)
 800177a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800177e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODER6_1;
 8001780:	4b35      	ldr	r3, [pc, #212]	; (8001858 <Timer4_Init+0x100>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a34      	ldr	r2, [pc, #208]	; (8001858 <Timer4_Init+0x100>)
 8001786:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800178a:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] &= ~(0xFU << (4U * 6U)); // Configure AF mapping to PB6
 800178c:	4b32      	ldr	r3, [pc, #200]	; (8001858 <Timer4_Init+0x100>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4a31      	ldr	r2, [pc, #196]	; (8001858 <Timer4_Init+0x100>)
 8001792:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001796:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (2U << (4U * 6U));
 8001798:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <Timer4_Init+0x100>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4a2e      	ldr	r2, [pc, #184]	; (8001858 <Timer4_Init+0x100>)
 800179e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017a2:	6213      	str	r3, [r2, #32]


	TIM4->PSC = 71; // Configure PSC for 1MHz clock (72MHZ/72=1MHz)
 80017a4:	4b2d      	ldr	r3, [pc, #180]	; (800185c <Timer4_Init+0x104>)
 80017a6:	2247      	movs	r2, #71	; 0x47
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28

	// Set TIM4 to Capture Compare input (see CCCER and CCMR entries in datasheet)
	TIM4->CCMR1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_IC1PSC | TIM_CCMR1_IC1F);
 80017aa:	4b2c      	ldr	r3, [pc, #176]	; (800185c <Timer4_Init+0x104>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	4a2b      	ldr	r2, [pc, #172]	; (800185c <Timer4_Init+0x104>)
 80017b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017b4:	6193      	str	r3, [r2, #24]
	TIM4->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80017b6:	4b29      	ldr	r3, [pc, #164]	; (800185c <Timer4_Init+0x104>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4a28      	ldr	r2, [pc, #160]	; (800185c <Timer4_Init+0x104>)
 80017bc:	f023 030b 	bic.w	r3, r3, #11
 80017c0:	6213      	str	r3, [r2, #32]
	TIM4->CCMR1 &= ~(TIM_CCMR1_CC1S);
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <Timer4_Init+0x104>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	4a25      	ldr	r2, [pc, #148]	; (800185c <Timer4_Init+0x104>)
 80017c8:	f023 0303 	bic.w	r3, r3, #3
 80017cc:	6193      	str	r3, [r2, #24]

	TIM4->CCMR1 |= TIM_CCMR1_CC1S_0; // Set to input mode
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <Timer4_Init+0x104>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	4a22      	ldr	r2, [pc, #136]	; (800185c <Timer4_Init+0x104>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6193      	str	r3, [r2, #24]

	TIM4->CCER |= TIM_CCER_CC1E;	// Enable capture compare
 80017da:	4b20      	ldr	r3, [pc, #128]	; (800185c <Timer4_Init+0x104>)
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	4a1f      	ldr	r2, [pc, #124]	; (800185c <Timer4_Init+0x104>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~TIM_CCER_CC1NP;  // Set to capture both rising and falling
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <Timer4_Init+0x104>)
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	4a1c      	ldr	r2, [pc, #112]	; (800185c <Timer4_Init+0x104>)
 80017ec:	f023 0308 	bic.w	r3, r3, #8
 80017f0:	6213      	str	r3, [r2, #32]

	TIM4->DIER &= ~(TIM_DIER_CC1IE | TIM_DIER_CC1DE);
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <Timer4_Init+0x104>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	4a19      	ldr	r2, [pc, #100]	; (800185c <Timer4_Init+0x104>)
 80017f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80017fc:	f023 0302 	bic.w	r3, r3, #2
 8001800:	60d3      	str	r3, [r2, #12]
	TIM4->DIER |= TIM_DIER_CC1IE;	// Enable interrupt for capture channel 1
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <Timer4_Init+0x104>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	4a15      	ldr	r2, [pc, #84]	; (800185c <Timer4_Init+0x104>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	60d3      	str	r3, [r2, #12]
	TIM4->DIER |= TIM_DIER_UIE;		// Enable update interrupt for overflow capture
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <Timer4_Init+0x104>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <Timer4_Init+0x104>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	60d3      	str	r3, [r2, #12]

	// Enable TIM4 for channel 1 (by setting Control Register 1 values):
	TIM4->CR1 &= ~(TIM_CR1_CEN | TIM_CR1_OPM | TIM_CR1_URS | TIM_CR1_UDIS |
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <Timer4_Init+0x104>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a0f      	ldr	r2, [pc, #60]	; (800185c <Timer4_Init+0x104>)
 8001820:	f423 630e 	bic.w	r3, r3, #2272	; 0x8e0
 8001824:	f023 030f 	bic.w	r3, r3, #15
 8001828:	6013      	str	r3, [r2, #0]
				   TIM_CR1_CMS | TIM_CR1_ARPE | TIM_CR1_UIFREMAP);
	TIM4->CR1 &= ~TIM_CR1_DIR;
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <Timer4_Init+0x104>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a0b      	ldr	r2, [pc, #44]	; (800185c <Timer4_Init+0x104>)
 8001830:	f023 0310 	bic.w	r3, r3, #16
 8001834:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |= TIM_CR1_CEN;
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <Timer4_Init+0x104>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <Timer4_Init+0x104>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6013      	str	r3, [r2, #0]

	// Enabe the interrupt service routine for TIm4:
	NVIC_EnableIRQ(TIM4_IRQn);
 8001842:	201e      	movs	r0, #30
 8001844:	f7ff fb6a 	bl	8000f1c <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM4_IRQn, 0);
 8001848:	2100      	movs	r1, #0
 800184a:	201e      	movs	r0, #30
 800184c:	f7ff fb84 	bl	8000f58 <__NVIC_SetPriority>
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40021000 	.word	0x40021000
 8001858:	48000400 	.word	0x48000400
 800185c:	40000800 	.word	0x40000800

08001860 <HandleNewIncomingMessage>:
  * @details Handles both new floor request and elevator speed change request messages
  * @param message, specific message to process
  * @retval None
  * @author Merna Gramoun, Wouter Swinkels
  */
void HandleNewIncomingMessage(const char* message) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	; 0x30
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
    // 1. Find the message delimiter:
    const char* separator = strchr(message, INCOMING_MSG_DELIMITER);
 8001868:	233a      	movs	r3, #58	; 0x3a
 800186a:	4619      	mov	r1, r3
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f004 fc6d 	bl	800614c <strchr>
 8001872:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (separator == NULL) { // No ':' found in the message
 8001874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001876:	2b00      	cmp	r3, #0
 8001878:	d103      	bne.n	8001882 <HandleNewIncomingMessage+0x22>
        UART_print("invalid msg\n");
 800187a:	4826      	ldr	r0, [pc, #152]	; (8001914 <HandleNewIncomingMessage+0xb4>)
 800187c:	f7ff fe28 	bl	80014d0 <UART_print>
 8001880:	e044      	b.n	800190c <HandleNewIncomingMessage+0xac>
        return;
    }

    // 2. Extract prefix/topic and number:
    size_t prefixLength = separator - message;
 8001882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
    char prefix[20];
    strncpy(prefix, message, prefixLength);
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4618      	mov	r0, r3
 8001894:	f004 fc67 	bl	8006166 <strncpy>
    prefix[prefixLength] = '\0';
 8001898:	f107 020c 	add.w	r2, r7, #12
 800189c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189e:	4413      	add	r3, r2
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]

    const char* numberStr = separator + 1;
 80018a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a6:	3301      	adds	r3, #1
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
    int n = atoi(numberStr);
 80018aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018ac:	f004 f8d2 	bl	8005a54 <atoi>
 80018b0:	6238      	str	r0, [r7, #32]

    // 3. Handle message type accordingly:
    if (strcmp(prefix, "level") == 0) {
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	4918      	ldr	r1, [pc, #96]	; (8001918 <HandleNewIncomingMessage+0xb8>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fc91 	bl	80001e0 <strcmp>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10d      	bne.n	80018e0 <HandleNewIncomingMessage+0x80>
    	if (n >= MINFLOOR && n <= MAXFLOOR) {
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	db20      	blt.n	800190c <HandleNewIncomingMessage+0xac>
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	dc1d      	bgt.n	800190c <HandleNewIncomingMessage+0xac>
        	UART_print_formatted("new floor = %d", n);
 80018d0:	6a39      	ldr	r1, [r7, #32]
 80018d2:	4812      	ldr	r0, [pc, #72]	; (800191c <HandleNewIncomingMessage+0xbc>)
 80018d4:	f7ff fe2c 	bl	8001530 <UART_print_formatted>
        	desiredFloor = n;
 80018d8:	4a11      	ldr	r2, [pc, #68]	; (8001920 <HandleNewIncomingMessage+0xc0>)
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e015      	b.n	800190c <HandleNewIncomingMessage+0xac>
    	}
    } else if (strcmp(prefix, "speed") == 0) {
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	490f      	ldr	r1, [pc, #60]	; (8001924 <HandleNewIncomingMessage+0xc4>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fc7a 	bl	80001e0 <strcmp>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d106      	bne.n	8001900 <HandleNewIncomingMessage+0xa0>
    	UART_print("new speed");
 80018f2:	480d      	ldr	r0, [pc, #52]	; (8001928 <HandleNewIncomingMessage+0xc8>)
 80018f4:	f7ff fdec 	bl	80014d0 <UART_print>
    	maxElevatorSpeed = n;
 80018f8:	4a0c      	ldr	r2, [pc, #48]	; (800192c <HandleNewIncomingMessage+0xcc>)
 80018fa:	6a3b      	ldr	r3, [r7, #32]
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e005      	b.n	800190c <HandleNewIncomingMessage+0xac>
    } else {
        UART_print_formatted("Unknown message type: %s\n", prefix);
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	4619      	mov	r1, r3
 8001906:	480a      	ldr	r0, [pc, #40]	; (8001930 <HandleNewIncomingMessage+0xd0>)
 8001908:	f7ff fe12 	bl	8001530 <UART_print_formatted>
    }
}
 800190c:	3730      	adds	r7, #48	; 0x30
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	08007034 	.word	0x08007034
 8001918:	08007044 	.word	0x08007044
 800191c:	0800704c 	.word	0x0800704c
 8001920:	20000254 	.word	0x20000254
 8001924:	0800705c 	.word	0x0800705c
 8001928:	08007064 	.word	0x08007064
 800192c:	20000000 	.word	0x20000000
 8001930:	08007070 	.word	0x08007070

08001934 <ProcessProtocolData>:
  * @details
  * @param None
  * @retval None
  * @author Merna Gramoun, Wouter Swinkels
  */
void ProcessProtocolData(void) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
    while (readIndex != writeIndex) {
 800193a:	e035      	b.n	80019a8 <ProcessProtocolData+0x74>
        // Process the data in the circular buffer:
        uint8_t data = CircularBuffer[readIndex];
 800193c:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <ProcessProtocolData+0x90>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	b29b      	uxth	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <ProcessProtocolData+0x94>)
 8001946:	5c9b      	ldrb	r3, [r3, r2]
 8001948:	71fb      	strb	r3, [r7, #7]
        readIndex = (readIndex + 1) % CIRCULAR_BUFFER_SIZE;
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <ProcessProtocolData+0x90>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	3301      	adds	r3, #1
 8001952:	425a      	negs	r2, r3
 8001954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001958:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800195c:	bf58      	it	pl
 800195e:	4253      	negpl	r3, r2
 8001960:	b29a      	uxth	r2, r3
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <ProcessProtocolData+0x90>)
 8001964:	801a      	strh	r2, [r3, #0]

        // Write data to the new incoming message:
        incomingMsgBuffer[incMsgWriteIndex] = data;
 8001966:	4b19      	ldr	r3, [pc, #100]	; (80019cc <ProcessProtocolData+0x98>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	4619      	mov	r1, r3
 800196c:	4a18      	ldr	r2, [pc, #96]	; (80019d0 <ProcessProtocolData+0x9c>)
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	5453      	strb	r3, [r2, r1]
        incMsgWriteIndex++;
 8001972:	4b16      	ldr	r3, [pc, #88]	; (80019cc <ProcessProtocolData+0x98>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b14      	ldr	r3, [pc, #80]	; (80019cc <ProcessProtocolData+0x98>)
 800197c:	701a      	strb	r2, [r3, #0]

        // Check if a message is done and therefore should be processed:
        if (data == INCOMING_MSG_END) {
 800197e:	220a      	movs	r2, #10
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	4293      	cmp	r3, r2
 8001984:	d110      	bne.n	80019a8 <ProcessProtocolData+0x74>
        	incomingMsgBuffer[incMsgWriteIndex] = '\0';
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <ProcessProtocolData+0x98>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <ProcessProtocolData+0x9c>)
 800198e:	2100      	movs	r1, #0
 8001990:	5499      	strb	r1, [r3, r2]
        	HandleNewIncomingMessage((const char*)incomingMsgBuffer);
 8001992:	480f      	ldr	r0, [pc, #60]	; (80019d0 <ProcessProtocolData+0x9c>)
 8001994:	f7ff ff64 	bl	8001860 <HandleNewIncomingMessage>
        	incMsgWriteIndex = 0;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <ProcessProtocolData+0x98>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
            memset(incomingMsgBuffer, 0, sizeof(incomingMsgBuffer)); // clear buffer
 800199e:	2220      	movs	r2, #32
 80019a0:	2100      	movs	r1, #0
 80019a2:	480b      	ldr	r0, [pc, #44]	; (80019d0 <ProcessProtocolData+0x9c>)
 80019a4:	f004 fbca 	bl	800613c <memset>
    while (readIndex != writeIndex) {
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <ProcessProtocolData+0x90>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <ProcessProtocolData+0xa0>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d1c1      	bne.n	800193c <ProcessProtocolData+0x8>
        }
    }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000021e 	.word	0x2000021e
 80019c8:	2000019c 	.word	0x2000019c
 80019cc:	20000240 	.word	0x20000240
 80019d0:	20000220 	.word	0x20000220
 80019d4:	2000021c 	.word	0x2000021c

080019d8 <calculateNewEncoderAngle>:
  * @param currentAngle: amount of the current, thus most recently measured, angle
  * @param currentTurns: amount of full-cycle angle turns the motor has already made
  * @retval None, params are updated through pointer references
  * @author Merna Gramoun, Wouter Swinkels
  */
void calculateNewEncoderAngle(float* currentAngle, int* currentTurns) {
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	if (!capture_done_flag) return; // no new encoder capture, angle stays the same.
 80019e2:	4b42      	ldr	r3, [pc, #264]	; (8001aec <calculateNewEncoderAngle+0x114>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f083 0301 	eor.w	r3, r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d174      	bne.n	8001adc <calculateNewEncoderAngle+0x104>

	// 1. Calculate the total tick time for the encoder capture:
	uint32_t ticks = ((tlow-thigh) + (overflow_count* (TIMER_MAX_VALUE + 1))) % (TIMER_MAX_VALUE + 1);
 80019f2:	4b3f      	ldr	r3, [pc, #252]	; (8001af0 <calculateNewEncoderAngle+0x118>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4b3f      	ldr	r3, [pc, #252]	; (8001af4 <calculateNewEncoderAngle+0x11c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	1ad1      	subs	r1, r2, r3
 80019fc:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <calculateNewEncoderAngle+0x120>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4613      	mov	r3, r2
 8001a02:	041b      	lsls	r3, r3, #16
 8001a04:	4413      	add	r3, r2
 8001a06:	18ca      	adds	r2, r1, r3
 8001a08:	4b3c      	ldr	r3, [pc, #240]	; (8001afc <calculateNewEncoderAngle+0x124>)
 8001a0a:	fba3 1302 	umull	r1, r3, r3, r2
 8001a0e:	0c19      	lsrs	r1, r3, #16
 8001a10:	460b      	mov	r3, r1
 8001a12:	041b      	lsls	r3, r3, #16
 8001a14:	440b      	add	r3, r1
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	617b      	str	r3, [r7, #20]
	capture_done_flag = false; // Another capture may now be done again as volatiles have been evaluated
 8001a1a:	4b34      	ldr	r3, [pc, #208]	; (8001aec <calculateNewEncoderAngle+0x114>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]

	// 2. Calculate the current encoder angle from the duty cycle of the encoder:
	float PWM_duty_cycle = ((ticks) / (1100.0f)) * 100.0f;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a2a:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001b00 <calculateNewEncoderAngle+0x128>
 8001a2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a32:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001b04 <calculateNewEncoderAngle+0x12c>
 8001a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3a:	edc7 7a04 	vstr	s15, [r7, #16]
	if (PWM_duty_cycle > 100) return; // wrong duty cycle. May happen with initial captures on bootup
 8001a3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a42:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001b04 <calculateNewEncoderAngle+0x12c>
 8001a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4e:	dc47      	bgt.n	8001ae0 <calculateNewEncoderAngle+0x108>
	float motorTheta = (UNITS_FULL_CIRCLE - 1) - ((PWM_duty_cycle - dcMin) * UNITS_FULL_CIRCLE) / (dcMax - dcMin + 1);
 8001a50:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001b08 <calculateNewEncoderAngle+0x130>
 8001a54:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a5c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001b0c <calculateNewEncoderAngle+0x134>
 8001a60:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001a64:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001b10 <calculateNewEncoderAngle+0x138>
 8001a68:	eddf 7a27 	vldr	s15, [pc, #156]	; 8001b08 <calculateNewEncoderAngle+0x130>
 8001a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a7c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001b14 <calculateNewEncoderAngle+0x13c>
 8001a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a84:	edc7 7a03 	vstr	s15, [r7, #12]

    // 3. Check for any full-cycle turnovers and update the
    //    full-cycle turn amount accordingly:
    float angleDifference = motorTheta - *currentAngle;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a96:	edc7 7a02 	vstr	s15, [r7, #8]
    if (angleDifference > 180.0f) { // 0 -> 360
 8001a9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a9e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001b18 <calculateNewEncoderAngle+0x140>
 8001aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aaa:	dd05      	ble.n	8001ab8 <calculateNewEncoderAngle+0xe0>
        (*currentTurns)--;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	1e5a      	subs	r2, r3, #1
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	e00d      	b.n	8001ad4 <calculateNewEncoderAngle+0xfc>
    } else if (angleDifference < -180.0f) { // 360 -> 0
 8001ab8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001abc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001b1c <calculateNewEncoderAngle+0x144>
 8001ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac8:	d504      	bpl.n	8001ad4 <calculateNewEncoderAngle+0xfc>
    	(*currentTurns)++;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	601a      	str	r2, [r3, #0]
    }

	// 4. Update the current angle:
	*currentAngle = motorTheta;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	e002      	b.n	8001ae2 <calculateNewEncoderAngle+0x10a>
	if (!capture_done_flag) return; // no new encoder capture, angle stays the same.
 8001adc:	bf00      	nop
 8001ade:	e000      	b.n	8001ae2 <calculateNewEncoderAngle+0x10a>
	if (PWM_duty_cycle > 100) return; // wrong duty cycle. May happen with initial captures on bootup
 8001ae0:	bf00      	nop
}
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	20000242 	.word	0x20000242
 8001af0:	20000248 	.word	0x20000248
 8001af4:	20000244 	.word	0x20000244
 8001af8:	2000024c 	.word	0x2000024c
 8001afc:	ffff0001 	.word	0xffff0001
 8001b00:	44898000 	.word	0x44898000
 8001b04:	42c80000 	.word	0x42c80000
 8001b08:	4039999a 	.word	0x4039999a
 8001b0c:	43b40000 	.word	0x43b40000
 8001b10:	42c23333 	.word	0x42c23333
 8001b14:	43b38000 	.word	0x43b38000
 8001b18:	43340000 	.word	0x43340000
 8001b1c:	c3340000 	.word	0xc3340000

08001b20 <updateMotorSpeed>:

void updateMotorSpeed(double normalisedControlUpdate, uint32_t maxTickDeviation) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b2a:	6078      	str	r0, [r7, #4]
	int newMotorSpeed = (int)(normalisedControlUpdate * (double)maxTickDeviation);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7fe fd01 	bl	8000534 <__aeabi_ui2d>
 8001b32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b36:	f7fe fd77 	bl	8000628 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7ff f80b 	bl	8000b5c <__aeabi_d2iz>
 8001b46:	4603      	mov	r3, r0
 8001b48:	613b      	str	r3, [r7, #16]

	int calculated = (uint32_t)(1500 + (int)newMotorSpeed);
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001b50:	617b      	str	r3, [r7, #20]
	UART_print_formatted("calculated=%d", (int)calculated);
 8001b52:	6979      	ldr	r1, [r7, #20]
 8001b54:	4811      	ldr	r0, [pc, #68]	; (8001b9c <updateMotorSpeed+0x7c>)
 8001b56:	f7ff fceb 	bl	8001530 <UART_print_formatted>
	if (calculated >= 1465 && calculated < 1500) {
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f5b3 6fb7 	cmp.w	r3, #1464	; 0x5b8
 8001b60:	dd08      	ble.n	8001b74 <updateMotorSpeed+0x54>
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f240 52db 	movw	r2, #1499	; 0x5db
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	dc03      	bgt.n	8001b74 <updateMotorSpeed+0x54>
		calculated = 1460;
 8001b6c:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	e00b      	b.n	8001b8c <updateMotorSpeed+0x6c>
	} else if (calculated > 1500 && calculated <= 1520) {
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	dd06      	ble.n	8001b8c <updateMotorSpeed+0x6c>
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8001b84:	dc02      	bgt.n	8001b8c <updateMotorSpeed+0x6c>
		calculated = 1530;
 8001b86:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8001b8a:	617b      	str	r3, [r7, #20]
	}

    TIM3->CCR2 = calculated;
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <updateMotorSpeed+0x80>)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	6393      	str	r3, [r2, #56]	; 0x38
	//UART_print_formatted("us=%d", (int)TIM3->CCR2);
}
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	0800708c 	.word	0x0800708c
 8001ba0:	40000400 	.word	0x40000400

08001ba4 <checkNewElevatorFloorRequest>:


void checkNewElevatorFloorRequest(PIDController* pid, float currentAngle, bool* activatePID) {
 8001ba4:	b5b0      	push	{r4, r5, r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bb0:	6079      	str	r1, [r7, #4]
	if (setFloor == desiredFloor) return; // no floor change, nothing to be done
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <checkNewElevatorFloorRequest+0x78>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <checkNewElevatorFloorRequest+0x7c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d027      	beq.n	8001c0e <checkNewElevatorFloorRequest+0x6a>
	if (desiredFloor < MINFLOOR || desiredFloor > MAXFLOOR) return; // floor not valid
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <checkNewElevatorFloorRequest+0x7c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	db25      	blt.n	8001c12 <checkNewElevatorFloorRequest+0x6e>
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <checkNewElevatorFloorRequest+0x7c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	dc21      	bgt.n	8001c12 <checkNewElevatorFloorRequest+0x6e>

	// For the new floor, update the PID controller accordingly:
	float targetDegree = FLOOR_ANGLES[desiredFloor]; // -1 to match array index for floor
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <checkNewElevatorFloorRequest+0x7c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <checkNewElevatorFloorRequest+0x80>)
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	617b      	str	r3, [r7, #20]
	setPIDStep(pid, targetDegree, currentAngle); // Set the new PID step to the floor angle
 8001bdc:	6978      	ldr	r0, [r7, #20]
 8001bde:	f7fe fccb 	bl	8000578 <__aeabi_f2d>
 8001be2:	4604      	mov	r4, r0
 8001be4:	460d      	mov	r5, r1
 8001be6:	68b8      	ldr	r0, [r7, #8]
 8001be8:	f7fe fcc6 	bl	8000578 <__aeabi_f2d>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	ec43 2b11 	vmov	d1, r2, r3
 8001bf4:	ec45 4b10 	vmov	d0, r4, r5
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f7ff f895 	bl	8000d28 <setPIDStep>
	setFloor = desiredFloor;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <checkNewElevatorFloorRequest+0x7c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <checkNewElevatorFloorRequest+0x78>)
 8001c04:	6013      	str	r3, [r2, #0]
	//UART_print_formatted("Updated floor to %d", setFloor);
	*activatePID = true;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
 8001c0c:	e002      	b.n	8001c14 <checkNewElevatorFloorRequest+0x70>
	if (setFloor == desiredFloor) return; // no floor change, nothing to be done
 8001c0e:	bf00      	nop
 8001c10:	e000      	b.n	8001c14 <checkNewElevatorFloorRequest+0x70>
	if (desiredFloor < MINFLOOR || desiredFloor > MAXFLOOR) return; // floor not valid
 8001c12:	bf00      	nop
}
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bdb0      	pop	{r4, r5, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000250 	.word	0x20000250
 8001c20:	20000254 	.word	0x20000254
 8001c24:	080070e4 	.word	0x080070e4

08001c28 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b092      	sub	sp, #72	; 0x48
 8001c2c:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c2e:	f000 fc05 	bl	800243c <HAL_Init>
  SystemClock_Config();
 8001c32:	f000 f913 	bl	8001e5c <SystemClock_Config>
  MX_GPIO_Init();
 8001c36:	f000 f9af 	bl	8001f98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c3a:	f000 f96d 	bl	8001f18 <MX_USART2_UART_Init>
  UART1_Init();
 8001c3e:	f000 fa11 	bl	8002064 <UART1_Init>
  configure_buttons();
 8001c42:	f7ff faff 	bl	8001244 <configure_buttons>

  /* Setup timers: */

  Timer4_Init(); 		// Initialise TIM4 with input capture on PB6
 8001c46:	f7ff fd87 	bl	8001758 <Timer4_Init>
  TIM3_Configuration(); // Initialise TIM3 to a PWM signal for the motor control
 8001c4a:	f7ff fd29 	bl	80016a0 <TIM3_Configuration>

  /* Setup the angles to be used by the motor: */

  float currentAngle = 180.0; // The current angle of the motor. Initialize at 180 to not have direct turn wraparound.
 8001c4e:	4b76      	ldr	r3, [pc, #472]	; (8001e28 <main+0x200>)
 8001c50:	607b      	str	r3, [r7, #4]
  int currentTurns = -1;       // The current amount of full-degree turns the motor has made (used for calculating total)
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	603b      	str	r3, [r7, #0]

  /* Setup the PID controller */

  double Kp = 3.0;
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b73      	ldr	r3, [pc, #460]	; (8001e2c <main+0x204>)
 8001c5e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  double Ki = 0.0; // Using a PD controller; the elevator moves smoothly this way.
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  double Kd = 0.01;
 8001c6e:	a36a      	add	r3, pc, #424	; (adr r3, 8001e18 <main+0x1f0>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  double timeDelta = 20.0;  // Time delta of step function (used for integral and derivative calculations)
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b6c      	ldr	r3, [pc, #432]	; (8001e30 <main+0x208>)
 8001c7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  double maxError = 2000.0; // Max expected (thus point of saturated normalized value) error in degrees
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	4b6b      	ldr	r3, [pc, #428]	; (8001e34 <main+0x20c>)
 8001c88:	e9c7 2308 	strd	r2, r3, [r7, #32]

  PIDController* pid = initPIDController(Kp, Ki, Kd, timeDelta, maxError);
 8001c8c:	ed97 4b08 	vldr	d4, [r7, #32]
 8001c90:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8001c94:	ed97 2b0c 	vldr	d2, [r7, #48]	; 0x30
 8001c98:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 8001c9c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8001ca0:	f7fe ffd4 	bl	8000c4c <initPIDController>
 8001ca4:	61f8      	str	r0, [r7, #28]

  if (pid == NULL) {
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d103      	bne.n	8001cb4 <main+0x8c>
	  UART_print("Failed to setup PID controller");
 8001cac:	4862      	ldr	r0, [pc, #392]	; (8001e38 <main+0x210>)
 8001cae:	f7ff fc0f 	bl	80014d0 <UART_print>
	  while(1); // Halt
 8001cb2:	e7fe      	b.n	8001cb2 <main+0x8a>
  }

  HAL_Delay(1000); // Wait to ensure that initial angle capture is already completed
 8001cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cb8:	f000 fc26 	bl	8002508 <HAL_Delay>

  // Retrieve the initial angle from the encoder:
  while (!(currentAngle > 0.0 && currentAngle < 360.0)) {
 8001cbc:	e005      	b.n	8001cca <main+0xa2>
	  calculateNewEncoderAngle(&currentAngle, &currentTurns);
 8001cbe:	463a      	mov	r2, r7
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fe87 	bl	80019d8 <calculateNewEncoderAngle>
  while (!(currentAngle > 0.0 && currentAngle < 360.0)) {
 8001cca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	bfcc      	ite	gt
 8001cd8:	2301      	movgt	r3, #1
 8001cda:	2300      	movle	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f083 0301 	eor.w	r3, r3, #1
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1ea      	bne.n	8001cbe <main+0x96>
 8001ce8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cec:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001e3c <main+0x214>
 8001cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf8:	bf4c      	ite	mi
 8001cfa:	2301      	movmi	r3, #1
 8001cfc:	2300      	movpl	r3, #0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f083 0301 	eor.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1d9      	bne.n	8001cbe <main+0x96>

  static bool pidActive = false;

  while (1) {
	  // 1. Calculate the new angle by checking encoder capture:
	  calculateNewEncoderAngle(&currentAngle, &currentTurns);
 8001d0a:	463a      	mov	r2, r7
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fe61 	bl	80019d8 <calculateNewEncoderAngle>
	  float finalAngle = currentAngle + (currentTurns * (float)UNITS_FULL_CIRCLE);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	ee07 3a90 	vmov	s15, r3
 8001d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d20:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001e3c <main+0x214>
 8001d24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d30:	edc7 7a06 	vstr	s15, [r7, #24]
	  UART_print_formatted("FA=%d\n", (int)finalAngle);
 8001d34:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d3c:	ee17 1a90 	vmov	r1, s15
 8001d40:	483f      	ldr	r0, [pc, #252]	; (8001e40 <main+0x218>)
 8001d42:	f7ff fbf5 	bl	8001530 <UART_print_formatted>

	  // 2. Check for any received elevator update requests:
	  //ProcessButtonChanges();
	  ProcessProtocolData();
 8001d46:	f7ff fdf5 	bl	8001934 <ProcessProtocolData>
	  checkNewElevatorFloorRequest(pid, finalAngle, &pidActive);
 8001d4a:	493e      	ldr	r1, [pc, #248]	; (8001e44 <main+0x21c>)
 8001d4c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001d50:	69f8      	ldr	r0, [r7, #28]
 8001d52:	f7ff ff27 	bl	8001ba4 <checkNewElevatorFloorRequest>

	  // 3. Run the PID when there is active error:
	  if (pidActive) {
 8001d56:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <main+0x21c>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d058      	beq.n	8001e10 <main+0x1e8>
		  // 3.1. Update the PID error
		  updatePIDError(pid, finalAngle);
 8001d5e:	69b8      	ldr	r0, [r7, #24]
 8001d60:	f7fe fc0a 	bl	8000578 <__aeabi_f2d>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	ec43 2b10 	vmov	d0, r2, r3
 8001d6c:	69f8      	ldr	r0, [r7, #28]
 8001d6e:	f7fe ffbe 	bl	8000cee <updatePIDError>
		  UART_print_formatted("PIDERR = %d\n", (int)pid->values.currentError);
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f7fe feee 	bl	8000b5c <__aeabi_d2iz>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4619      	mov	r1, r3
 8001d84:	4830      	ldr	r0, [pc, #192]	; (8001e48 <main+0x220>)
 8001d86:	f7ff fbd3 	bl	8001530 <UART_print_formatted>

		  float currentErr = pid->values.currentError;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	f7fe ff0a 	bl	8000bac <__aeabi_d2f>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	617b      	str	r3, [r7, #20]

		  // 3.2. Apply the power:
		  double normalisedPowerControl = calculateNormalizedPIDControlValue(pid);
 8001d9c:	69f8      	ldr	r0, [r7, #28]
 8001d9e:	f7fe ffeb 	bl	8000d78 <calculateNormalizedPIDControlValue>
 8001da2:	ed87 0b02 	vstr	d0, [r7, #8]

		  updateMotorSpeed(normalisedPowerControl, maxElevatorSpeed * 3);
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <main+0x224>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	ed97 0b02 	vldr	d0, [r7, #8]
 8001db6:	f7ff feb3 	bl	8001b20 <updateMotorSpeed>

		  // 3.3. Check whether done:
		  if (currentErr < PID_ERROR_THRESHOLD_DEGREES && currentErr > -PID_ERROR_THRESHOLD_DEGREES) {
 8001dba:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dbe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	d521      	bpl.n	8001e10 <main+0x1e8>
 8001dcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dd0:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001dd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ddc:	dd18      	ble.n	8001e10 <main+0x1e8>
			  UART_print_formatted("reached:%d", desiredFloor);
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <main+0x228>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4619      	mov	r1, r3
 8001de4:	481b      	ldr	r0, [pc, #108]	; (8001e54 <main+0x22c>)
 8001de6:	f7ff fba3 	bl	8001530 <UART_print_formatted>
			  UART1_print_formatted("%d", desiredFloor);
 8001dea:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <main+0x228>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4619      	mov	r1, r3
 8001df0:	4819      	ldr	r0, [pc, #100]	; (8001e58 <main+0x230>)
 8001df2:	f7ff fbb7 	bl	8001564 <UART1_print_formatted>
			  updateMotorSpeed(0,maxElevatorSpeed * 3);
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <main+0x224>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8001e20 <main+0x1f8>
 8001e06:	f7ff fe8b 	bl	8001b20 <updateMotorSpeed>
			  pidActive = false;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <main+0x21c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
		  }


	  }
	  HAL_Delay(STEP_TIME_MS);
 8001e10:	2014      	movs	r0, #20
 8001e12:	f000 fb79 	bl	8002508 <HAL_Delay>
  while (1) {
 8001e16:	e778      	b.n	8001d0a <main+0xe2>
 8001e18:	47ae147b 	.word	0x47ae147b
 8001e1c:	3f847ae1 	.word	0x3f847ae1
	...
 8001e28:	43340000 	.word	0x43340000
 8001e2c:	40080000 	.word	0x40080000
 8001e30:	40340000 	.word	0x40340000
 8001e34:	409f4000 	.word	0x409f4000
 8001e38:	0800709c 	.word	0x0800709c
 8001e3c:	43b40000 	.word	0x43b40000
 8001e40:	080070bc 	.word	0x080070bc
 8001e44:	20000269 	.word	0x20000269
 8001e48:	080070c4 	.word	0x080070c4
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	20000254 	.word	0x20000254
 8001e54:	080070d4 	.word	0x080070d4
 8001e58:	080070e0 	.word	0x080070e0

08001e5c <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b0a6      	sub	sp, #152	; 0x98
 8001e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e62:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e66:	2228      	movs	r2, #40	; 0x28
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f004 f966 	bl	800613c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	2258      	movs	r2, #88	; 0x58
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f004 f958 	bl	800613c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e90:	2301      	movs	r3, #1
 8001e92:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e94:	2310      	movs	r3, #16
 8001e96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ea8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001eac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fe78 	bl	8002bb0 <HAL_RCC_OscConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001ec6:	f000 f943 	bl	8002150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eca:	230f      	movs	r3, #15
 8001ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eda:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ee0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f001 feb6 	bl	8003c58 <HAL_RCC_ClockConfig>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001ef2:	f000 f92d 	bl	8002150 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	4618      	mov	r0, r3
 8001f02:	f002 f8c9 	bl	8004098 <HAL_RCCEx_PeriphCLKConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001f0c:	f000 f920 	bl	8002150 <Error_Handler>
  }
}
 8001f10:	bf00      	nop
 8001f12:	3798      	adds	r7, #152	; 0x98
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <MX_USART2_UART_Init+0x78>)
 8001f1e:	4a1d      	ldr	r2, [pc, #116]	; (8001f94 <MX_USART2_UART_Init+0x7c>)
 8001f20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001f22:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <MX_USART2_UART_Init+0x78>)
 8001f24:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001f28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2a:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <MX_USART2_UART_Init+0x78>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f30:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <MX_USART2_UART_Init+0x78>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <MX_USART2_UART_Init+0x78>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <MX_USART2_UART_Init+0x78>)
 8001f3e:	220c      	movs	r2, #12
 8001f40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f42:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <MX_USART2_UART_Init+0x78>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <MX_USART2_UART_Init+0x78>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <MX_USART2_UART_Init+0x78>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f54:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <MX_USART2_UART_Init+0x78>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f5a:	480d      	ldr	r0, [pc, #52]	; (8001f90 <MX_USART2_UART_Init+0x78>)
 8001f5c:	f002 faba 	bl	80044d4 <HAL_UART_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f66:	f000 f8f3 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  // Enable UART interrupt
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <MX_USART2_UART_Init+0x78>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <MX_USART2_UART_Init+0x78>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0210 	orr.w	r2, r2, #16
 8001f78:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2026      	movs	r0, #38	; 0x26
 8001f80:	f000 fbc1 	bl	8002706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f84:	2026      	movs	r0, #38	; 0x26
 8001f86:	f000 fbda 	bl	800273e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_Init 2 */

}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000110 	.word	0x20000110
 8001f94:	40004400 	.word	0x40004400

08001f98 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	; 0x28
 8001f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
 8001fac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fae:	4b2b      	ldr	r3, [pc, #172]	; (800205c <MX_GPIO_Init+0xc4>)
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	4a2a      	ldr	r2, [pc, #168]	; (800205c <MX_GPIO_Init+0xc4>)
 8001fb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fb8:	6153      	str	r3, [r2, #20]
 8001fba:	4b28      	ldr	r3, [pc, #160]	; (800205c <MX_GPIO_Init+0xc4>)
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fc6:	4b25      	ldr	r3, [pc, #148]	; (800205c <MX_GPIO_Init+0xc4>)
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	4a24      	ldr	r2, [pc, #144]	; (800205c <MX_GPIO_Init+0xc4>)
 8001fcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fd0:	6153      	str	r3, [r2, #20]
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <MX_GPIO_Init+0xc4>)
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b1f      	ldr	r3, [pc, #124]	; (800205c <MX_GPIO_Init+0xc4>)
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	4a1e      	ldr	r2, [pc, #120]	; (800205c <MX_GPIO_Init+0xc4>)
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe8:	6153      	str	r3, [r2, #20]
 8001fea:	4b1c      	ldr	r3, [pc, #112]	; (800205c <MX_GPIO_Init+0xc4>)
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff6:	4b19      	ldr	r3, [pc, #100]	; (800205c <MX_GPIO_Init+0xc4>)
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	4a18      	ldr	r2, [pc, #96]	; (800205c <MX_GPIO_Init+0xc4>)
 8001ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002000:	6153      	str	r3, [r2, #20]
 8002002:	4b16      	ldr	r3, [pc, #88]	; (800205c <MX_GPIO_Init+0xc4>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	2120      	movs	r1, #32
 8002012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002016:	f000 fdb3 	bl	8002b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800201a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800201e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002020:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	480b      	ldr	r0, [pc, #44]	; (8002060 <MX_GPIO_Init+0xc8>)
 8002032:	f000 fc1b 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002036:	2320      	movs	r3, #32
 8002038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	4619      	mov	r1, r3
 800204c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002050:	f000 fc0c 	bl	800286c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002054:	bf00      	nop
 8002056:	3728      	adds	r7, #40	; 0x28
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40021000 	.word	0x40021000
 8002060:	48000800 	.word	0x48000800

08002064 <UART1_Init>:

/* USER CODE BEGIN 4 */

void UART1_Init(void) {
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 800206a:	4b35      	ldr	r3, [pc, #212]	; (8002140 <UART1_Init+0xdc>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	4a34      	ldr	r2, [pc, #208]	; (8002140 <UART1_Init+0xdc>)
 8002070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002074:	6193      	str	r3, [r2, #24]
 8002076:	4b32      	ldr	r3, [pc, #200]	; (8002140 <UART1_Init+0xdc>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002082:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <UART1_Init+0xdc>)
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	4a2e      	ldr	r2, [pc, #184]	; (8002140 <UART1_Init+0xdc>)
 8002088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208c:	6153      	str	r3, [r2, #20]
 800208e:	4b2c      	ldr	r3, [pc, #176]	; (8002140 <UART1_Init+0xdc>)
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209a:	f107 030c 	add.w	r3, r7, #12
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
 80020a8:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 80020aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020bc:	2307      	movs	r3, #7
 80020be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	4619      	mov	r1, r3
 80020c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ca:	f000 fbcf 	bl	800286c <HAL_GPIO_Init>

    huart1.Instance = USART1;
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <UART1_Init+0xe0>)
 80020d0:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <UART1_Init+0xe4>)
 80020d2:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 38400;
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <UART1_Init+0xe0>)
 80020d6:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80020da:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <UART1_Init+0xe0>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80020e2:	4b18      	ldr	r3, [pc, #96]	; (8002144 <UART1_Init+0xe0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <UART1_Init+0xe0>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <UART1_Init+0xe0>)
 80020f0:	220c      	movs	r2, #12
 80020f2:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <UART1_Init+0xe0>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <UART1_Init+0xe0>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <UART1_Init+0xe0>)
 8002102:	2200      	movs	r2, #0
 8002104:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <UART1_Init+0xe0>)
 8002108:	2200      	movs	r2, #0
 800210a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 800210c:	480d      	ldr	r0, [pc, #52]	; (8002144 <UART1_Init+0xe0>)
 800210e:	f002 f9e1 	bl	80044d4 <HAL_UART_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <UART1_Init+0xb8>
    {
        Error_Handler();
 8002118:	f000 f81a 	bl	8002150 <Error_Handler>
    }

    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	2100      	movs	r1, #0
 8002120:	2025      	movs	r0, #37	; 0x25
 8002122:	f000 faf0 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002126:	2025      	movs	r0, #37	; 0x25
 8002128:	f000 fb09 	bl	800273e <HAL_NVIC_EnableIRQ>
    HAL_UART_Receive_IT(&huart1, RxBuffer, UART_BUFFER_SIZE);
 800212c:	2201      	movs	r2, #1
 800212e:	4907      	ldr	r1, [pc, #28]	; (800214c <UART1_Init+0xe8>)
 8002130:	4804      	ldr	r0, [pc, #16]	; (8002144 <UART1_Init+0xe0>)
 8002132:	f002 faa7 	bl	8004684 <HAL_UART_Receive_IT>
}
 8002136:	bf00      	nop
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	20000088 	.word	0x20000088
 8002148:	40013800 	.word	0x40013800
 800214c:	20000198 	.word	0x20000198

08002150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002154:	b672      	cpsid	i
}
 8002156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add their own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002158:	e7fe      	b.n	8002158 <Error_Handler+0x8>
	...

0800215c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <HAL_MspInit+0x44>)
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <HAL_MspInit+0x44>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6193      	str	r3, [r2, #24]
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <HAL_MspInit+0x44>)
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_MspInit+0x44>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <HAL_MspInit+0x44>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	61d3      	str	r3, [r2, #28]
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_MspInit+0x44>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002192:	2007      	movs	r0, #7
 8002194:	f000 faac 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000

080021a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	; 0x28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a17      	ldr	r2, [pc, #92]	; (8002220 <HAL_UART_MspInit+0x7c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d128      	bne.n	8002218 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <HAL_UART_MspInit+0x80>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	4a16      	ldr	r2, [pc, #88]	; (8002224 <HAL_UART_MspInit+0x80>)
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d0:	61d3      	str	r3, [r2, #28]
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_UART_MspInit+0x80>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <HAL_UART_MspInit+0x80>)
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	4a10      	ldr	r2, [pc, #64]	; (8002224 <HAL_UART_MspInit+0x80>)
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e8:	6153      	str	r3, [r2, #20]
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <HAL_UART_MspInit+0x80>)
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021f6:	230c      	movs	r3, #12
 80021f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002206:	2307      	movs	r3, #7
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4619      	mov	r1, r3
 8002210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002214:	f000 fb2a 	bl	800286c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002218:	bf00      	nop
 800221a:	3728      	adds	r7, #40	; 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40004400 	.word	0x40004400
 8002224:	40021000 	.word	0x40021000

08002228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800222c:	e7fe      	b.n	800222c <NMI_Handler+0x4>

0800222e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <HardFault_Handler+0x4>

08002234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <MemManage_Handler+0x4>

0800223a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223e:	e7fe      	b.n	800223e <BusFault_Handler+0x4>

08002240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <UsageFault_Handler+0x4>

08002246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002274:	f000 f928 	bl	80024c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}

0800227c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	e00a      	b.n	80022a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800228e:	f3af 8000 	nop.w
 8002292:	4601      	mov	r1, r0
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	60ba      	str	r2, [r7, #8]
 800229a:	b2ca      	uxtb	r2, r1
 800229c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3301      	adds	r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	dbf0      	blt.n	800228e <_read+0x12>
  }

  return len;
 80022ac:	687b      	ldr	r3, [r7, #4]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	e009      	b.n	80022dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	60ba      	str	r2, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	3301      	adds	r3, #1
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	dbf1      	blt.n	80022c8 <_write+0x12>
  }
  return len;
 80022e4:	687b      	ldr	r3, [r7, #4]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <_close>:

int _close(int file)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002316:	605a      	str	r2, [r3, #4]
  return 0;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <_isatty>:

int _isatty(int file)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800232e:	2301      	movs	r3, #1
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002360:	4a14      	ldr	r2, [pc, #80]	; (80023b4 <_sbrk+0x5c>)
 8002362:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <_sbrk+0x60>)
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <_sbrk+0x64>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d102      	bne.n	800237a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <_sbrk+0x64>)
 8002376:	4a12      	ldr	r2, [pc, #72]	; (80023c0 <_sbrk+0x68>)
 8002378:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <_sbrk+0x64>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	429a      	cmp	r2, r3
 8002386:	d207      	bcs.n	8002398 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002388:	f003 ff56 	bl	8006238 <__errno>
 800238c:	4603      	mov	r3, r0
 800238e:	220c      	movs	r2, #12
 8002390:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002392:	f04f 33ff 	mov.w	r3, #4294967295
 8002396:	e009      	b.n	80023ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800239e:	4b07      	ldr	r3, [pc, #28]	; (80023bc <_sbrk+0x64>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	4a05      	ldr	r2, [pc, #20]	; (80023bc <_sbrk+0x64>)
 80023a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023aa:	68fb      	ldr	r3, [r7, #12]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20010000 	.word	0x20010000
 80023b8:	00000400 	.word	0x00000400
 80023bc:	2000026c 	.word	0x2000026c
 80023c0:	200003c0 	.word	0x200003c0

080023c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <SystemInit+0x20>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <SystemInit+0x20>)
 80023d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002420 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023ec:	f7ff ffea 	bl	80023c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023f0:	480c      	ldr	r0, [pc, #48]	; (8002424 <LoopForever+0x6>)
  ldr r1, =_edata
 80023f2:	490d      	ldr	r1, [pc, #52]	; (8002428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023f4:	4a0d      	ldr	r2, [pc, #52]	; (800242c <LoopForever+0xe>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f8:	e002      	b.n	8002400 <LoopCopyDataInit>

080023fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023fe:	3304      	adds	r3, #4

08002400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002404:	d3f9      	bcc.n	80023fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002406:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002408:	4c0a      	ldr	r4, [pc, #40]	; (8002434 <LoopForever+0x16>)
  movs r3, #0
 800240a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800240c:	e001      	b.n	8002412 <LoopFillZerobss>

0800240e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800240e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002410:	3204      	adds	r2, #4

08002412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002414:	d3fb      	bcc.n	800240e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002416:	f003 ff15 	bl	8006244 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800241a:	f7ff fc05 	bl	8001c28 <main>

0800241e <LoopForever>:

LoopForever:
    b LoopForever
 800241e:	e7fe      	b.n	800241e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002420:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002428:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800242c:	0800726c 	.word	0x0800726c
  ldr r2, =_sbss
 8002430:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002434:	200003c0 	.word	0x200003c0

08002438 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002438:	e7fe      	b.n	8002438 <ADC1_2_IRQHandler>
	...

0800243c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <HAL_Init+0x28>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a07      	ldr	r2, [pc, #28]	; (8002464 <HAL_Init+0x28>)
 8002446:	f043 0310 	orr.w	r3, r3, #16
 800244a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800244c:	2003      	movs	r0, #3
 800244e:	f000 f94f 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002452:	2000      	movs	r0, #0
 8002454:	f000 f808 	bl	8002468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002458:	f7ff fe80 	bl	800215c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40022000 	.word	0x40022000

08002468 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_InitTick+0x54>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_InitTick+0x58>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4619      	mov	r1, r3
 800247a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002482:	fbb2 f3f3 	udiv	r3, r2, r3
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f967 	bl	800275a <HAL_SYSTICK_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e00e      	b.n	80024b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b0f      	cmp	r3, #15
 800249a:	d80a      	bhi.n	80024b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800249c:	2200      	movs	r2, #0
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	f000 f92f 	bl	8002706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a8:	4a06      	ldr	r2, [pc, #24]	; (80024c4 <HAL_InitTick+0x5c>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e000      	b.n	80024b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000004 	.word	0x20000004
 80024c0:	2000000c 	.word	0x2000000c
 80024c4:	20000008 	.word	0x20000008

080024c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_IncTick+0x20>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_IncTick+0x24>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	4a04      	ldr	r2, [pc, #16]	; (80024ec <HAL_IncTick+0x24>)
 80024da:	6013      	str	r3, [r2, #0]
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	2000000c 	.word	0x2000000c
 80024ec:	20000270 	.word	0x20000270

080024f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <HAL_GetTick+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000270 	.word	0x20000270

08002508 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002510:	f7ff ffee 	bl	80024f0 <HAL_GetTick>
 8002514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d005      	beq.n	800252e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_Delay+0x44>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800252e:	bf00      	nop
 8002530:	f7ff ffde 	bl	80024f0 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	429a      	cmp	r2, r3
 800253e:	d8f7      	bhi.n	8002530 <HAL_Delay+0x28>
  {
  }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	2000000c 	.word	0x2000000c

08002550 <__NVIC_SetPriorityGrouping>:
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800256c:	4013      	ands	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800257c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	; (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_GetPriorityGrouping>:
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <__NVIC_GetPriorityGrouping+0x18>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	f003 0307 	and.w	r3, r3, #7
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_EnableIRQ>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	db0b      	blt.n	80025de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	4907      	ldr	r1, [pc, #28]	; (80025ec <__NVIC_EnableIRQ+0x38>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2001      	movs	r0, #1
 80025d6:	fa00 f202 	lsl.w	r2, r0, r2
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e100 	.word	0xe000e100

080025f0 <__NVIC_SetPriority>:
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	2b00      	cmp	r3, #0
 8002602:	db0a      	blt.n	800261a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	490c      	ldr	r1, [pc, #48]	; (800263c <__NVIC_SetPriority+0x4c>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	0112      	lsls	r2, r2, #4
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	440b      	add	r3, r1
 8002614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002618:	e00a      	b.n	8002630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4908      	ldr	r1, [pc, #32]	; (8002640 <__NVIC_SetPriority+0x50>)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	3b04      	subs	r3, #4
 8002628:	0112      	lsls	r2, r2, #4
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	440b      	add	r3, r1
 800262e:	761a      	strb	r2, [r3, #24]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000e100 	.word	0xe000e100
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <NVIC_EncodePriority>:
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	; 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f1c3 0307 	rsb	r3, r3, #7
 800265e:	2b04      	cmp	r3, #4
 8002660:	bf28      	it	cs
 8002662:	2304      	movcs	r3, #4
 8002664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3304      	adds	r3, #4
 800266a:	2b06      	cmp	r3, #6
 800266c:	d902      	bls.n	8002674 <NVIC_EncodePriority+0x30>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3b03      	subs	r3, #3
 8002672:	e000      	b.n	8002676 <NVIC_EncodePriority+0x32>
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	f04f 32ff 	mov.w	r2, #4294967295
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	401a      	ands	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800268c:	f04f 31ff 	mov.w	r1, #4294967295
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	43d9      	mvns	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	4313      	orrs	r3, r2
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3724      	adds	r7, #36	; 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026bc:	d301      	bcc.n	80026c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026be:	2301      	movs	r3, #1
 80026c0:	e00f      	b.n	80026e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c2:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <SysTick_Config+0x40>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ca:	210f      	movs	r1, #15
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f7ff ff8e 	bl	80025f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <SysTick_Config+0x40>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026da:	4b04      	ldr	r3, [pc, #16]	; (80026ec <SysTick_Config+0x40>)
 80026dc:	2207      	movs	r2, #7
 80026de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	e000e010 	.word	0xe000e010

080026f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ff29 	bl	8002550 <__NVIC_SetPriorityGrouping>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002718:	f7ff ff3e 	bl	8002598 <__NVIC_GetPriorityGrouping>
 800271c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff8e 	bl	8002644 <NVIC_EncodePriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff5d 	bl	80025f0 <__NVIC_SetPriority>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff31 	bl	80025b4 <__NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffa2 	bl	80026ac <SysTick_Config>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e02e      	b.n	80027e2 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800278a:	2b02      	cmp	r3, #2
 800278c:	d008      	beq.n	80027a0 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2204      	movs	r2, #4
 8002792:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e020      	b.n	80027e2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 020e 	bic.w	r2, r2, #14
 80027ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c8:	2101      	movs	r1, #1
 80027ca:	fa01 f202 	lsl.w	r2, r1, r2
 80027ce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002800:	2b02      	cmp	r3, #2
 8002802:	d005      	beq.n	8002810 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2204      	movs	r2, #4
 8002808:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	e027      	b.n	8002860 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 020e 	bic.w	r2, r2, #14
 800281e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0201 	bic.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002838:	2101      	movs	r1, #1
 800283a:	fa01 f202 	lsl.w	r2, r1, r2
 800283e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
    }
  }
  return status;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800287a:	e160      	b.n	8002b3e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2101      	movs	r1, #1
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	fa01 f303 	lsl.w	r3, r1, r3
 8002888:	4013      	ands	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8152 	beq.w	8002b38 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	2b01      	cmp	r3, #1
 800289e:	d005      	beq.n	80028ac <HAL_GPIO_Init+0x40>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d130      	bne.n	800290e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2203      	movs	r2, #3
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e2:	2201      	movs	r2, #1
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	f003 0201 	and.w	r2, r3, #1
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b03      	cmp	r3, #3
 8002918:	d017      	beq.n	800294a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	2203      	movs	r2, #3
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4013      	ands	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d123      	bne.n	800299e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	08da      	lsrs	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3208      	adds	r2, #8
 800295e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002962:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	220f      	movs	r2, #15
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	08da      	lsrs	r2, r3, #3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3208      	adds	r2, #8
 8002998:	6939      	ldr	r1, [r7, #16]
 800299a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	2203      	movs	r2, #3
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4013      	ands	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0203 	and.w	r2, r3, #3
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 80ac 	beq.w	8002b38 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e0:	4b5e      	ldr	r3, [pc, #376]	; (8002b5c <HAL_GPIO_Init+0x2f0>)
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	4a5d      	ldr	r2, [pc, #372]	; (8002b5c <HAL_GPIO_Init+0x2f0>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6193      	str	r3, [r2, #24]
 80029ec:	4b5b      	ldr	r3, [pc, #364]	; (8002b5c <HAL_GPIO_Init+0x2f0>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029f8:	4a59      	ldr	r2, [pc, #356]	; (8002b60 <HAL_GPIO_Init+0x2f4>)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	3302      	adds	r3, #2
 8002a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	220f      	movs	r2, #15
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a22:	d025      	beq.n	8002a70 <HAL_GPIO_Init+0x204>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a4f      	ldr	r2, [pc, #316]	; (8002b64 <HAL_GPIO_Init+0x2f8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d01f      	beq.n	8002a6c <HAL_GPIO_Init+0x200>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a4e      	ldr	r2, [pc, #312]	; (8002b68 <HAL_GPIO_Init+0x2fc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d019      	beq.n	8002a68 <HAL_GPIO_Init+0x1fc>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a4d      	ldr	r2, [pc, #308]	; (8002b6c <HAL_GPIO_Init+0x300>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d013      	beq.n	8002a64 <HAL_GPIO_Init+0x1f8>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a4c      	ldr	r2, [pc, #304]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d00d      	beq.n	8002a60 <HAL_GPIO_Init+0x1f4>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a4b      	ldr	r2, [pc, #300]	; (8002b74 <HAL_GPIO_Init+0x308>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d007      	beq.n	8002a5c <HAL_GPIO_Init+0x1f0>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a4a      	ldr	r2, [pc, #296]	; (8002b78 <HAL_GPIO_Init+0x30c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d101      	bne.n	8002a58 <HAL_GPIO_Init+0x1ec>
 8002a54:	2306      	movs	r3, #6
 8002a56:	e00c      	b.n	8002a72 <HAL_GPIO_Init+0x206>
 8002a58:	2307      	movs	r3, #7
 8002a5a:	e00a      	b.n	8002a72 <HAL_GPIO_Init+0x206>
 8002a5c:	2305      	movs	r3, #5
 8002a5e:	e008      	b.n	8002a72 <HAL_GPIO_Init+0x206>
 8002a60:	2304      	movs	r3, #4
 8002a62:	e006      	b.n	8002a72 <HAL_GPIO_Init+0x206>
 8002a64:	2303      	movs	r3, #3
 8002a66:	e004      	b.n	8002a72 <HAL_GPIO_Init+0x206>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e002      	b.n	8002a72 <HAL_GPIO_Init+0x206>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_GPIO_Init+0x206>
 8002a70:	2300      	movs	r3, #0
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	f002 0203 	and.w	r2, r2, #3
 8002a78:	0092      	lsls	r2, r2, #2
 8002a7a:	4093      	lsls	r3, r2
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a82:	4937      	ldr	r1, [pc, #220]	; (8002b60 <HAL_GPIO_Init+0x2f4>)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	3302      	adds	r3, #2
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a90:	4b3a      	ldr	r3, [pc, #232]	; (8002b7c <HAL_GPIO_Init+0x310>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ab4:	4a31      	ldr	r2, [pc, #196]	; (8002b7c <HAL_GPIO_Init+0x310>)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aba:	4b30      	ldr	r3, [pc, #192]	; (8002b7c <HAL_GPIO_Init+0x310>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ade:	4a27      	ldr	r2, [pc, #156]	; (8002b7c <HAL_GPIO_Init+0x310>)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ae4:	4b25      	ldr	r3, [pc, #148]	; (8002b7c <HAL_GPIO_Init+0x310>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4013      	ands	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b08:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <HAL_GPIO_Init+0x310>)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_GPIO_Init+0x310>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b32:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <HAL_GPIO_Init+0x310>)
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f47f ae97 	bne.w	800287c <HAL_GPIO_Init+0x10>
  }
}
 8002b4e:	bf00      	nop
 8002b50:	bf00      	nop
 8002b52:	371c      	adds	r7, #28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40010000 	.word	0x40010000
 8002b64:	48000400 	.word	0x48000400
 8002b68:	48000800 	.word	0x48000800
 8002b6c:	48000c00 	.word	0x48000c00
 8002b70:	48001000 	.word	0x48001000
 8002b74:	48001400 	.word	0x48001400
 8002b78:	48001800 	.word	0x48001800
 8002b7c:	40010400 	.word	0x40010400

08002b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	807b      	strh	r3, [r7, #2]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b90:	787b      	ldrb	r3, [r7, #1]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b9c:	e002      	b.n	8002ba4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bc0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d102      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f001 b83a 	b.w	8003c4a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 816f 	beq.w	8002eca <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bec:	4bb5      	ldr	r3, [pc, #724]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 030c 	and.w	r3, r3, #12
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d00c      	beq.n	8002c12 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bf8:	4bb2      	ldr	r3, [pc, #712]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d15c      	bne.n	8002cbe <HAL_RCC_OscConfig+0x10e>
 8002c04:	4baf      	ldr	r3, [pc, #700]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c10:	d155      	bne.n	8002cbe <HAL_RCC_OscConfig+0x10e>
 8002c12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c16:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c26:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	095b      	lsrs	r3, r3, #5
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d102      	bne.n	8002c44 <HAL_RCC_OscConfig+0x94>
 8002c3e:	4ba1      	ldr	r3, [pc, #644]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	e015      	b.n	8002c70 <HAL_RCC_OscConfig+0xc0>
 8002c44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c48:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002c58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c5c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c60:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c6c:	4b95      	ldr	r3, [pc, #596]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c74:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002c78:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002c7c:	fa92 f2a2 	rbit	r2, r2
 8002c80:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002c84:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c88:	fab2 f282 	clz	r2, r2
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	f042 0220 	orr.w	r2, r2, #32
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	f002 021f 	and.w	r2, r2, #31
 8002c98:	2101      	movs	r1, #1
 8002c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 8111 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x318>
 8002ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002caa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 8108 	bne.w	8002ec8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	f000 bfc6 	b.w	8003c4a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cce:	d106      	bne.n	8002cde <HAL_RCC_OscConfig+0x12e>
 8002cd0:	4b7c      	ldr	r3, [pc, #496]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a7b      	ldr	r2, [pc, #492]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	e036      	b.n	8002d4c <HAL_RCC_OscConfig+0x19c>
 8002cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x158>
 8002cee:	4b75      	ldr	r3, [pc, #468]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a74      	ldr	r2, [pc, #464]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b72      	ldr	r3, [pc, #456]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a71      	ldr	r2, [pc, #452]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002d00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e021      	b.n	8002d4c <HAL_RCC_OscConfig+0x19c>
 8002d08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x184>
 8002d1a:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a69      	ldr	r2, [pc, #420]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	4b67      	ldr	r3, [pc, #412]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a66      	ldr	r2, [pc, #408]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e00b      	b.n	8002d4c <HAL_RCC_OscConfig+0x19c>
 8002d34:	4b63      	ldr	r3, [pc, #396]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a62      	ldr	r2, [pc, #392]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b60      	ldr	r3, [pc, #384]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a5f      	ldr	r2, [pc, #380]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d059      	beq.n	8002e10 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7ff fbc8 	bl	80024f0 <HAL_GetTick>
 8002d60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d66:	f7ff fbc3 	bl	80024f0 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d902      	bls.n	8002d7c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	f000 bf67 	b.w	8003c4a <HAL_RCC_OscConfig+0x109a>
 8002d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d80:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002d88:	fa93 f3a3 	rbit	r3, r3
 8002d8c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002d90:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d102      	bne.n	8002dae <HAL_RCC_OscConfig+0x1fe>
 8002da8:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	e015      	b.n	8002dda <HAL_RCC_OscConfig+0x22a>
 8002dae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002db2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002dc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dc6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002dca:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002dd6:	4b3b      	ldr	r3, [pc, #236]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dde:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002de2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002de6:	fa92 f2a2 	rbit	r2, r2
 8002dea:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002dee:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002df2:	fab2 f282 	clz	r2, r2
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	f042 0220 	orr.w	r2, r2, #32
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	f002 021f 	and.w	r2, r2, #31
 8002e02:	2101      	movs	r1, #1
 8002e04:	fa01 f202 	lsl.w	r2, r1, r2
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0ab      	beq.n	8002d66 <HAL_RCC_OscConfig+0x1b6>
 8002e0e:	e05c      	b.n	8002eca <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7ff fb6e 	bl	80024f0 <HAL_GetTick>
 8002e14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e1a:	f7ff fb69 	bl	80024f0 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d902      	bls.n	8002e30 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	f000 bf0d 	b.w	8003c4a <HAL_RCC_OscConfig+0x109a>
 8002e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e34:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002e44:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d102      	bne.n	8002e62 <HAL_RCC_OscConfig+0x2b2>
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	e015      	b.n	8002e8e <HAL_RCC_OscConfig+0x2de>
 8002e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e66:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002e76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e7a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e7e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <HAL_RCC_OscConfig+0x314>)
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e92:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002e96:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002e9a:	fa92 f2a2 	rbit	r2, r2
 8002e9e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002ea2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002ea6:	fab2 f282 	clz	r2, r2
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	f042 0220 	orr.w	r2, r2, #32
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	f002 021f 	and.w	r2, r2, #31
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1ab      	bne.n	8002e1a <HAL_RCC_OscConfig+0x26a>
 8002ec2:	e002      	b.n	8002eca <HAL_RCC_OscConfig+0x31a>
 8002ec4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ece:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 817f 	beq.w	80031de <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ee0:	4ba7      	ldr	r3, [pc, #668]	; (8003180 <HAL_RCC_OscConfig+0x5d0>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00c      	beq.n	8002f06 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002eec:	4ba4      	ldr	r3, [pc, #656]	; (8003180 <HAL_RCC_OscConfig+0x5d0>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d173      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x430>
 8002ef8:	4ba1      	ldr	r3, [pc, #644]	; (8003180 <HAL_RCC_OscConfig+0x5d0>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f04:	d16c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x430>
 8002f06:	2302      	movs	r3, #2
 8002f08:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002f18:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1c:	fab3 f383 	clz	r3, r3
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d102      	bne.n	8002f36 <HAL_RCC_OscConfig+0x386>
 8002f30:	4b93      	ldr	r3, [pc, #588]	; (8003180 <HAL_RCC_OscConfig+0x5d0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	e013      	b.n	8002f5e <HAL_RCC_OscConfig+0x3ae>
 8002f36:	2302      	movs	r3, #2
 8002f38:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002f48:	2302      	movs	r3, #2
 8002f4a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002f4e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002f5a:	4b89      	ldr	r3, [pc, #548]	; (8003180 <HAL_RCC_OscConfig+0x5d0>)
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002f64:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002f68:	fa92 f2a2 	rbit	r2, r2
 8002f6c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002f70:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f74:	fab2 f282 	clz	r2, r2
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	f042 0220 	orr.w	r2, r2, #32
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	f002 021f 	and.w	r2, r2, #31
 8002f84:	2101      	movs	r1, #1
 8002f86:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x3f6>
 8002f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f94:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d002      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f000 be52 	b.w	8003c4a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa6:	4b76      	ldr	r3, [pc, #472]	; (8003180 <HAL_RCC_OscConfig+0x5d0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	21f8      	movs	r1, #248	; 0xf8
 8002fbc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002fc4:	fa91 f1a1 	rbit	r1, r1
 8002fc8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002fcc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002fd0:	fab1 f181 	clz	r1, r1
 8002fd4:	b2c9      	uxtb	r1, r1
 8002fd6:	408b      	lsls	r3, r1
 8002fd8:	4969      	ldr	r1, [pc, #420]	; (8003180 <HAL_RCC_OscConfig+0x5d0>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fde:	e0fe      	b.n	80031de <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fe0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8088 	beq.w	8003102 <HAL_RCC_OscConfig+0x552>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003004:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003008:	fab3 f383 	clz	r3, r3
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003012:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	461a      	mov	r2, r3
 800301a:	2301      	movs	r3, #1
 800301c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301e:	f7ff fa67 	bl	80024f0 <HAL_GetTick>
 8003022:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003026:	e00a      	b.n	800303e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003028:	f7ff fa62 	bl	80024f0 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d902      	bls.n	800303e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	f000 be06 	b.w	8003c4a <HAL_RCC_OscConfig+0x109a>
 800303e:	2302      	movs	r3, #2
 8003040:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003050:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d102      	bne.n	800306e <HAL_RCC_OscConfig+0x4be>
 8003068:	4b45      	ldr	r3, [pc, #276]	; (8003180 <HAL_RCC_OscConfig+0x5d0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	e013      	b.n	8003096 <HAL_RCC_OscConfig+0x4e6>
 800306e:	2302      	movs	r3, #2
 8003070:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003080:	2302      	movs	r3, #2
 8003082:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003086:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003092:	4b3b      	ldr	r3, [pc, #236]	; (8003180 <HAL_RCC_OscConfig+0x5d0>)
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	2202      	movs	r2, #2
 8003098:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800309c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80030a0:	fa92 f2a2 	rbit	r2, r2
 80030a4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80030a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80030ac:	fab2 f282 	clz	r2, r2
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	f042 0220 	orr.w	r2, r2, #32
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	f002 021f 	and.w	r2, r2, #31
 80030bc:	2101      	movs	r1, #1
 80030be:	fa01 f202 	lsl.w	r2, r1, r2
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0af      	beq.n	8003028 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c8:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <HAL_RCC_OscConfig+0x5d0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	21f8      	movs	r1, #248	; 0xf8
 80030de:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80030e6:	fa91 f1a1 	rbit	r1, r1
 80030ea:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80030ee:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80030f2:	fab1 f181 	clz	r1, r1
 80030f6:	b2c9      	uxtb	r1, r1
 80030f8:	408b      	lsls	r3, r1
 80030fa:	4921      	ldr	r1, [pc, #132]	; (8003180 <HAL_RCC_OscConfig+0x5d0>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]
 8003100:	e06d      	b.n	80031de <HAL_RCC_OscConfig+0x62e>
 8003102:	2301      	movs	r3, #1
 8003104:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800310c:	fa93 f3a3 	rbit	r3, r3
 8003110:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003114:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003122:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	461a      	mov	r2, r3
 800312a:	2300      	movs	r3, #0
 800312c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7ff f9df 	bl	80024f0 <HAL_GetTick>
 8003132:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003136:	e00a      	b.n	800314e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003138:	f7ff f9da 	bl	80024f0 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d902      	bls.n	800314e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	f000 bd7e 	b.w	8003c4a <HAL_RCC_OscConfig+0x109a>
 800314e:	2302      	movs	r3, #2
 8003150:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003160:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	b2db      	uxtb	r3, r3
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d105      	bne.n	8003184 <HAL_RCC_OscConfig+0x5d4>
 8003178:	4b01      	ldr	r3, [pc, #4]	; (8003180 <HAL_RCC_OscConfig+0x5d0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	e016      	b.n	80031ac <HAL_RCC_OscConfig+0x5fc>
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	2302      	movs	r3, #2
 8003186:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003196:	2302      	movs	r3, #2
 8003198:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800319c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80031a0:	fa93 f3a3 	rbit	r3, r3
 80031a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80031a8:	4bbf      	ldr	r3, [pc, #764]	; (80034a8 <HAL_RCC_OscConfig+0x8f8>)
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	2202      	movs	r2, #2
 80031ae:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80031b2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80031b6:	fa92 f2a2 	rbit	r2, r2
 80031ba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80031be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80031c2:	fab2 f282 	clz	r2, r2
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	f042 0220 	orr.w	r2, r2, #32
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	f002 021f 	and.w	r2, r2, #31
 80031d2:	2101      	movs	r1, #1
 80031d4:	fa01 f202 	lsl.w	r2, r1, r2
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1ac      	bne.n	8003138 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 8113 	beq.w	800341a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d07c      	beq.n	80032fe <HAL_RCC_OscConfig+0x74e>
 8003204:	2301      	movs	r3, #1
 8003206:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003216:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	4ba2      	ldr	r3, [pc, #648]	; (80034ac <HAL_RCC_OscConfig+0x8fc>)
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	461a      	mov	r2, r3
 800322a:	2301      	movs	r3, #1
 800322c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322e:	f7ff f95f 	bl	80024f0 <HAL_GetTick>
 8003232:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003236:	e00a      	b.n	800324e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003238:	f7ff f95a 	bl	80024f0 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d902      	bls.n	800324e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	f000 bcfe 	b.w	8003c4a <HAL_RCC_OscConfig+0x109a>
 800324e:	2302      	movs	r3, #2
 8003250:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003258:	fa93 f2a3 	rbit	r2, r3
 800325c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003260:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800326a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800326e:	2202      	movs	r2, #2
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003276:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	fa93 f2a3 	rbit	r2, r3
 8003280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800328e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003292:	2202      	movs	r2, #2
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	fa93 f2a3 	rbit	r2, r3
 80032a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80032ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ae:	4b7e      	ldr	r3, [pc, #504]	; (80034a8 <HAL_RCC_OscConfig+0x8f8>)
 80032b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80032ba:	2102      	movs	r1, #2
 80032bc:	6019      	str	r1, [r3, #0]
 80032be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	fa93 f1a3 	rbit	r1, r3
 80032cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80032d4:	6019      	str	r1, [r3, #0]
  return result;
 80032d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032da:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	fab3 f383 	clz	r3, r3
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	2101      	movs	r1, #1
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d09d      	beq.n	8003238 <HAL_RCC_OscConfig+0x688>
 80032fc:	e08d      	b.n	800341a <HAL_RCC_OscConfig+0x86a>
 80032fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003302:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800330e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	fa93 f2a3 	rbit	r2, r3
 8003318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800331c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003320:	601a      	str	r2, [r3, #0]
  return result;
 8003322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003326:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800332a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	b2db      	uxtb	r3, r3
 8003332:	461a      	mov	r2, r3
 8003334:	4b5d      	ldr	r3, [pc, #372]	; (80034ac <HAL_RCC_OscConfig+0x8fc>)
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	461a      	mov	r2, r3
 800333c:	2300      	movs	r3, #0
 800333e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003340:	f7ff f8d6 	bl	80024f0 <HAL_GetTick>
 8003344:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800334a:	f7ff f8d1 	bl	80024f0 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d902      	bls.n	8003360 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f000 bc75 	b.w	8003c4a <HAL_RCC_OscConfig+0x109a>
 8003360:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003364:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003368:	2202      	movs	r2, #2
 800336a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003370:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	fa93 f2a3 	rbit	r2, r3
 800337a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800337e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003388:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800338c:	2202      	movs	r2, #2
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003394:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	fa93 f2a3 	rbit	r2, r3
 800339e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033b0:	2202      	movs	r2, #2
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	fa93 f2a3 	rbit	r2, r3
 80033c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80033ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033cc:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <HAL_RCC_OscConfig+0x8f8>)
 80033ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80033d8:	2102      	movs	r1, #2
 80033da:	6019      	str	r1, [r3, #0]
 80033dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	fa93 f1a3 	rbit	r1, r3
 80033ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ee:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033f2:	6019      	str	r1, [r3, #0]
  return result;
 80033f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033f8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003408:	b2db      	uxtb	r3, r3
 800340a:	f003 031f 	and.w	r3, r3, #31
 800340e:	2101      	movs	r1, #1
 8003410:	fa01 f303 	lsl.w	r3, r1, r3
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d197      	bne.n	800334a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800341e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 81a5 	beq.w	800377a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003430:	2300      	movs	r3, #0
 8003432:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003436:	4b1c      	ldr	r3, [pc, #112]	; (80034a8 <HAL_RCC_OscConfig+0x8f8>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	4b19      	ldr	r3, [pc, #100]	; (80034a8 <HAL_RCC_OscConfig+0x8f8>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	4a18      	ldr	r2, [pc, #96]	; (80034a8 <HAL_RCC_OscConfig+0x8f8>)
 8003448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344c:	61d3      	str	r3, [r2, #28]
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <HAL_RCC_OscConfig+0x8f8>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003456:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800345a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003464:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003468:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <HAL_RCC_OscConfig+0x900>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d121      	bne.n	80034c0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <HAL_RCC_OscConfig+0x900>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a0b      	ldr	r2, [pc, #44]	; (80034b0 <HAL_RCC_OscConfig+0x900>)
 8003482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003486:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003488:	f7ff f832 	bl	80024f0 <HAL_GetTick>
 800348c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003490:	e010      	b.n	80034b4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003492:	f7ff f82d 	bl	80024f0 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	; 0x64
 80034a0:	d908      	bls.n	80034b4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e3d1      	b.n	8003c4a <HAL_RCC_OscConfig+0x109a>
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000
 80034ac:	10908120 	.word	0x10908120
 80034b0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b4:	4b8d      	ldr	r3, [pc, #564]	; (80036ec <HAL_RCC_OscConfig+0xb3c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0e8      	beq.n	8003492 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d106      	bne.n	80034de <HAL_RCC_OscConfig+0x92e>
 80034d0:	4b87      	ldr	r3, [pc, #540]	; (80036f0 <HAL_RCC_OscConfig+0xb40>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	4a86      	ldr	r2, [pc, #536]	; (80036f0 <HAL_RCC_OscConfig+0xb40>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6213      	str	r3, [r2, #32]
 80034dc:	e035      	b.n	800354a <HAL_RCC_OscConfig+0x99a>
 80034de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x958>
 80034ee:	4b80      	ldr	r3, [pc, #512]	; (80036f0 <HAL_RCC_OscConfig+0xb40>)
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	4a7f      	ldr	r2, [pc, #508]	; (80036f0 <HAL_RCC_OscConfig+0xb40>)
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	6213      	str	r3, [r2, #32]
 80034fa:	4b7d      	ldr	r3, [pc, #500]	; (80036f0 <HAL_RCC_OscConfig+0xb40>)
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	4a7c      	ldr	r2, [pc, #496]	; (80036f0 <HAL_RCC_OscConfig+0xb40>)
 8003500:	f023 0304 	bic.w	r3, r3, #4
 8003504:	6213      	str	r3, [r2, #32]
 8003506:	e020      	b.n	800354a <HAL_RCC_OscConfig+0x99a>
 8003508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800350c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b05      	cmp	r3, #5
 8003516:	d10c      	bne.n	8003532 <HAL_RCC_OscConfig+0x982>
 8003518:	4b75      	ldr	r3, [pc, #468]	; (80036f0 <HAL_RCC_OscConfig+0xb40>)
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	4a74      	ldr	r2, [pc, #464]	; (80036f0 <HAL_RCC_OscConfig+0xb40>)
 800351e:	f043 0304 	orr.w	r3, r3, #4
 8003522:	6213      	str	r3, [r2, #32]
 8003524:	4b72      	ldr	r3, [pc, #456]	; (80036f0 <HAL_RCC_OscConfig+0xb40>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4a71      	ldr	r2, [pc, #452]	; (80036f0 <HAL_RCC_OscConfig+0xb40>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6213      	str	r3, [r2, #32]
 8003530:	e00b      	b.n	800354a <HAL_RCC_OscConfig+0x99a>
 8003532:	4b6f      	ldr	r3, [pc, #444]	; (80036f0 <HAL_RCC_OscConfig+0xb40>)
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	4a6e      	ldr	r2, [pc, #440]	; (80036f0 <HAL_RCC_OscConfig+0xb40>)
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	6213      	str	r3, [r2, #32]
 800353e:	4b6c      	ldr	r3, [pc, #432]	; (80036f0 <HAL_RCC_OscConfig+0xb40>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	4a6b      	ldr	r2, [pc, #428]	; (80036f0 <HAL_RCC_OscConfig+0xb40>)
 8003544:	f023 0304 	bic.w	r3, r3, #4
 8003548:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800354a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800354e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 8081 	beq.w	800365e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355c:	f7fe ffc8 	bl	80024f0 <HAL_GetTick>
 8003560:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003564:	e00b      	b.n	800357e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003566:	f7fe ffc3 	bl	80024f0 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e365      	b.n	8003c4a <HAL_RCC_OscConfig+0x109a>
 800357e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003582:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003586:	2202      	movs	r2, #2
 8003588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800358e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	fa93 f2a3 	rbit	r2, r3
 8003598:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800359c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035a6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80035aa:	2202      	movs	r2, #2
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035b2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	fa93 f2a3 	rbit	r2, r3
 80035bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80035c4:	601a      	str	r2, [r3, #0]
  return result;
 80035c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ca:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80035ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d0:	fab3 f383 	clz	r3, r3
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f043 0302 	orr.w	r3, r3, #2
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d102      	bne.n	80035ea <HAL_RCC_OscConfig+0xa3a>
 80035e4:	4b42      	ldr	r3, [pc, #264]	; (80036f0 <HAL_RCC_OscConfig+0xb40>)
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	e013      	b.n	8003612 <HAL_RCC_OscConfig+0xa62>
 80035ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80035f2:	2202      	movs	r2, #2
 80035f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	fa93 f2a3 	rbit	r2, r3
 8003604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003608:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	4b38      	ldr	r3, [pc, #224]	; (80036f0 <HAL_RCC_OscConfig+0xb40>)
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003616:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800361a:	2102      	movs	r1, #2
 800361c:	6011      	str	r1, [r2, #0]
 800361e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003622:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	fa92 f1a2 	rbit	r1, r2
 800362c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003630:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003634:	6011      	str	r1, [r2, #0]
  return result;
 8003636:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800363a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	fab2 f282 	clz	r2, r2
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	f002 021f 	and.w	r2, r2, #31
 8003650:	2101      	movs	r1, #1
 8003652:	fa01 f202 	lsl.w	r2, r1, r2
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d084      	beq.n	8003566 <HAL_RCC_OscConfig+0x9b6>
 800365c:	e083      	b.n	8003766 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365e:	f7fe ff47 	bl	80024f0 <HAL_GetTick>
 8003662:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003666:	e00b      	b.n	8003680 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003668:	f7fe ff42 	bl	80024f0 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	f241 3288 	movw	r2, #5000	; 0x1388
 8003678:	4293      	cmp	r3, r2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e2e4      	b.n	8003c4a <HAL_RCC_OscConfig+0x109a>
 8003680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003684:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003688:	2202      	movs	r2, #2
 800368a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003690:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	fa93 f2a3 	rbit	r2, r3
 800369a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800369e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036a8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80036ac:	2202      	movs	r2, #2
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036b4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	fa93 f2a3 	rbit	r2, r3
 80036be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80036c6:	601a      	str	r2, [r3, #0]
  return result;
 80036c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036cc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80036d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f043 0302 	orr.w	r3, r3, #2
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d106      	bne.n	80036f4 <HAL_RCC_OscConfig+0xb44>
 80036e6:	4b02      	ldr	r3, [pc, #8]	; (80036f0 <HAL_RCC_OscConfig+0xb40>)
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	e017      	b.n	800371c <HAL_RCC_OscConfig+0xb6c>
 80036ec:	40007000 	.word	0x40007000
 80036f0:	40021000 	.word	0x40021000
 80036f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036f8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80036fc:	2202      	movs	r2, #2
 80036fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003704:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	fa93 f2a3 	rbit	r2, r3
 800370e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003712:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	4bb3      	ldr	r3, [pc, #716]	; (80039e8 <HAL_RCC_OscConfig+0xe38>)
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003720:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003724:	2102      	movs	r1, #2
 8003726:	6011      	str	r1, [r2, #0]
 8003728:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800372c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	fa92 f1a2 	rbit	r1, r2
 8003736:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800373a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800373e:	6011      	str	r1, [r2, #0]
  return result;
 8003740:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003744:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	fab2 f282 	clz	r2, r2
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	f002 021f 	and.w	r2, r2, #31
 800375a:	2101      	movs	r1, #1
 800375c:	fa01 f202 	lsl.w	r2, r1, r2
 8003760:	4013      	ands	r3, r2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d180      	bne.n	8003668 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003766:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800376a:	2b01      	cmp	r3, #1
 800376c:	d105      	bne.n	800377a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376e:	4b9e      	ldr	r3, [pc, #632]	; (80039e8 <HAL_RCC_OscConfig+0xe38>)
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	4a9d      	ldr	r2, [pc, #628]	; (80039e8 <HAL_RCC_OscConfig+0xe38>)
 8003774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003778:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800377a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800377e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 825e 	beq.w	8003c48 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800378c:	4b96      	ldr	r3, [pc, #600]	; (80039e8 <HAL_RCC_OscConfig+0xe38>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 030c 	and.w	r3, r3, #12
 8003794:	2b08      	cmp	r3, #8
 8003796:	f000 821f 	beq.w	8003bd8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800379a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800379e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	f040 8170 	bne.w	8003a8c <HAL_RCC_OscConfig+0xedc>
 80037ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037b0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80037b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037be:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	fa93 f2a3 	rbit	r2, r3
 80037c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037cc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80037d0:	601a      	str	r2, [r3, #0]
  return result;
 80037d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80037da:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037dc:	fab3 f383 	clz	r3, r3
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	461a      	mov	r2, r3
 80037ee:	2300      	movs	r3, #0
 80037f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f2:	f7fe fe7d 	bl	80024f0 <HAL_GetTick>
 80037f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fa:	e009      	b.n	8003810 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fe fe78 	bl	80024f0 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e21c      	b.n	8003c4a <HAL_RCC_OscConfig+0x109a>
 8003810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003814:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003818:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800381c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003822:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	fa93 f2a3 	rbit	r2, r3
 800382c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003830:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003834:	601a      	str	r2, [r3, #0]
  return result;
 8003836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800383a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800383e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003840:	fab3 f383 	clz	r3, r3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	b2db      	uxtb	r3, r3
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b01      	cmp	r3, #1
 8003852:	d102      	bne.n	800385a <HAL_RCC_OscConfig+0xcaa>
 8003854:	4b64      	ldr	r3, [pc, #400]	; (80039e8 <HAL_RCC_OscConfig+0xe38>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	e027      	b.n	80038aa <HAL_RCC_OscConfig+0xcfa>
 800385a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800385e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800386c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	fa93 f2a3 	rbit	r2, r3
 8003876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800387a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003884:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003892:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	fa93 f2a3 	rbit	r2, r3
 800389c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038a0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	4b50      	ldr	r3, [pc, #320]	; (80039e8 <HAL_RCC_OscConfig+0xe38>)
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038ae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80038b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038b6:	6011      	str	r1, [r2, #0]
 80038b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038bc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	fa92 f1a2 	rbit	r1, r2
 80038c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038ca:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80038ce:	6011      	str	r1, [r2, #0]
  return result;
 80038d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038d4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80038d8:	6812      	ldr	r2, [r2, #0]
 80038da:	fab2 f282 	clz	r2, r2
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	f042 0220 	orr.w	r2, r2, #32
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	f002 021f 	and.w	r2, r2, #31
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f202 	lsl.w	r2, r1, r2
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d182      	bne.n	80037fc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f6:	4b3c      	ldr	r3, [pc, #240]	; (80039e8 <HAL_RCC_OscConfig+0xe38>)
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	f023 020f 	bic.w	r2, r3, #15
 80038fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003902:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	4937      	ldr	r1, [pc, #220]	; (80039e8 <HAL_RCC_OscConfig+0xe38>)
 800390c:	4313      	orrs	r3, r2
 800390e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003910:	4b35      	ldr	r3, [pc, #212]	; (80039e8 <HAL_RCC_OscConfig+0xe38>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800391c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6a19      	ldr	r1, [r3, #32]
 8003924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003928:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	430b      	orrs	r3, r1
 8003932:	492d      	ldr	r1, [pc, #180]	; (80039e8 <HAL_RCC_OscConfig+0xe38>)
 8003934:	4313      	orrs	r3, r2
 8003936:	604b      	str	r3, [r1, #4]
 8003938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800393c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003940:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800394a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	fa93 f2a3 	rbit	r2, r3
 8003954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003958:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800395c:	601a      	str	r2, [r3, #0]
  return result;
 800395e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003962:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003966:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003968:	fab3 f383 	clz	r3, r3
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003972:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	461a      	mov	r2, r3
 800397a:	2301      	movs	r3, #1
 800397c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397e:	f7fe fdb7 	bl	80024f0 <HAL_GetTick>
 8003982:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003986:	e009      	b.n	800399c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003988:	f7fe fdb2 	bl	80024f0 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e156      	b.n	8003c4a <HAL_RCC_OscConfig+0x109a>
 800399c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80039a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ae:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	fa93 f2a3 	rbit	r2, r3
 80039b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039bc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80039c0:	601a      	str	r2, [r3, #0]
  return result;
 80039c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80039ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039cc:	fab3 f383 	clz	r3, r3
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d105      	bne.n	80039ec <HAL_RCC_OscConfig+0xe3c>
 80039e0:	4b01      	ldr	r3, [pc, #4]	; (80039e8 <HAL_RCC_OscConfig+0xe38>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	e02a      	b.n	8003a3c <HAL_RCC_OscConfig+0xe8c>
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80039f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039fe:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	fa93 f2a3 	rbit	r2, r3
 8003a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a0c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a16:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003a1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a24:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	fa93 f2a3 	rbit	r2, r3
 8003a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a32:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	4b86      	ldr	r3, [pc, #536]	; (8003c54 <HAL_RCC_OscConfig+0x10a4>)
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a40:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003a44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a48:	6011      	str	r1, [r2, #0]
 8003a4a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a4e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	fa92 f1a2 	rbit	r1, r2
 8003a58:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a5c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003a60:	6011      	str	r1, [r2, #0]
  return result;
 8003a62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a66:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	fab2 f282 	clz	r2, r2
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	f042 0220 	orr.w	r2, r2, #32
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	f002 021f 	and.w	r2, r2, #31
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f43f af7f 	beq.w	8003988 <HAL_RCC_OscConfig+0xdd8>
 8003a8a:	e0dd      	b.n	8003c48 <HAL_RCC_OscConfig+0x1098>
 8003a8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a90:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a9e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	fa93 f2a3 	rbit	r2, r3
 8003aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003ab0:	601a      	str	r2, [r3, #0]
  return result;
 8003ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ab6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003aba:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abc:	fab3 f383 	clz	r3, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ac6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	461a      	mov	r2, r3
 8003ace:	2300      	movs	r3, #0
 8003ad0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad2:	f7fe fd0d 	bl	80024f0 <HAL_GetTick>
 8003ad6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ada:	e009      	b.n	8003af0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003adc:	f7fe fd08 	bl	80024f0 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e0ac      	b.n	8003c4a <HAL_RCC_OscConfig+0x109a>
 8003af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003af4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003af8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003afc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b02:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	fa93 f2a3 	rbit	r2, r3
 8003b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b10:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b14:	601a      	str	r2, [r3, #0]
  return result;
 8003b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b1a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b20:	fab3 f383 	clz	r3, r3
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d102      	bne.n	8003b3a <HAL_RCC_OscConfig+0xf8a>
 8003b34:	4b47      	ldr	r3, [pc, #284]	; (8003c54 <HAL_RCC_OscConfig+0x10a4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	e027      	b.n	8003b8a <HAL_RCC_OscConfig+0xfda>
 8003b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b3e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003b42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b4c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	fa93 f2a3 	rbit	r2, r3
 8003b56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b5a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b64:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b72:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	fa93 f2a3 	rbit	r2, r3
 8003b7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b80:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	4b33      	ldr	r3, [pc, #204]	; (8003c54 <HAL_RCC_OscConfig+0x10a4>)
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b8e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b92:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b96:	6011      	str	r1, [r2, #0]
 8003b98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b9c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	fa92 f1a2 	rbit	r1, r2
 8003ba6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003baa:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003bae:	6011      	str	r1, [r2, #0]
  return result;
 8003bb0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bb4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	fab2 f282 	clz	r2, r2
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	f042 0220 	orr.w	r2, r2, #32
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	f002 021f 	and.w	r2, r2, #31
 8003bca:	2101      	movs	r1, #1
 8003bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d182      	bne.n	8003adc <HAL_RCC_OscConfig+0xf2c>
 8003bd6:	e037      	b.n	8003c48 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bdc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e02e      	b.n	8003c4a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bec:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <HAL_RCC_OscConfig+0x10a4>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003bf4:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <HAL_RCC_OscConfig+0x10a4>)
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bfc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c00:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003c04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d117      	bne.n	8003c44 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003c14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c18:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d10b      	bne.n	8003c44 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003c2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c30:	f003 020f 	and.w	r2, r3, #15
 8003c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40021000 	.word	0x40021000

08003c58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b09e      	sub	sp, #120	; 0x78
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e162      	b.n	8003f36 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c70:	4b90      	ldr	r3, [pc, #576]	; (8003eb4 <HAL_RCC_ClockConfig+0x25c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d910      	bls.n	8003ca0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7e:	4b8d      	ldr	r3, [pc, #564]	; (8003eb4 <HAL_RCC_ClockConfig+0x25c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f023 0207 	bic.w	r2, r3, #7
 8003c86:	498b      	ldr	r1, [pc, #556]	; (8003eb4 <HAL_RCC_ClockConfig+0x25c>)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8e:	4b89      	ldr	r3, [pc, #548]	; (8003eb4 <HAL_RCC_ClockConfig+0x25c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e14a      	b.n	8003f36 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cac:	4b82      	ldr	r3, [pc, #520]	; (8003eb8 <HAL_RCC_ClockConfig+0x260>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	497f      	ldr	r1, [pc, #508]	; (8003eb8 <HAL_RCC_ClockConfig+0x260>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 80dc 	beq.w	8003e84 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d13c      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xf6>
 8003cd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cd8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cdc:	fa93 f3a3 	rbit	r3, r3
 8003ce0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce4:	fab3 f383 	clz	r3, r3
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d102      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xa6>
 8003cf8:	4b6f      	ldr	r3, [pc, #444]	; (8003eb8 <HAL_RCC_ClockConfig+0x260>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	e00f      	b.n	8003d1e <HAL_RCC_ClockConfig+0xc6>
 8003cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d06:	fa93 f3a3 	rbit	r3, r3
 8003d0a:	667b      	str	r3, [r7, #100]	; 0x64
 8003d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d10:	663b      	str	r3, [r7, #96]	; 0x60
 8003d12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d14:	fa93 f3a3 	rbit	r3, r3
 8003d18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d1a:	4b67      	ldr	r3, [pc, #412]	; (8003eb8 <HAL_RCC_ClockConfig+0x260>)
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d22:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d26:	fa92 f2a2 	rbit	r2, r2
 8003d2a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003d2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d2e:	fab2 f282 	clz	r2, r2
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	f042 0220 	orr.w	r2, r2, #32
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	f002 021f 	and.w	r2, r2, #31
 8003d3e:	2101      	movs	r1, #1
 8003d40:	fa01 f202 	lsl.w	r2, r1, r2
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d17b      	bne.n	8003e42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e0f3      	b.n	8003f36 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d13c      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0x178>
 8003d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d5e:	fa93 f3a3 	rbit	r3, r3
 8003d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d66:	fab3 f383 	clz	r3, r3
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d102      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x128>
 8003d7a:	4b4f      	ldr	r3, [pc, #316]	; (8003eb8 <HAL_RCC_ClockConfig+0x260>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	e00f      	b.n	8003da0 <HAL_RCC_ClockConfig+0x148>
 8003d80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d88:	fa93 f3a3 	rbit	r3, r3
 8003d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d92:	643b      	str	r3, [r7, #64]	; 0x40
 8003d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d96:	fa93 f3a3 	rbit	r3, r3
 8003d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d9c:	4b46      	ldr	r3, [pc, #280]	; (8003eb8 <HAL_RCC_ClockConfig+0x260>)
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003da4:	63ba      	str	r2, [r7, #56]	; 0x38
 8003da6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003da8:	fa92 f2a2 	rbit	r2, r2
 8003dac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003db0:	fab2 f282 	clz	r2, r2
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	f042 0220 	orr.w	r2, r2, #32
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	f002 021f 	and.w	r2, r2, #31
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d13a      	bne.n	8003e42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0b2      	b.n	8003f36 <HAL_RCC_ClockConfig+0x2de>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	fa93 f3a3 	rbit	r3, r3
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dde:	fab3 f383 	clz	r3, r3
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d102      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x1a0>
 8003df2:	4b31      	ldr	r3, [pc, #196]	; (8003eb8 <HAL_RCC_ClockConfig+0x260>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	e00d      	b.n	8003e14 <HAL_RCC_ClockConfig+0x1bc>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
 8003e04:	2302      	movs	r3, #2
 8003e06:	623b      	str	r3, [r7, #32]
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	fa93 f3a3 	rbit	r3, r3
 8003e0e:	61fb      	str	r3, [r7, #28]
 8003e10:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <HAL_RCC_ClockConfig+0x260>)
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	2202      	movs	r2, #2
 8003e16:	61ba      	str	r2, [r7, #24]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	fa92 f2a2 	rbit	r2, r2
 8003e1e:	617a      	str	r2, [r7, #20]
  return result;
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	fab2 f282 	clz	r2, r2
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	f042 0220 	orr.w	r2, r2, #32
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	f002 021f 	and.w	r2, r2, #31
 8003e32:	2101      	movs	r1, #1
 8003e34:	fa01 f202 	lsl.w	r2, r1, r2
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e079      	b.n	8003f36 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e42:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <HAL_RCC_ClockConfig+0x260>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f023 0203 	bic.w	r2, r3, #3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	491a      	ldr	r1, [pc, #104]	; (8003eb8 <HAL_RCC_ClockConfig+0x260>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e54:	f7fe fb4c 	bl	80024f0 <HAL_GetTick>
 8003e58:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5a:	e00a      	b.n	8003e72 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e5c:	f7fe fb48 	bl	80024f0 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e061      	b.n	8003f36 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e72:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <HAL_RCC_ClockConfig+0x260>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f003 020c 	and.w	r2, r3, #12
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d1eb      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <HAL_RCC_ClockConfig+0x25c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d214      	bcs.n	8003ebc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e92:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <HAL_RCC_ClockConfig+0x25c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f023 0207 	bic.w	r2, r3, #7
 8003e9a:	4906      	ldr	r1, [pc, #24]	; (8003eb4 <HAL_RCC_ClockConfig+0x25c>)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea2:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <HAL_RCC_ClockConfig+0x25c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e040      	b.n	8003f36 <HAL_RCC_ClockConfig+0x2de>
 8003eb4:	40022000 	.word	0x40022000
 8003eb8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec8:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <HAL_RCC_ClockConfig+0x2e8>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	491a      	ldr	r1, [pc, #104]	; (8003f40 <HAL_RCC_ClockConfig+0x2e8>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ee6:	4b16      	ldr	r3, [pc, #88]	; (8003f40 <HAL_RCC_ClockConfig+0x2e8>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4912      	ldr	r1, [pc, #72]	; (8003f40 <HAL_RCC_ClockConfig+0x2e8>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003efa:	f000 f829 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 8003efe:	4601      	mov	r1, r0
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <HAL_RCC_ClockConfig+0x2e8>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f08:	22f0      	movs	r2, #240	; 0xf0
 8003f0a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	fa92 f2a2 	rbit	r2, r2
 8003f12:	60fa      	str	r2, [r7, #12]
  return result;
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	fab2 f282 	clz	r2, r2
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	40d3      	lsrs	r3, r2
 8003f1e:	4a09      	ldr	r2, [pc, #36]	; (8003f44 <HAL_RCC_ClockConfig+0x2ec>)
 8003f20:	5cd3      	ldrb	r3, [r2, r3]
 8003f22:	fa21 f303 	lsr.w	r3, r1, r3
 8003f26:	4a08      	ldr	r2, [pc, #32]	; (8003f48 <HAL_RCC_ClockConfig+0x2f0>)
 8003f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003f2a:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <HAL_RCC_ClockConfig+0x2f4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fe fa9a 	bl	8002468 <HAL_InitTick>
  
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3778      	adds	r7, #120	; 0x78
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40021000 	.word	0x40021000
 8003f44:	080070f8 	.word	0x080070f8
 8003f48:	20000004 	.word	0x20000004
 8003f4c:	20000008 	.word	0x20000008

08003f50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	2300      	movs	r3, #0
 8003f64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003f6a:	4b1f      	ldr	r3, [pc, #124]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d002      	beq.n	8003f80 <HAL_RCC_GetSysClockFreq+0x30>
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d003      	beq.n	8003f86 <HAL_RCC_GetSysClockFreq+0x36>
 8003f7e:	e029      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f80:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f82:	613b      	str	r3, [r7, #16]
      break;
 8003f84:	e029      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	0c9b      	lsrs	r3, r3, #18
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	4a18      	ldr	r2, [pc, #96]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f90:	5cd3      	ldrb	r3, [r2, r3]
 8003f92:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003f94:	4b14      	ldr	r3, [pc, #80]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	4a15      	ldr	r2, [pc, #84]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f9e:	5cd3      	ldrb	r3, [r2, r3]
 8003fa0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003fac:	4a0f      	ldr	r2, [pc, #60]	; (8003fec <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	e007      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003fbe:	4a0b      	ldr	r2, [pc, #44]	; (8003fec <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	fb02 f303 	mul.w	r3, r2, r3
 8003fcc:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	613b      	str	r3, [r7, #16]
      break;
 8003fd2:	e002      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fd6:	613b      	str	r3, [r7, #16]
      break;
 8003fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fda:	693b      	ldr	r3, [r7, #16]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	007a1200 	.word	0x007a1200
 8003ff0:	08007110 	.word	0x08007110
 8003ff4:	08007120 	.word	0x08007120

08003ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ffc:	4b03      	ldr	r3, [pc, #12]	; (800400c <HAL_RCC_GetHCLKFreq+0x14>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
}
 8004000:	4618      	mov	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000004 	.word	0x20000004

08004010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004016:	f7ff ffef 	bl	8003ff8 <HAL_RCC_GetHCLKFreq>
 800401a:	4601      	mov	r1, r0
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004024:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004028:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	fa92 f2a2 	rbit	r2, r2
 8004030:	603a      	str	r2, [r7, #0]
  return result;
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	fab2 f282 	clz	r2, r2
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	40d3      	lsrs	r3, r2
 800403c:	4a04      	ldr	r2, [pc, #16]	; (8004050 <HAL_RCC_GetPCLK1Freq+0x40>)
 800403e:	5cd3      	ldrb	r3, [r2, r3]
 8004040:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40021000 	.word	0x40021000
 8004050:	08007108 	.word	0x08007108

08004054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800405a:	f7ff ffcd 	bl	8003ff8 <HAL_RCC_GetHCLKFreq>
 800405e:	4601      	mov	r1, r0
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004068:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800406c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	fa92 f2a2 	rbit	r2, r2
 8004074:	603a      	str	r2, [r7, #0]
  return result;
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	fab2 f282 	clz	r2, r2
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	40d3      	lsrs	r3, r2
 8004080:	4a04      	ldr	r2, [pc, #16]	; (8004094 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004082:	5cd3      	ldrb	r3, [r2, r3]
 8004084:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40021000 	.word	0x40021000
 8004094:	08007108 	.word	0x08007108

08004098 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b092      	sub	sp, #72	; 0x48
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80040a8:	2300      	movs	r3, #0
 80040aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 80d4 	beq.w	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040bc:	4b4e      	ldr	r3, [pc, #312]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10e      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c8:	4b4b      	ldr	r3, [pc, #300]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	4a4a      	ldr	r2, [pc, #296]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d2:	61d3      	str	r3, [r2, #28]
 80040d4:	4b48      	ldr	r3, [pc, #288]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e0:	2301      	movs	r3, #1
 80040e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e6:	4b45      	ldr	r3, [pc, #276]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d118      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f2:	4b42      	ldr	r3, [pc, #264]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a41      	ldr	r2, [pc, #260]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fe:	f7fe f9f7 	bl	80024f0 <HAL_GetTick>
 8004102:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004104:	e008      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004106:	f7fe f9f3 	bl	80024f0 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b64      	cmp	r3, #100	; 0x64
 8004112:	d901      	bls.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e1d6      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004118:	4b38      	ldr	r3, [pc, #224]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f0      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004124:	4b34      	ldr	r3, [pc, #208]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800412e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8084 	beq.w	800423e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004140:	429a      	cmp	r2, r3
 8004142:	d07c      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004144:	4b2c      	ldr	r3, [pc, #176]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800414e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004152:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	fa93 f3a3 	rbit	r3, r3
 800415a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800415c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	4b26      	ldr	r3, [pc, #152]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	461a      	mov	r2, r3
 800416e:	2301      	movs	r3, #1
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004176:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	fa93 f3a3 	rbit	r3, r3
 800417e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004182:	fab3 f383 	clz	r3, r3
 8004186:	b2db      	uxtb	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	461a      	mov	r2, r3
 8004192:	2300      	movs	r3, #0
 8004194:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004196:	4a18      	ldr	r2, [pc, #96]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800419c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d04b      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a6:	f7fe f9a3 	bl	80024f0 <HAL_GetTick>
 80041aa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ac:	e00a      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ae:	f7fe f99f 	bl	80024f0 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041bc:	4293      	cmp	r3, r2
 80041be:	d901      	bls.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e180      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80041c4:	2302      	movs	r3, #2
 80041c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ca:	fa93 f3a3 	rbit	r3, r3
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
 80041d0:	2302      	movs	r3, #2
 80041d2:	623b      	str	r3, [r7, #32]
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	fa93 f3a3 	rbit	r3, r3
 80041da:	61fb      	str	r3, [r7, #28]
  return result;
 80041dc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041de:	fab3 f383 	clz	r3, r3
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	f043 0302 	orr.w	r3, r3, #2
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d108      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80041f2:	4b01      	ldr	r3, [pc, #4]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	e00d      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80041f8:	40021000 	.word	0x40021000
 80041fc:	40007000 	.word	0x40007000
 8004200:	10908100 	.word	0x10908100
 8004204:	2302      	movs	r3, #2
 8004206:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	fa93 f3a3 	rbit	r3, r3
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	4b9a      	ldr	r3, [pc, #616]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	2202      	movs	r2, #2
 8004216:	613a      	str	r2, [r7, #16]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	fa92 f2a2 	rbit	r2, r2
 800421e:	60fa      	str	r2, [r7, #12]
  return result;
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	fab2 f282 	clz	r2, r2
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	f002 021f 	and.w	r2, r2, #31
 8004232:	2101      	movs	r1, #1
 8004234:	fa01 f202 	lsl.w	r2, r1, r2
 8004238:	4013      	ands	r3, r2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0b7      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800423e:	4b8f      	ldr	r3, [pc, #572]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	498c      	ldr	r1, [pc, #560]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800424c:	4313      	orrs	r3, r2
 800424e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004250:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004254:	2b01      	cmp	r3, #1
 8004256:	d105      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004258:	4b88      	ldr	r3, [pc, #544]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	4a87      	ldr	r2, [pc, #540]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800425e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004262:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d008      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004270:	4b82      	ldr	r3, [pc, #520]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	f023 0203 	bic.w	r2, r3, #3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	497f      	ldr	r1, [pc, #508]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800427e:	4313      	orrs	r3, r2
 8004280:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800428e:	4b7b      	ldr	r3, [pc, #492]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	4978      	ldr	r1, [pc, #480]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800429c:	4313      	orrs	r3, r2
 800429e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d008      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042ac:	4b73      	ldr	r3, [pc, #460]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	4970      	ldr	r1, [pc, #448]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042ca:	4b6c      	ldr	r3, [pc, #432]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	f023 0210 	bic.w	r2, r3, #16
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	4969      	ldr	r1, [pc, #420]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80042e8:	4b64      	ldr	r3, [pc, #400]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f4:	4961      	ldr	r1, [pc, #388]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004306:	4b5d      	ldr	r3, [pc, #372]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	f023 0220 	bic.w	r2, r3, #32
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	495a      	ldr	r1, [pc, #360]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004314:	4313      	orrs	r3, r2
 8004316:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d008      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004324:	4b55      	ldr	r3, [pc, #340]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	4952      	ldr	r1, [pc, #328]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004332:	4313      	orrs	r3, r2
 8004334:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004342:	4b4e      	ldr	r3, [pc, #312]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	494b      	ldr	r1, [pc, #300]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004350:	4313      	orrs	r3, r2
 8004352:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004360:	4b46      	ldr	r3, [pc, #280]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	4943      	ldr	r1, [pc, #268]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800436e:	4313      	orrs	r3, r2
 8004370:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800437a:	2b00      	cmp	r3, #0
 800437c:	d008      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800437e:	4b3f      	ldr	r3, [pc, #252]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	493c      	ldr	r1, [pc, #240]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800438c:	4313      	orrs	r3, r2
 800438e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800439c:	4b37      	ldr	r3, [pc, #220]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a8:	4934      	ldr	r1, [pc, #208]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80043ba:	4b30      	ldr	r3, [pc, #192]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043be:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	492d      	ldr	r1, [pc, #180]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80043d8:	4b28      	ldr	r3, [pc, #160]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e4:	4925      	ldr	r1, [pc, #148]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80043f6:	4b21      	ldr	r3, [pc, #132]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	491e      	ldr	r1, [pc, #120]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004404:	4313      	orrs	r3, r2
 8004406:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004414:	4b19      	ldr	r3, [pc, #100]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004418:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004420:	4916      	ldr	r1, [pc, #88]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004422:	4313      	orrs	r3, r2
 8004424:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004432:	4b12      	ldr	r3, [pc, #72]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443e:	490f      	ldr	r1, [pc, #60]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004440:	4313      	orrs	r3, r2
 8004442:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004454:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445c:	4907      	ldr	r1, [pc, #28]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800445e:	4313      	orrs	r3, r2
 8004460:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00c      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800446e:	4b03      	ldr	r3, [pc, #12]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	e002      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800447a:	bf00      	nop
 800447c:	40021000 	.word	0x40021000
 8004480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004482:	4913      	ldr	r1, [pc, #76]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004484:	4313      	orrs	r3, r2
 8004486:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a0:	490b      	ldr	r1, [pc, #44]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044be:	4904      	ldr	r1, [pc, #16]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3748      	adds	r7, #72	; 0x48
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40021000 	.word	0x40021000

080044d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e040      	b.n	8004568 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fd fe54 	bl	80021a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2224      	movs	r2, #36	; 0x24
 8004500:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0201 	bic.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fdc6 	bl	80050ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fbef 	bl	8004d04 <UART_SetConfig>
 8004526:	4603      	mov	r3, r0
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e01b      	b.n	8004568 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800453e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800454e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0201 	orr.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fe45 	bl	80051f0 <UART_CheckIdleState>
 8004566:	4603      	mov	r3, r0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	; 0x28
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004584:	2b20      	cmp	r3, #32
 8004586:	d178      	bne.n	800467a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_UART_Transmit+0x24>
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e071      	b.n	800467c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2221      	movs	r2, #33	; 0x21
 80045a4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045a6:	f7fd ffa3 	bl	80024f0 <HAL_GetTick>
 80045aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	88fa      	ldrh	r2, [r7, #6]
 80045b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	88fa      	ldrh	r2, [r7, #6]
 80045b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c4:	d108      	bne.n	80045d8 <HAL_UART_Transmit+0x68>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d104      	bne.n	80045d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	61bb      	str	r3, [r7, #24]
 80045d6:	e003      	b.n	80045e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045e0:	e030      	b.n	8004644 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2200      	movs	r2, #0
 80045ea:	2180      	movs	r1, #128	; 0x80
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 fea7 	bl	8005340 <UART_WaitOnFlagUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d004      	beq.n	8004602 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2220      	movs	r2, #32
 80045fc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e03c      	b.n	800467c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10b      	bne.n	8004620 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	881a      	ldrh	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004614:	b292      	uxth	r2, r2
 8004616:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	3302      	adds	r3, #2
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	e008      	b.n	8004632 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	781a      	ldrb	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	b292      	uxth	r2, r2
 800462a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	3301      	adds	r3, #1
 8004630:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1c8      	bne.n	80045e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2200      	movs	r2, #0
 8004658:	2140      	movs	r1, #64	; 0x40
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 fe70 	bl	8005340 <UART_WaitOnFlagUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d004      	beq.n	8004670 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e005      	b.n	800467c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	e000      	b.n	800467c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800467a:	2302      	movs	r3, #2
  }
}
 800467c:	4618      	mov	r0, r3
 800467e:	3720      	adds	r7, #32
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	; 0x28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004698:	2b20      	cmp	r3, #32
 800469a:	d132      	bne.n	8004702 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_UART_Receive_IT+0x24>
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e02b      	b.n	8004704 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d018      	beq.n	80046f2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	613b      	str	r3, [r7, #16]
   return(result);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	623b      	str	r3, [r7, #32]
 80046e0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	69f9      	ldr	r1, [r7, #28]
 80046e4:	6a3a      	ldr	r2, [r7, #32]
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e6      	bne.n	80046c0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	461a      	mov	r2, r3
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 fe8f 	bl	800541c <UART_Start_Receive_IT>
 80046fe:	4603      	mov	r3, r0
 8004700:	e000      	b.n	8004704 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004702:	2302      	movs	r3, #2
  }
}
 8004704:	4618      	mov	r0, r3
 8004706:	3728      	adds	r7, #40	; 0x28
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b0ba      	sub	sp, #232	; 0xe8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004732:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004736:	f640 030f 	movw	r3, #2063	; 0x80f
 800473a:	4013      	ands	r3, r2
 800473c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004740:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004744:	2b00      	cmp	r3, #0
 8004746:	d115      	bne.n	8004774 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00f      	beq.n	8004774 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d009      	beq.n	8004774 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 82ab 	beq.w	8004cc0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	4798      	blx	r3
      }
      return;
 8004772:	e2a5      	b.n	8004cc0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004774:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8117 	beq.w	80049ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800477e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800478a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800478e:	4b85      	ldr	r3, [pc, #532]	; (80049a4 <HAL_UART_IRQHandler+0x298>)
 8004790:	4013      	ands	r3, r2
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 810a 	beq.w	80049ac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d011      	beq.n	80047c8 <HAL_UART_IRQHandler+0xbc>
 80047a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00b      	beq.n	80047c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2201      	movs	r2, #1
 80047b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047be:	f043 0201 	orr.w	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d011      	beq.n	80047f8 <HAL_UART_IRQHandler+0xec>
 80047d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00b      	beq.n	80047f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2202      	movs	r2, #2
 80047e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ee:	f043 0204 	orr.w	r2, r3, #4
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d011      	beq.n	8004828 <HAL_UART_IRQHandler+0x11c>
 8004804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00b      	beq.n	8004828 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2204      	movs	r2, #4
 8004816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800481e:	f043 0202 	orr.w	r2, r3, #2
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d017      	beq.n	8004864 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d105      	bne.n	800484c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004844:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00b      	beq.n	8004864 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2208      	movs	r2, #8
 8004852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800485a:	f043 0208 	orr.w	r2, r3, #8
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800486c:	2b00      	cmp	r3, #0
 800486e:	d012      	beq.n	8004896 <HAL_UART_IRQHandler+0x18a>
 8004870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004874:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00c      	beq.n	8004896 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004884:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488c:	f043 0220 	orr.w	r2, r3, #32
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 8211 	beq.w	8004cc4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80048a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b2:	f003 0320 	and.w	r3, r3, #32
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d007      	beq.n	80048ca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048de:	2b40      	cmp	r3, #64	; 0x40
 80048e0:	d005      	beq.n	80048ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d04f      	beq.n	800498e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fe5a 	bl	80055a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fe:	2b40      	cmp	r3, #64	; 0x40
 8004900:	d141      	bne.n	8004986 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3308      	adds	r3, #8
 8004908:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004918:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800491c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004920:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3308      	adds	r3, #8
 800492a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800492e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004932:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800493a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1d9      	bne.n	8004902 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004952:	2b00      	cmp	r3, #0
 8004954:	d013      	beq.n	800497e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800495a:	4a13      	ldr	r2, [pc, #76]	; (80049a8 <HAL_UART_IRQHandler+0x29c>)
 800495c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004962:	4618      	mov	r0, r3
 8004964:	f7fd ff43 	bl	80027ee <HAL_DMA_Abort_IT>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d017      	beq.n	800499e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004978:	4610      	mov	r0, r2
 800497a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497c:	e00f      	b.n	800499e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fc fcd0 	bl	8001324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004984:	e00b      	b.n	800499e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fc fccc 	bl	8001324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498c:	e007      	b.n	800499e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fc fcc8 	bl	8001324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800499c:	e192      	b.n	8004cc4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800499e:	bf00      	nop
    return;
 80049a0:	e190      	b.n	8004cc4 <HAL_UART_IRQHandler+0x5b8>
 80049a2:	bf00      	nop
 80049a4:	04000120 	.word	0x04000120
 80049a8:	08005671 	.word	0x08005671

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	f040 814b 	bne.w	8004c4c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ba:	f003 0310 	and.w	r3, r3, #16
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 8144 	beq.w	8004c4c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c8:	f003 0310 	and.w	r3, r3, #16
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 813d 	beq.w	8004c4c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2210      	movs	r2, #16
 80049d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b40      	cmp	r3, #64	; 0x40
 80049e6:	f040 80b5 	bne.w	8004b54 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 8164 	beq.w	8004cc8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	f080 815c 	bcs.w	8004cc8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	f000 8086 	beq.w	8004b32 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a32:	e853 3f00 	ldrex	r3, [r3]
 8004a36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a54:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1da      	bne.n	8004a26 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3308      	adds	r3, #8
 8004a76:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a82:	f023 0301 	bic.w	r3, r3, #1
 8004a86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3308      	adds	r3, #8
 8004a90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a94:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a98:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e1      	bne.n	8004a70 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3308      	adds	r3, #8
 8004acc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ad0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ad2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ad6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ad8:	e841 2300 	strex	r3, r2, [r1]
 8004adc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e3      	bne.n	8004aac <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004afa:	e853 3f00 	ldrex	r3, [r3]
 8004afe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b02:	f023 0310 	bic.w	r3, r3, #16
 8004b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b14:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b16:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b1c:	e841 2300 	strex	r3, r2, [r1]
 8004b20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e4      	bne.n	8004af2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fd fe20 	bl	8002772 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2202      	movs	r2, #2
 8004b36:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f8cd 	bl	8004cec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b52:	e0b9      	b.n	8004cc8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80ab 	beq.w	8004ccc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004b76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 80a6 	beq.w	8004ccc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ba4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ba8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e4      	bne.n	8004b80 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3308      	adds	r3, #8
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bda:	633a      	str	r2, [r7, #48]	; 0x30
 8004bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be2:	e841 2300 	strex	r3, r2, [r1]
 8004be6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1e3      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0310 	bic.w	r3, r3, #16
 8004c16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c24:	61fb      	str	r3, [r7, #28]
 8004c26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	69b9      	ldr	r1, [r7, #24]
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	617b      	str	r3, [r7, #20]
   return(result);
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e4      	bne.n	8004c02 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c42:	4619      	mov	r1, r3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f851 	bl	8004cec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c4a:	e03f      	b.n	8004ccc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00e      	beq.n	8004c76 <HAL_UART_IRQHandler+0x56a>
 8004c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fee6 	bl	8005a40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c74:	e02d      	b.n	8004cd2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00e      	beq.n	8004ca0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d008      	beq.n	8004ca0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01c      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	4798      	blx	r3
    }
    return;
 8004c9e:	e017      	b.n	8004cd0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d012      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x5c6>
 8004cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00c      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fcef 	bl	800569c <UART_EndTransmit_IT>
    return;
 8004cbe:	e008      	b.n	8004cd2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004cc0:	bf00      	nop
 8004cc2:	e006      	b.n	8004cd2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004cc4:	bf00      	nop
 8004cc6:	e004      	b.n	8004cd2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004cc8:	bf00      	nop
 8004cca:	e002      	b.n	8004cd2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ccc:	bf00      	nop
 8004cce:	e000      	b.n	8004cd2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004cd0:	bf00      	nop
  }

}
 8004cd2:	37e8      	adds	r7, #232	; 0xe8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4b92      	ldr	r3, [pc, #584]	; (8004f78 <UART_SetConfig+0x274>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6812      	ldr	r2, [r2, #0]
 8004d36:	6979      	ldr	r1, [r7, #20]
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a80      	ldr	r2, [pc, #512]	; (8004f7c <UART_SetConfig+0x278>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d120      	bne.n	8004dc2 <UART_SetConfig+0xbe>
 8004d80:	4b7f      	ldr	r3, [pc, #508]	; (8004f80 <UART_SetConfig+0x27c>)
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d817      	bhi.n	8004dbc <UART_SetConfig+0xb8>
 8004d8c:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <UART_SetConfig+0x90>)
 8004d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d92:	bf00      	nop
 8004d94:	08004da5 	.word	0x08004da5
 8004d98:	08004db1 	.word	0x08004db1
 8004d9c:	08004db7 	.word	0x08004db7
 8004da0:	08004dab 	.word	0x08004dab
 8004da4:	2301      	movs	r3, #1
 8004da6:	77fb      	strb	r3, [r7, #31]
 8004da8:	e0b5      	b.n	8004f16 <UART_SetConfig+0x212>
 8004daa:	2302      	movs	r3, #2
 8004dac:	77fb      	strb	r3, [r7, #31]
 8004dae:	e0b2      	b.n	8004f16 <UART_SetConfig+0x212>
 8004db0:	2304      	movs	r3, #4
 8004db2:	77fb      	strb	r3, [r7, #31]
 8004db4:	e0af      	b.n	8004f16 <UART_SetConfig+0x212>
 8004db6:	2308      	movs	r3, #8
 8004db8:	77fb      	strb	r3, [r7, #31]
 8004dba:	e0ac      	b.n	8004f16 <UART_SetConfig+0x212>
 8004dbc:	2310      	movs	r3, #16
 8004dbe:	77fb      	strb	r3, [r7, #31]
 8004dc0:	e0a9      	b.n	8004f16 <UART_SetConfig+0x212>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a6f      	ldr	r2, [pc, #444]	; (8004f84 <UART_SetConfig+0x280>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d124      	bne.n	8004e16 <UART_SetConfig+0x112>
 8004dcc:	4b6c      	ldr	r3, [pc, #432]	; (8004f80 <UART_SetConfig+0x27c>)
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dd8:	d011      	beq.n	8004dfe <UART_SetConfig+0xfa>
 8004dda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dde:	d817      	bhi.n	8004e10 <UART_SetConfig+0x10c>
 8004de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004de4:	d011      	beq.n	8004e0a <UART_SetConfig+0x106>
 8004de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dea:	d811      	bhi.n	8004e10 <UART_SetConfig+0x10c>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <UART_SetConfig+0xf4>
 8004df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df4:	d006      	beq.n	8004e04 <UART_SetConfig+0x100>
 8004df6:	e00b      	b.n	8004e10 <UART_SetConfig+0x10c>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	77fb      	strb	r3, [r7, #31]
 8004dfc:	e08b      	b.n	8004f16 <UART_SetConfig+0x212>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	77fb      	strb	r3, [r7, #31]
 8004e02:	e088      	b.n	8004f16 <UART_SetConfig+0x212>
 8004e04:	2304      	movs	r3, #4
 8004e06:	77fb      	strb	r3, [r7, #31]
 8004e08:	e085      	b.n	8004f16 <UART_SetConfig+0x212>
 8004e0a:	2308      	movs	r3, #8
 8004e0c:	77fb      	strb	r3, [r7, #31]
 8004e0e:	e082      	b.n	8004f16 <UART_SetConfig+0x212>
 8004e10:	2310      	movs	r3, #16
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e07f      	b.n	8004f16 <UART_SetConfig+0x212>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a5b      	ldr	r2, [pc, #364]	; (8004f88 <UART_SetConfig+0x284>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d124      	bne.n	8004e6a <UART_SetConfig+0x166>
 8004e20:	4b57      	ldr	r3, [pc, #348]	; (8004f80 <UART_SetConfig+0x27c>)
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004e28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e2c:	d011      	beq.n	8004e52 <UART_SetConfig+0x14e>
 8004e2e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e32:	d817      	bhi.n	8004e64 <UART_SetConfig+0x160>
 8004e34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e38:	d011      	beq.n	8004e5e <UART_SetConfig+0x15a>
 8004e3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e3e:	d811      	bhi.n	8004e64 <UART_SetConfig+0x160>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <UART_SetConfig+0x148>
 8004e44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e48:	d006      	beq.n	8004e58 <UART_SetConfig+0x154>
 8004e4a:	e00b      	b.n	8004e64 <UART_SetConfig+0x160>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	77fb      	strb	r3, [r7, #31]
 8004e50:	e061      	b.n	8004f16 <UART_SetConfig+0x212>
 8004e52:	2302      	movs	r3, #2
 8004e54:	77fb      	strb	r3, [r7, #31]
 8004e56:	e05e      	b.n	8004f16 <UART_SetConfig+0x212>
 8004e58:	2304      	movs	r3, #4
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	e05b      	b.n	8004f16 <UART_SetConfig+0x212>
 8004e5e:	2308      	movs	r3, #8
 8004e60:	77fb      	strb	r3, [r7, #31]
 8004e62:	e058      	b.n	8004f16 <UART_SetConfig+0x212>
 8004e64:	2310      	movs	r3, #16
 8004e66:	77fb      	strb	r3, [r7, #31]
 8004e68:	e055      	b.n	8004f16 <UART_SetConfig+0x212>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a47      	ldr	r2, [pc, #284]	; (8004f8c <UART_SetConfig+0x288>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d124      	bne.n	8004ebe <UART_SetConfig+0x1ba>
 8004e74:	4b42      	ldr	r3, [pc, #264]	; (8004f80 <UART_SetConfig+0x27c>)
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004e7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e80:	d011      	beq.n	8004ea6 <UART_SetConfig+0x1a2>
 8004e82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e86:	d817      	bhi.n	8004eb8 <UART_SetConfig+0x1b4>
 8004e88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e8c:	d011      	beq.n	8004eb2 <UART_SetConfig+0x1ae>
 8004e8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e92:	d811      	bhi.n	8004eb8 <UART_SetConfig+0x1b4>
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <UART_SetConfig+0x19c>
 8004e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e9c:	d006      	beq.n	8004eac <UART_SetConfig+0x1a8>
 8004e9e:	e00b      	b.n	8004eb8 <UART_SetConfig+0x1b4>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	e037      	b.n	8004f16 <UART_SetConfig+0x212>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	77fb      	strb	r3, [r7, #31]
 8004eaa:	e034      	b.n	8004f16 <UART_SetConfig+0x212>
 8004eac:	2304      	movs	r3, #4
 8004eae:	77fb      	strb	r3, [r7, #31]
 8004eb0:	e031      	b.n	8004f16 <UART_SetConfig+0x212>
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	77fb      	strb	r3, [r7, #31]
 8004eb6:	e02e      	b.n	8004f16 <UART_SetConfig+0x212>
 8004eb8:	2310      	movs	r3, #16
 8004eba:	77fb      	strb	r3, [r7, #31]
 8004ebc:	e02b      	b.n	8004f16 <UART_SetConfig+0x212>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a33      	ldr	r2, [pc, #204]	; (8004f90 <UART_SetConfig+0x28c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d124      	bne.n	8004f12 <UART_SetConfig+0x20e>
 8004ec8:	4b2d      	ldr	r3, [pc, #180]	; (8004f80 <UART_SetConfig+0x27c>)
 8004eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ecc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004ed0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ed4:	d011      	beq.n	8004efa <UART_SetConfig+0x1f6>
 8004ed6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004eda:	d817      	bhi.n	8004f0c <UART_SetConfig+0x208>
 8004edc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ee0:	d011      	beq.n	8004f06 <UART_SetConfig+0x202>
 8004ee2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ee6:	d811      	bhi.n	8004f0c <UART_SetConfig+0x208>
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <UART_SetConfig+0x1f0>
 8004eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef0:	d006      	beq.n	8004f00 <UART_SetConfig+0x1fc>
 8004ef2:	e00b      	b.n	8004f0c <UART_SetConfig+0x208>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	77fb      	strb	r3, [r7, #31]
 8004ef8:	e00d      	b.n	8004f16 <UART_SetConfig+0x212>
 8004efa:	2302      	movs	r3, #2
 8004efc:	77fb      	strb	r3, [r7, #31]
 8004efe:	e00a      	b.n	8004f16 <UART_SetConfig+0x212>
 8004f00:	2304      	movs	r3, #4
 8004f02:	77fb      	strb	r3, [r7, #31]
 8004f04:	e007      	b.n	8004f16 <UART_SetConfig+0x212>
 8004f06:	2308      	movs	r3, #8
 8004f08:	77fb      	strb	r3, [r7, #31]
 8004f0a:	e004      	b.n	8004f16 <UART_SetConfig+0x212>
 8004f0c:	2310      	movs	r3, #16
 8004f0e:	77fb      	strb	r3, [r7, #31]
 8004f10:	e001      	b.n	8004f16 <UART_SetConfig+0x212>
 8004f12:	2310      	movs	r3, #16
 8004f14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f1e:	d16b      	bne.n	8004ff8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004f20:	7ffb      	ldrb	r3, [r7, #31]
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d838      	bhi.n	8004f98 <UART_SetConfig+0x294>
 8004f26:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <UART_SetConfig+0x228>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f51 	.word	0x08004f51
 8004f30:	08004f59 	.word	0x08004f59
 8004f34:	08004f61 	.word	0x08004f61
 8004f38:	08004f99 	.word	0x08004f99
 8004f3c:	08004f67 	.word	0x08004f67
 8004f40:	08004f99 	.word	0x08004f99
 8004f44:	08004f99 	.word	0x08004f99
 8004f48:	08004f99 	.word	0x08004f99
 8004f4c:	08004f6f 	.word	0x08004f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f50:	f7ff f85e 	bl	8004010 <HAL_RCC_GetPCLK1Freq>
 8004f54:	61b8      	str	r0, [r7, #24]
        break;
 8004f56:	e024      	b.n	8004fa2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f58:	f7ff f87c 	bl	8004054 <HAL_RCC_GetPCLK2Freq>
 8004f5c:	61b8      	str	r0, [r7, #24]
        break;
 8004f5e:	e020      	b.n	8004fa2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f60:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <UART_SetConfig+0x290>)
 8004f62:	61bb      	str	r3, [r7, #24]
        break;
 8004f64:	e01d      	b.n	8004fa2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f66:	f7fe fff3 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 8004f6a:	61b8      	str	r0, [r7, #24]
        break;
 8004f6c:	e019      	b.n	8004fa2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f72:	61bb      	str	r3, [r7, #24]
        break;
 8004f74:	e015      	b.n	8004fa2 <UART_SetConfig+0x29e>
 8004f76:	bf00      	nop
 8004f78:	efff69f3 	.word	0xefff69f3
 8004f7c:	40013800 	.word	0x40013800
 8004f80:	40021000 	.word	0x40021000
 8004f84:	40004400 	.word	0x40004400
 8004f88:	40004800 	.word	0x40004800
 8004f8c:	40004c00 	.word	0x40004c00
 8004f90:	40005000 	.word	0x40005000
 8004f94:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	77bb      	strb	r3, [r7, #30]
        break;
 8004fa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d073      	beq.n	8005090 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	005a      	lsls	r2, r3, #1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	085b      	lsrs	r3, r3, #1
 8004fb2:	441a      	add	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b0f      	cmp	r3, #15
 8004fc2:	d916      	bls.n	8004ff2 <UART_SetConfig+0x2ee>
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fca:	d212      	bcs.n	8004ff2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	f023 030f 	bic.w	r3, r3, #15
 8004fd4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	085b      	lsrs	r3, r3, #1
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	89fb      	ldrh	r3, [r7, #14]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	89fa      	ldrh	r2, [r7, #14]
 8004fee:	60da      	str	r2, [r3, #12]
 8004ff0:	e04e      	b.n	8005090 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	77bb      	strb	r3, [r7, #30]
 8004ff6:	e04b      	b.n	8005090 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ff8:	7ffb      	ldrb	r3, [r7, #31]
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d827      	bhi.n	800504e <UART_SetConfig+0x34a>
 8004ffe:	a201      	add	r2, pc, #4	; (adr r2, 8005004 <UART_SetConfig+0x300>)
 8005000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005004:	08005029 	.word	0x08005029
 8005008:	08005031 	.word	0x08005031
 800500c:	08005039 	.word	0x08005039
 8005010:	0800504f 	.word	0x0800504f
 8005014:	0800503f 	.word	0x0800503f
 8005018:	0800504f 	.word	0x0800504f
 800501c:	0800504f 	.word	0x0800504f
 8005020:	0800504f 	.word	0x0800504f
 8005024:	08005047 	.word	0x08005047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005028:	f7fe fff2 	bl	8004010 <HAL_RCC_GetPCLK1Freq>
 800502c:	61b8      	str	r0, [r7, #24]
        break;
 800502e:	e013      	b.n	8005058 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005030:	f7ff f810 	bl	8004054 <HAL_RCC_GetPCLK2Freq>
 8005034:	61b8      	str	r0, [r7, #24]
        break;
 8005036:	e00f      	b.n	8005058 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005038:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <UART_SetConfig+0x3a4>)
 800503a:	61bb      	str	r3, [r7, #24]
        break;
 800503c:	e00c      	b.n	8005058 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800503e:	f7fe ff87 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 8005042:	61b8      	str	r0, [r7, #24]
        break;
 8005044:	e008      	b.n	8005058 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504a:	61bb      	str	r3, [r7, #24]
        break;
 800504c:	e004      	b.n	8005058 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	77bb      	strb	r3, [r7, #30]
        break;
 8005056:	bf00      	nop
    }

    if (pclk != 0U)
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d018      	beq.n	8005090 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	085a      	lsrs	r2, r3, #1
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	441a      	add	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005070:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b0f      	cmp	r3, #15
 8005076:	d909      	bls.n	800508c <UART_SetConfig+0x388>
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507e:	d205      	bcs.n	800508c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	b29a      	uxth	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	60da      	str	r2, [r3, #12]
 800508a:	e001      	b.n	8005090 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800509c:	7fbb      	ldrb	r3, [r7, #30]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3720      	adds	r7, #32
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	007a1200 	.word	0x007a1200

080050ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00a      	beq.n	800515e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	d01a      	beq.n	80051c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051aa:	d10a      	bne.n	80051c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	605a      	str	r2, [r3, #4]
  }
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b098      	sub	sp, #96	; 0x60
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005200:	f7fd f976 	bl	80024f0 <HAL_GetTick>
 8005204:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b08      	cmp	r3, #8
 8005212:	d12e      	bne.n	8005272 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800521c:	2200      	movs	r2, #0
 800521e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f88c 	bl	8005340 <UART_WaitOnFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d021      	beq.n	8005272 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800523c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005242:	653b      	str	r3, [r7, #80]	; 0x50
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800524c:	647b      	str	r3, [r7, #68]	; 0x44
 800524e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005252:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005254:	e841 2300 	strex	r3, r2, [r1]
 8005258:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800525a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e6      	bne.n	800522e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e062      	b.n	8005338 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b04      	cmp	r3, #4
 800527e:	d149      	bne.n	8005314 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005280:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005288:	2200      	movs	r2, #0
 800528a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f856 	bl	8005340 <UART_WaitOnFlagUntilTimeout>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d03c      	beq.n	8005314 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	e853 3f00 	ldrex	r3, [r3]
 80052a6:	623b      	str	r3, [r7, #32]
   return(result);
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b8:	633b      	str	r3, [r7, #48]	; 0x30
 80052ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e6      	bne.n	800529a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3308      	adds	r3, #8
 80052d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	60fb      	str	r3, [r7, #12]
   return(result);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0301 	bic.w	r3, r3, #1
 80052e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3308      	adds	r3, #8
 80052ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ec:	61fa      	str	r2, [r7, #28]
 80052ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	69b9      	ldr	r1, [r7, #24]
 80052f2:	69fa      	ldr	r2, [r7, #28]
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	617b      	str	r3, [r7, #20]
   return(result);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e5      	bne.n	80052cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2220      	movs	r2, #32
 8005304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e011      	b.n	8005338 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2220      	movs	r2, #32
 800531e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3758      	adds	r7, #88	; 0x58
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	4613      	mov	r3, r2
 800534e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005350:	e04f      	b.n	80053f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005358:	d04b      	beq.n	80053f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535a:	f7fd f8c9 	bl	80024f0 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	429a      	cmp	r2, r3
 8005368:	d302      	bcc.n	8005370 <UART_WaitOnFlagUntilTimeout+0x30>
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e04e      	b.n	8005412 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0304 	and.w	r3, r3, #4
 800537e:	2b00      	cmp	r3, #0
 8005380:	d037      	beq.n	80053f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b80      	cmp	r3, #128	; 0x80
 8005386:	d034      	beq.n	80053f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b40      	cmp	r3, #64	; 0x40
 800538c:	d031      	beq.n	80053f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b08      	cmp	r3, #8
 800539a:	d110      	bne.n	80053be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2208      	movs	r2, #8
 80053a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 f8ff 	bl	80055a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2208      	movs	r2, #8
 80053ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e029      	b.n	8005412 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053cc:	d111      	bne.n	80053f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 f8e5 	bl	80055a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e00f      	b.n	8005412 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4013      	ands	r3, r2
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	429a      	cmp	r2, r3
 8005400:	bf0c      	ite	eq
 8005402:	2301      	moveq	r3, #1
 8005404:	2300      	movne	r3, #0
 8005406:	b2db      	uxtb	r3, r3
 8005408:	461a      	mov	r2, r3
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	429a      	cmp	r2, r3
 800540e:	d0a0      	beq.n	8005352 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800541c:	b480      	push	{r7}
 800541e:	b097      	sub	sp, #92	; 0x5c
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	4613      	mov	r3, r2
 8005428:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	88fa      	ldrh	r2, [r7, #6]
 8005434:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	88fa      	ldrh	r2, [r7, #6]
 800543c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544e:	d10e      	bne.n	800546e <UART_Start_Receive_IT+0x52>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d105      	bne.n	8005464 <UART_Start_Receive_IT+0x48>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800545e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005462:	e02d      	b.n	80054c0 <UART_Start_Receive_IT+0xa4>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	22ff      	movs	r2, #255	; 0xff
 8005468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800546c:	e028      	b.n	80054c0 <UART_Start_Receive_IT+0xa4>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10d      	bne.n	8005492 <UART_Start_Receive_IT+0x76>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d104      	bne.n	8005488 <UART_Start_Receive_IT+0x6c>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	22ff      	movs	r2, #255	; 0xff
 8005482:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005486:	e01b      	b.n	80054c0 <UART_Start_Receive_IT+0xa4>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	227f      	movs	r2, #127	; 0x7f
 800548c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005490:	e016      	b.n	80054c0 <UART_Start_Receive_IT+0xa4>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800549a:	d10d      	bne.n	80054b8 <UART_Start_Receive_IT+0x9c>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d104      	bne.n	80054ae <UART_Start_Receive_IT+0x92>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	227f      	movs	r2, #127	; 0x7f
 80054a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054ac:	e008      	b.n	80054c0 <UART_Start_Receive_IT+0xa4>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	223f      	movs	r2, #63	; 0x3f
 80054b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054b6:	e003      	b.n	80054c0 <UART_Start_Receive_IT+0xa4>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2222      	movs	r2, #34	; 0x22
 80054cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3308      	adds	r3, #8
 80054d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	657b      	str	r3, [r7, #84]	; 0x54
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3308      	adds	r3, #8
 80054ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054f0:	64ba      	str	r2, [r7, #72]	; 0x48
 80054f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e5      	bne.n	80054d0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800550c:	d107      	bne.n	800551e <UART_Start_Receive_IT+0x102>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d103      	bne.n	800551e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4a21      	ldr	r2, [pc, #132]	; (80055a0 <UART_Start_Receive_IT+0x184>)
 800551a:	669a      	str	r2, [r3, #104]	; 0x68
 800551c:	e002      	b.n	8005524 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4a20      	ldr	r2, [pc, #128]	; (80055a4 <UART_Start_Receive_IT+0x188>)
 8005522:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d019      	beq.n	8005560 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005540:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554a:	637b      	str	r3, [r7, #52]	; 0x34
 800554c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005552:	e841 2300 	strex	r3, r2, [r1]
 8005556:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1e6      	bne.n	800552c <UART_Start_Receive_IT+0x110>
 800555e:	e018      	b.n	8005592 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	613b      	str	r3, [r7, #16]
   return(result);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f043 0320 	orr.w	r3, r3, #32
 8005574:	653b      	str	r3, [r7, #80]	; 0x50
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800557e:	623b      	str	r3, [r7, #32]
 8005580:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005582:	69f9      	ldr	r1, [r7, #28]
 8005584:	6a3a      	ldr	r2, [r7, #32]
 8005586:	e841 2300 	strex	r3, r2, [r1]
 800558a:	61bb      	str	r3, [r7, #24]
   return(result);
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1e6      	bne.n	8005560 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	375c      	adds	r7, #92	; 0x5c
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	08005899 	.word	0x08005899
 80055a4:	080056f1 	.word	0x080056f1

080055a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b095      	sub	sp, #84	; 0x54
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ce:	643b      	str	r3, [r7, #64]	; 0x40
 80055d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e6      	bne.n	80055b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3308      	adds	r3, #8
 8005600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005602:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005604:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e5      	bne.n	80055e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800561a:	2b01      	cmp	r3, #1
 800561c:	d118      	bne.n	8005650 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	60bb      	str	r3, [r7, #8]
   return(result);
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f023 0310 	bic.w	r3, r3, #16
 8005632:	647b      	str	r3, [r7, #68]	; 0x44
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800563c:	61bb      	str	r3, [r7, #24]
 800563e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	6979      	ldr	r1, [r7, #20]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	613b      	str	r3, [r7, #16]
   return(result);
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e6      	bne.n	800561e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005664:	bf00      	nop
 8005666:	3754      	adds	r7, #84	; 0x54
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f7fb fe48 	bl	8001324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005694:	bf00      	nop
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b8:	61fb      	str	r3, [r7, #28]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	61bb      	str	r3, [r7, #24]
 80056c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	6979      	ldr	r1, [r7, #20]
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	613b      	str	r3, [r7, #16]
   return(result);
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e6      	bne.n	80056a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2220      	movs	r2, #32
 80056da:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff faf8 	bl	8004cd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056e8:	bf00      	nop
 80056ea:	3720      	adds	r7, #32
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b09c      	sub	sp, #112	; 0x70
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056fe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005708:	2b22      	cmp	r3, #34	; 0x22
 800570a:	f040 80b9 	bne.w	8005880 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005714:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005718:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800571c:	b2d9      	uxtb	r1, r3
 800571e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005722:	b2da      	uxtb	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005728:	400a      	ands	r2, r1
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800573e:	b29b      	uxth	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	f040 809c 	bne.w	8005890 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005760:	e853 3f00 	ldrex	r3, [r3]
 8005764:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005768:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800576c:	66bb      	str	r3, [r7, #104]	; 0x68
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005776:	65bb      	str	r3, [r7, #88]	; 0x58
 8005778:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800577c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e6      	bne.n	8005758 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3308      	adds	r3, #8
 8005790:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	e853 3f00 	ldrex	r3, [r3]
 8005798:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800579a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579c:	f023 0301 	bic.w	r3, r3, #1
 80057a0:	667b      	str	r3, [r7, #100]	; 0x64
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3308      	adds	r3, #8
 80057a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80057aa:	647a      	str	r2, [r7, #68]	; 0x44
 80057ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e5      	bne.n	800578a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d018      	beq.n	8005812 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	623b      	str	r3, [r7, #32]
   return(result);
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057f4:	663b      	str	r3, [r7, #96]	; 0x60
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005800:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005806:	e841 2300 	strex	r3, r2, [r1]
 800580a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e6      	bne.n	80057e0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005816:	2b01      	cmp	r3, #1
 8005818:	d12e      	bne.n	8005878 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	e853 3f00 	ldrex	r3, [r3]
 800582c:	60fb      	str	r3, [r7, #12]
   return(result);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f023 0310 	bic.w	r3, r3, #16
 8005834:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800583e:	61fb      	str	r3, [r7, #28]
 8005840:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005842:	69b9      	ldr	r1, [r7, #24]
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	e841 2300 	strex	r3, r2, [r1]
 800584a:	617b      	str	r3, [r7, #20]
   return(result);
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1e6      	bne.n	8005820 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	2b10      	cmp	r3, #16
 800585e:	d103      	bne.n	8005868 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2210      	movs	r2, #16
 8005866:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7ff fa3b 	bl	8004cec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005876:	e00b      	b.n	8005890 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7fb fdcf 	bl	800141c <HAL_UART_RxCpltCallback>
}
 800587e:	e007      	b.n	8005890 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0208 	orr.w	r2, r2, #8
 800588e:	619a      	str	r2, [r3, #24]
}
 8005890:	bf00      	nop
 8005892:	3770      	adds	r7, #112	; 0x70
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b09c      	sub	sp, #112	; 0x70
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058b0:	2b22      	cmp	r3, #34	; 0x22
 80058b2:	f040 80b9 	bne.w	8005a28 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80058c6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80058ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80058ce:	4013      	ands	r3, r2
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058da:	1c9a      	adds	r2, r3, #2
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f040 809c 	bne.w	8005a38 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800590e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005910:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005914:	667b      	str	r3, [r7, #100]	; 0x64
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800591e:	657b      	str	r3, [r7, #84]	; 0x54
 8005920:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005922:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005924:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005926:	e841 2300 	strex	r3, r2, [r1]
 800592a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800592c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1e6      	bne.n	8005900 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3308      	adds	r3, #8
 8005938:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	f023 0301 	bic.w	r3, r3, #1
 8005948:	663b      	str	r3, [r7, #96]	; 0x60
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3308      	adds	r3, #8
 8005950:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005952:	643a      	str	r2, [r7, #64]	; 0x40
 8005954:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005958:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e5      	bne.n	8005932 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d018      	beq.n	80059ba <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	e853 3f00 	ldrex	r3, [r3]
 8005994:	61fb      	str	r3, [r7, #28]
   return(result);
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800599c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059a8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1e6      	bne.n	8005988 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d12e      	bne.n	8005a20 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	e853 3f00 	ldrex	r3, [r3]
 80059d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f023 0310 	bic.w	r3, r3, #16
 80059dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	461a      	mov	r2, r3
 80059e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059e6:	61bb      	str	r3, [r7, #24]
 80059e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ea:	6979      	ldr	r1, [r7, #20]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	e841 2300 	strex	r3, r2, [r1]
 80059f2:	613b      	str	r3, [r7, #16]
   return(result);
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1e6      	bne.n	80059c8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b10      	cmp	r3, #16
 8005a06:	d103      	bne.n	8005a10 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2210      	movs	r2, #16
 8005a0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a16:	4619      	mov	r1, r3
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff f967 	bl	8004cec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a1e:	e00b      	b.n	8005a38 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7fb fcfb 	bl	800141c <HAL_UART_RxCpltCallback>
}
 8005a26:	e007      	b.n	8005a38 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699a      	ldr	r2, [r3, #24]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0208 	orr.w	r2, r2, #8
 8005a36:	619a      	str	r2, [r3, #24]
}
 8005a38:	bf00      	nop
 8005a3a:	3770      	adds	r7, #112	; 0x70
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <atoi>:
 8005a54:	220a      	movs	r2, #10
 8005a56:	2100      	movs	r1, #0
 8005a58:	f000 b936 	b.w	8005cc8 <strtol>

08005a5c <malloc>:
 8005a5c:	4b02      	ldr	r3, [pc, #8]	; (8005a68 <malloc+0xc>)
 8005a5e:	4601      	mov	r1, r0
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	f000 b823 	b.w	8005aac <_malloc_r>
 8005a66:	bf00      	nop
 8005a68:	20000068 	.word	0x20000068

08005a6c <sbrk_aligned>:
 8005a6c:	b570      	push	{r4, r5, r6, lr}
 8005a6e:	4e0e      	ldr	r6, [pc, #56]	; (8005aa8 <sbrk_aligned+0x3c>)
 8005a70:	460c      	mov	r4, r1
 8005a72:	6831      	ldr	r1, [r6, #0]
 8005a74:	4605      	mov	r5, r0
 8005a76:	b911      	cbnz	r1, 8005a7e <sbrk_aligned+0x12>
 8005a78:	f000 fbbc 	bl	80061f4 <_sbrk_r>
 8005a7c:	6030      	str	r0, [r6, #0]
 8005a7e:	4621      	mov	r1, r4
 8005a80:	4628      	mov	r0, r5
 8005a82:	f000 fbb7 	bl	80061f4 <_sbrk_r>
 8005a86:	1c43      	adds	r3, r0, #1
 8005a88:	d00a      	beq.n	8005aa0 <sbrk_aligned+0x34>
 8005a8a:	1cc4      	adds	r4, r0, #3
 8005a8c:	f024 0403 	bic.w	r4, r4, #3
 8005a90:	42a0      	cmp	r0, r4
 8005a92:	d007      	beq.n	8005aa4 <sbrk_aligned+0x38>
 8005a94:	1a21      	subs	r1, r4, r0
 8005a96:	4628      	mov	r0, r5
 8005a98:	f000 fbac 	bl	80061f4 <_sbrk_r>
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d101      	bne.n	8005aa4 <sbrk_aligned+0x38>
 8005aa0:	f04f 34ff 	mov.w	r4, #4294967295
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	bd70      	pop	{r4, r5, r6, pc}
 8005aa8:	20000278 	.word	0x20000278

08005aac <_malloc_r>:
 8005aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ab0:	1ccd      	adds	r5, r1, #3
 8005ab2:	f025 0503 	bic.w	r5, r5, #3
 8005ab6:	3508      	adds	r5, #8
 8005ab8:	2d0c      	cmp	r5, #12
 8005aba:	bf38      	it	cc
 8005abc:	250c      	movcc	r5, #12
 8005abe:	2d00      	cmp	r5, #0
 8005ac0:	4607      	mov	r7, r0
 8005ac2:	db01      	blt.n	8005ac8 <_malloc_r+0x1c>
 8005ac4:	42a9      	cmp	r1, r5
 8005ac6:	d905      	bls.n	8005ad4 <_malloc_r+0x28>
 8005ac8:	230c      	movs	r3, #12
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	2600      	movs	r6, #0
 8005ace:	4630      	mov	r0, r6
 8005ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ad4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005ba8 <_malloc_r+0xfc>
 8005ad8:	f000 f868 	bl	8005bac <__malloc_lock>
 8005adc:	f8d8 3000 	ldr.w	r3, [r8]
 8005ae0:	461c      	mov	r4, r3
 8005ae2:	bb5c      	cbnz	r4, 8005b3c <_malloc_r+0x90>
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	f7ff ffc0 	bl	8005a6c <sbrk_aligned>
 8005aec:	1c43      	adds	r3, r0, #1
 8005aee:	4604      	mov	r4, r0
 8005af0:	d155      	bne.n	8005b9e <_malloc_r+0xf2>
 8005af2:	f8d8 4000 	ldr.w	r4, [r8]
 8005af6:	4626      	mov	r6, r4
 8005af8:	2e00      	cmp	r6, #0
 8005afa:	d145      	bne.n	8005b88 <_malloc_r+0xdc>
 8005afc:	2c00      	cmp	r4, #0
 8005afe:	d048      	beq.n	8005b92 <_malloc_r+0xe6>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	4631      	mov	r1, r6
 8005b04:	4638      	mov	r0, r7
 8005b06:	eb04 0903 	add.w	r9, r4, r3
 8005b0a:	f000 fb73 	bl	80061f4 <_sbrk_r>
 8005b0e:	4581      	cmp	r9, r0
 8005b10:	d13f      	bne.n	8005b92 <_malloc_r+0xe6>
 8005b12:	6821      	ldr	r1, [r4, #0]
 8005b14:	1a6d      	subs	r5, r5, r1
 8005b16:	4629      	mov	r1, r5
 8005b18:	4638      	mov	r0, r7
 8005b1a:	f7ff ffa7 	bl	8005a6c <sbrk_aligned>
 8005b1e:	3001      	adds	r0, #1
 8005b20:	d037      	beq.n	8005b92 <_malloc_r+0xe6>
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	442b      	add	r3, r5
 8005b26:	6023      	str	r3, [r4, #0]
 8005b28:	f8d8 3000 	ldr.w	r3, [r8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d038      	beq.n	8005ba2 <_malloc_r+0xf6>
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	42a2      	cmp	r2, r4
 8005b34:	d12b      	bne.n	8005b8e <_malloc_r+0xe2>
 8005b36:	2200      	movs	r2, #0
 8005b38:	605a      	str	r2, [r3, #4]
 8005b3a:	e00f      	b.n	8005b5c <_malloc_r+0xb0>
 8005b3c:	6822      	ldr	r2, [r4, #0]
 8005b3e:	1b52      	subs	r2, r2, r5
 8005b40:	d41f      	bmi.n	8005b82 <_malloc_r+0xd6>
 8005b42:	2a0b      	cmp	r2, #11
 8005b44:	d917      	bls.n	8005b76 <_malloc_r+0xca>
 8005b46:	1961      	adds	r1, r4, r5
 8005b48:	42a3      	cmp	r3, r4
 8005b4a:	6025      	str	r5, [r4, #0]
 8005b4c:	bf18      	it	ne
 8005b4e:	6059      	strne	r1, [r3, #4]
 8005b50:	6863      	ldr	r3, [r4, #4]
 8005b52:	bf08      	it	eq
 8005b54:	f8c8 1000 	streq.w	r1, [r8]
 8005b58:	5162      	str	r2, [r4, r5]
 8005b5a:	604b      	str	r3, [r1, #4]
 8005b5c:	4638      	mov	r0, r7
 8005b5e:	f104 060b 	add.w	r6, r4, #11
 8005b62:	f000 f829 	bl	8005bb8 <__malloc_unlock>
 8005b66:	f026 0607 	bic.w	r6, r6, #7
 8005b6a:	1d23      	adds	r3, r4, #4
 8005b6c:	1af2      	subs	r2, r6, r3
 8005b6e:	d0ae      	beq.n	8005ace <_malloc_r+0x22>
 8005b70:	1b9b      	subs	r3, r3, r6
 8005b72:	50a3      	str	r3, [r4, r2]
 8005b74:	e7ab      	b.n	8005ace <_malloc_r+0x22>
 8005b76:	42a3      	cmp	r3, r4
 8005b78:	6862      	ldr	r2, [r4, #4]
 8005b7a:	d1dd      	bne.n	8005b38 <_malloc_r+0x8c>
 8005b7c:	f8c8 2000 	str.w	r2, [r8]
 8005b80:	e7ec      	b.n	8005b5c <_malloc_r+0xb0>
 8005b82:	4623      	mov	r3, r4
 8005b84:	6864      	ldr	r4, [r4, #4]
 8005b86:	e7ac      	b.n	8005ae2 <_malloc_r+0x36>
 8005b88:	4634      	mov	r4, r6
 8005b8a:	6876      	ldr	r6, [r6, #4]
 8005b8c:	e7b4      	b.n	8005af8 <_malloc_r+0x4c>
 8005b8e:	4613      	mov	r3, r2
 8005b90:	e7cc      	b.n	8005b2c <_malloc_r+0x80>
 8005b92:	230c      	movs	r3, #12
 8005b94:	603b      	str	r3, [r7, #0]
 8005b96:	4638      	mov	r0, r7
 8005b98:	f000 f80e 	bl	8005bb8 <__malloc_unlock>
 8005b9c:	e797      	b.n	8005ace <_malloc_r+0x22>
 8005b9e:	6025      	str	r5, [r4, #0]
 8005ba0:	e7dc      	b.n	8005b5c <_malloc_r+0xb0>
 8005ba2:	605b      	str	r3, [r3, #4]
 8005ba4:	deff      	udf	#255	; 0xff
 8005ba6:	bf00      	nop
 8005ba8:	20000274 	.word	0x20000274

08005bac <__malloc_lock>:
 8005bac:	4801      	ldr	r0, [pc, #4]	; (8005bb4 <__malloc_lock+0x8>)
 8005bae:	f000 bb6d 	b.w	800628c <__retarget_lock_acquire_recursive>
 8005bb2:	bf00      	nop
 8005bb4:	200003bc 	.word	0x200003bc

08005bb8 <__malloc_unlock>:
 8005bb8:	4801      	ldr	r0, [pc, #4]	; (8005bc0 <__malloc_unlock+0x8>)
 8005bba:	f000 bb68 	b.w	800628e <__retarget_lock_release_recursive>
 8005bbe:	bf00      	nop
 8005bc0:	200003bc 	.word	0x200003bc

08005bc4 <_strtol_l.constprop.0>:
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bca:	d001      	beq.n	8005bd0 <_strtol_l.constprop.0+0xc>
 8005bcc:	2b24      	cmp	r3, #36	; 0x24
 8005bce:	d906      	bls.n	8005bde <_strtol_l.constprop.0+0x1a>
 8005bd0:	f000 fb32 	bl	8006238 <__errno>
 8005bd4:	2316      	movs	r3, #22
 8005bd6:	6003      	str	r3, [r0, #0]
 8005bd8:	2000      	movs	r0, #0
 8005bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bde:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005cc4 <_strtol_l.constprop.0+0x100>
 8005be2:	460d      	mov	r5, r1
 8005be4:	462e      	mov	r6, r5
 8005be6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bea:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005bee:	f017 0708 	ands.w	r7, r7, #8
 8005bf2:	d1f7      	bne.n	8005be4 <_strtol_l.constprop.0+0x20>
 8005bf4:	2c2d      	cmp	r4, #45	; 0x2d
 8005bf6:	d132      	bne.n	8005c5e <_strtol_l.constprop.0+0x9a>
 8005bf8:	782c      	ldrb	r4, [r5, #0]
 8005bfa:	2701      	movs	r7, #1
 8005bfc:	1cb5      	adds	r5, r6, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d05b      	beq.n	8005cba <_strtol_l.constprop.0+0xf6>
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d109      	bne.n	8005c1a <_strtol_l.constprop.0+0x56>
 8005c06:	2c30      	cmp	r4, #48	; 0x30
 8005c08:	d107      	bne.n	8005c1a <_strtol_l.constprop.0+0x56>
 8005c0a:	782c      	ldrb	r4, [r5, #0]
 8005c0c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005c10:	2c58      	cmp	r4, #88	; 0x58
 8005c12:	d14d      	bne.n	8005cb0 <_strtol_l.constprop.0+0xec>
 8005c14:	786c      	ldrb	r4, [r5, #1]
 8005c16:	2310      	movs	r3, #16
 8005c18:	3502      	adds	r5, #2
 8005c1a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005c1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c22:	f04f 0e00 	mov.w	lr, #0
 8005c26:	fbb8 f9f3 	udiv	r9, r8, r3
 8005c2a:	4676      	mov	r6, lr
 8005c2c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005c30:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005c34:	f1bc 0f09 	cmp.w	ip, #9
 8005c38:	d816      	bhi.n	8005c68 <_strtol_l.constprop.0+0xa4>
 8005c3a:	4664      	mov	r4, ip
 8005c3c:	42a3      	cmp	r3, r4
 8005c3e:	dd24      	ble.n	8005c8a <_strtol_l.constprop.0+0xc6>
 8005c40:	f1be 3fff 	cmp.w	lr, #4294967295
 8005c44:	d008      	beq.n	8005c58 <_strtol_l.constprop.0+0x94>
 8005c46:	45b1      	cmp	r9, r6
 8005c48:	d31c      	bcc.n	8005c84 <_strtol_l.constprop.0+0xc0>
 8005c4a:	d101      	bne.n	8005c50 <_strtol_l.constprop.0+0x8c>
 8005c4c:	45a2      	cmp	sl, r4
 8005c4e:	db19      	blt.n	8005c84 <_strtol_l.constprop.0+0xc0>
 8005c50:	fb06 4603 	mla	r6, r6, r3, r4
 8005c54:	f04f 0e01 	mov.w	lr, #1
 8005c58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c5c:	e7e8      	b.n	8005c30 <_strtol_l.constprop.0+0x6c>
 8005c5e:	2c2b      	cmp	r4, #43	; 0x2b
 8005c60:	bf04      	itt	eq
 8005c62:	782c      	ldrbeq	r4, [r5, #0]
 8005c64:	1cb5      	addeq	r5, r6, #2
 8005c66:	e7ca      	b.n	8005bfe <_strtol_l.constprop.0+0x3a>
 8005c68:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005c6c:	f1bc 0f19 	cmp.w	ip, #25
 8005c70:	d801      	bhi.n	8005c76 <_strtol_l.constprop.0+0xb2>
 8005c72:	3c37      	subs	r4, #55	; 0x37
 8005c74:	e7e2      	b.n	8005c3c <_strtol_l.constprop.0+0x78>
 8005c76:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005c7a:	f1bc 0f19 	cmp.w	ip, #25
 8005c7e:	d804      	bhi.n	8005c8a <_strtol_l.constprop.0+0xc6>
 8005c80:	3c57      	subs	r4, #87	; 0x57
 8005c82:	e7db      	b.n	8005c3c <_strtol_l.constprop.0+0x78>
 8005c84:	f04f 3eff 	mov.w	lr, #4294967295
 8005c88:	e7e6      	b.n	8005c58 <_strtol_l.constprop.0+0x94>
 8005c8a:	f1be 3fff 	cmp.w	lr, #4294967295
 8005c8e:	d105      	bne.n	8005c9c <_strtol_l.constprop.0+0xd8>
 8005c90:	2322      	movs	r3, #34	; 0x22
 8005c92:	6003      	str	r3, [r0, #0]
 8005c94:	4646      	mov	r6, r8
 8005c96:	b942      	cbnz	r2, 8005caa <_strtol_l.constprop.0+0xe6>
 8005c98:	4630      	mov	r0, r6
 8005c9a:	e79e      	b.n	8005bda <_strtol_l.constprop.0+0x16>
 8005c9c:	b107      	cbz	r7, 8005ca0 <_strtol_l.constprop.0+0xdc>
 8005c9e:	4276      	negs	r6, r6
 8005ca0:	2a00      	cmp	r2, #0
 8005ca2:	d0f9      	beq.n	8005c98 <_strtol_l.constprop.0+0xd4>
 8005ca4:	f1be 0f00 	cmp.w	lr, #0
 8005ca8:	d000      	beq.n	8005cac <_strtol_l.constprop.0+0xe8>
 8005caa:	1e69      	subs	r1, r5, #1
 8005cac:	6011      	str	r1, [r2, #0]
 8005cae:	e7f3      	b.n	8005c98 <_strtol_l.constprop.0+0xd4>
 8005cb0:	2430      	movs	r4, #48	; 0x30
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1b1      	bne.n	8005c1a <_strtol_l.constprop.0+0x56>
 8005cb6:	2308      	movs	r3, #8
 8005cb8:	e7af      	b.n	8005c1a <_strtol_l.constprop.0+0x56>
 8005cba:	2c30      	cmp	r4, #48	; 0x30
 8005cbc:	d0a5      	beq.n	8005c0a <_strtol_l.constprop.0+0x46>
 8005cbe:	230a      	movs	r3, #10
 8005cc0:	e7ab      	b.n	8005c1a <_strtol_l.constprop.0+0x56>
 8005cc2:	bf00      	nop
 8005cc4:	08007131 	.word	0x08007131

08005cc8 <strtol>:
 8005cc8:	4613      	mov	r3, r2
 8005cca:	460a      	mov	r2, r1
 8005ccc:	4601      	mov	r1, r0
 8005cce:	4802      	ldr	r0, [pc, #8]	; (8005cd8 <strtol+0x10>)
 8005cd0:	6800      	ldr	r0, [r0, #0]
 8005cd2:	f7ff bf77 	b.w	8005bc4 <_strtol_l.constprop.0>
 8005cd6:	bf00      	nop
 8005cd8:	20000068 	.word	0x20000068

08005cdc <std>:
 8005cdc:	2300      	movs	r3, #0
 8005cde:	b510      	push	{r4, lr}
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ce6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cea:	6083      	str	r3, [r0, #8]
 8005cec:	8181      	strh	r1, [r0, #12]
 8005cee:	6643      	str	r3, [r0, #100]	; 0x64
 8005cf0:	81c2      	strh	r2, [r0, #14]
 8005cf2:	6183      	str	r3, [r0, #24]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	2208      	movs	r2, #8
 8005cf8:	305c      	adds	r0, #92	; 0x5c
 8005cfa:	f000 fa1f 	bl	800613c <memset>
 8005cfe:	4b05      	ldr	r3, [pc, #20]	; (8005d14 <std+0x38>)
 8005d00:	6263      	str	r3, [r4, #36]	; 0x24
 8005d02:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <std+0x3c>)
 8005d04:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d06:	4b05      	ldr	r3, [pc, #20]	; (8005d1c <std+0x40>)
 8005d08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d0a:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <std+0x44>)
 8005d0c:	6224      	str	r4, [r4, #32]
 8005d0e:	6323      	str	r3, [r4, #48]	; 0x30
 8005d10:	bd10      	pop	{r4, pc}
 8005d12:	bf00      	nop
 8005d14:	08005f19 	.word	0x08005f19
 8005d18:	08005f3b 	.word	0x08005f3b
 8005d1c:	08005f73 	.word	0x08005f73
 8005d20:	08005f97 	.word	0x08005f97

08005d24 <stdio_exit_handler>:
 8005d24:	4a02      	ldr	r2, [pc, #8]	; (8005d30 <stdio_exit_handler+0xc>)
 8005d26:	4903      	ldr	r1, [pc, #12]	; (8005d34 <stdio_exit_handler+0x10>)
 8005d28:	4803      	ldr	r0, [pc, #12]	; (8005d38 <stdio_exit_handler+0x14>)
 8005d2a:	f000 b869 	b.w	8005e00 <_fwalk_sglue>
 8005d2e:	bf00      	nop
 8005d30:	20000010 	.word	0x20000010
 8005d34:	08006c8d 	.word	0x08006c8d
 8005d38:	2000001c 	.word	0x2000001c

08005d3c <cleanup_stdio>:
 8005d3c:	6841      	ldr	r1, [r0, #4]
 8005d3e:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <cleanup_stdio+0x34>)
 8005d40:	4299      	cmp	r1, r3
 8005d42:	b510      	push	{r4, lr}
 8005d44:	4604      	mov	r4, r0
 8005d46:	d001      	beq.n	8005d4c <cleanup_stdio+0x10>
 8005d48:	f000 ffa0 	bl	8006c8c <_fflush_r>
 8005d4c:	68a1      	ldr	r1, [r4, #8]
 8005d4e:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <cleanup_stdio+0x38>)
 8005d50:	4299      	cmp	r1, r3
 8005d52:	d002      	beq.n	8005d5a <cleanup_stdio+0x1e>
 8005d54:	4620      	mov	r0, r4
 8005d56:	f000 ff99 	bl	8006c8c <_fflush_r>
 8005d5a:	68e1      	ldr	r1, [r4, #12]
 8005d5c:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <cleanup_stdio+0x3c>)
 8005d5e:	4299      	cmp	r1, r3
 8005d60:	d004      	beq.n	8005d6c <cleanup_stdio+0x30>
 8005d62:	4620      	mov	r0, r4
 8005d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d68:	f000 bf90 	b.w	8006c8c <_fflush_r>
 8005d6c:	bd10      	pop	{r4, pc}
 8005d6e:	bf00      	nop
 8005d70:	2000027c 	.word	0x2000027c
 8005d74:	200002e4 	.word	0x200002e4
 8005d78:	2000034c 	.word	0x2000034c

08005d7c <global_stdio_init.part.0>:
 8005d7c:	b510      	push	{r4, lr}
 8005d7e:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <global_stdio_init.part.0+0x30>)
 8005d80:	4c0b      	ldr	r4, [pc, #44]	; (8005db0 <global_stdio_init.part.0+0x34>)
 8005d82:	4a0c      	ldr	r2, [pc, #48]	; (8005db4 <global_stdio_init.part.0+0x38>)
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	4620      	mov	r0, r4
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2104      	movs	r1, #4
 8005d8c:	f7ff ffa6 	bl	8005cdc <std>
 8005d90:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005d94:	2201      	movs	r2, #1
 8005d96:	2109      	movs	r1, #9
 8005d98:	f7ff ffa0 	bl	8005cdc <std>
 8005d9c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005da0:	2202      	movs	r2, #2
 8005da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005da6:	2112      	movs	r1, #18
 8005da8:	f7ff bf98 	b.w	8005cdc <std>
 8005dac:	200003b4 	.word	0x200003b4
 8005db0:	2000027c 	.word	0x2000027c
 8005db4:	08005d25 	.word	0x08005d25

08005db8 <__sfp_lock_acquire>:
 8005db8:	4801      	ldr	r0, [pc, #4]	; (8005dc0 <__sfp_lock_acquire+0x8>)
 8005dba:	f000 ba67 	b.w	800628c <__retarget_lock_acquire_recursive>
 8005dbe:	bf00      	nop
 8005dc0:	200003bd 	.word	0x200003bd

08005dc4 <__sfp_lock_release>:
 8005dc4:	4801      	ldr	r0, [pc, #4]	; (8005dcc <__sfp_lock_release+0x8>)
 8005dc6:	f000 ba62 	b.w	800628e <__retarget_lock_release_recursive>
 8005dca:	bf00      	nop
 8005dcc:	200003bd 	.word	0x200003bd

08005dd0 <__sinit>:
 8005dd0:	b510      	push	{r4, lr}
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	f7ff fff0 	bl	8005db8 <__sfp_lock_acquire>
 8005dd8:	6a23      	ldr	r3, [r4, #32]
 8005dda:	b11b      	cbz	r3, 8005de4 <__sinit+0x14>
 8005ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005de0:	f7ff bff0 	b.w	8005dc4 <__sfp_lock_release>
 8005de4:	4b04      	ldr	r3, [pc, #16]	; (8005df8 <__sinit+0x28>)
 8005de6:	6223      	str	r3, [r4, #32]
 8005de8:	4b04      	ldr	r3, [pc, #16]	; (8005dfc <__sinit+0x2c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1f5      	bne.n	8005ddc <__sinit+0xc>
 8005df0:	f7ff ffc4 	bl	8005d7c <global_stdio_init.part.0>
 8005df4:	e7f2      	b.n	8005ddc <__sinit+0xc>
 8005df6:	bf00      	nop
 8005df8:	08005d3d 	.word	0x08005d3d
 8005dfc:	200003b4 	.word	0x200003b4

08005e00 <_fwalk_sglue>:
 8005e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e04:	4607      	mov	r7, r0
 8005e06:	4688      	mov	r8, r1
 8005e08:	4614      	mov	r4, r2
 8005e0a:	2600      	movs	r6, #0
 8005e0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e10:	f1b9 0901 	subs.w	r9, r9, #1
 8005e14:	d505      	bpl.n	8005e22 <_fwalk_sglue+0x22>
 8005e16:	6824      	ldr	r4, [r4, #0]
 8005e18:	2c00      	cmp	r4, #0
 8005e1a:	d1f7      	bne.n	8005e0c <_fwalk_sglue+0xc>
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e22:	89ab      	ldrh	r3, [r5, #12]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d907      	bls.n	8005e38 <_fwalk_sglue+0x38>
 8005e28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	d003      	beq.n	8005e38 <_fwalk_sglue+0x38>
 8005e30:	4629      	mov	r1, r5
 8005e32:	4638      	mov	r0, r7
 8005e34:	47c0      	blx	r8
 8005e36:	4306      	orrs	r6, r0
 8005e38:	3568      	adds	r5, #104	; 0x68
 8005e3a:	e7e9      	b.n	8005e10 <_fwalk_sglue+0x10>

08005e3c <iprintf>:
 8005e3c:	b40f      	push	{r0, r1, r2, r3}
 8005e3e:	b507      	push	{r0, r1, r2, lr}
 8005e40:	4906      	ldr	r1, [pc, #24]	; (8005e5c <iprintf+0x20>)
 8005e42:	ab04      	add	r3, sp, #16
 8005e44:	6808      	ldr	r0, [r1, #0]
 8005e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e4a:	6881      	ldr	r1, [r0, #8]
 8005e4c:	9301      	str	r3, [sp, #4]
 8005e4e:	f000 fbed 	bl	800662c <_vfiprintf_r>
 8005e52:	b003      	add	sp, #12
 8005e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e58:	b004      	add	sp, #16
 8005e5a:	4770      	bx	lr
 8005e5c:	20000068 	.word	0x20000068

08005e60 <_puts_r>:
 8005e60:	6a03      	ldr	r3, [r0, #32]
 8005e62:	b570      	push	{r4, r5, r6, lr}
 8005e64:	6884      	ldr	r4, [r0, #8]
 8005e66:	4605      	mov	r5, r0
 8005e68:	460e      	mov	r6, r1
 8005e6a:	b90b      	cbnz	r3, 8005e70 <_puts_r+0x10>
 8005e6c:	f7ff ffb0 	bl	8005dd0 <__sinit>
 8005e70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e72:	07db      	lsls	r3, r3, #31
 8005e74:	d405      	bmi.n	8005e82 <_puts_r+0x22>
 8005e76:	89a3      	ldrh	r3, [r4, #12]
 8005e78:	0598      	lsls	r0, r3, #22
 8005e7a:	d402      	bmi.n	8005e82 <_puts_r+0x22>
 8005e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e7e:	f000 fa05 	bl	800628c <__retarget_lock_acquire_recursive>
 8005e82:	89a3      	ldrh	r3, [r4, #12]
 8005e84:	0719      	lsls	r1, r3, #28
 8005e86:	d513      	bpl.n	8005eb0 <_puts_r+0x50>
 8005e88:	6923      	ldr	r3, [r4, #16]
 8005e8a:	b18b      	cbz	r3, 8005eb0 <_puts_r+0x50>
 8005e8c:	3e01      	subs	r6, #1
 8005e8e:	68a3      	ldr	r3, [r4, #8]
 8005e90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e94:	3b01      	subs	r3, #1
 8005e96:	60a3      	str	r3, [r4, #8]
 8005e98:	b9e9      	cbnz	r1, 8005ed6 <_puts_r+0x76>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	da2e      	bge.n	8005efc <_puts_r+0x9c>
 8005e9e:	4622      	mov	r2, r4
 8005ea0:	210a      	movs	r1, #10
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f000 f8b4 	bl	8006010 <__swbuf_r>
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d007      	beq.n	8005ebc <_puts_r+0x5c>
 8005eac:	250a      	movs	r5, #10
 8005eae:	e007      	b.n	8005ec0 <_puts_r+0x60>
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	f000 f8ea 	bl	800608c <__swsetup_r>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d0e7      	beq.n	8005e8c <_puts_r+0x2c>
 8005ebc:	f04f 35ff 	mov.w	r5, #4294967295
 8005ec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ec2:	07da      	lsls	r2, r3, #31
 8005ec4:	d405      	bmi.n	8005ed2 <_puts_r+0x72>
 8005ec6:	89a3      	ldrh	r3, [r4, #12]
 8005ec8:	059b      	lsls	r3, r3, #22
 8005eca:	d402      	bmi.n	8005ed2 <_puts_r+0x72>
 8005ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ece:	f000 f9de 	bl	800628e <__retarget_lock_release_recursive>
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	bd70      	pop	{r4, r5, r6, pc}
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	da04      	bge.n	8005ee4 <_puts_r+0x84>
 8005eda:	69a2      	ldr	r2, [r4, #24]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	dc06      	bgt.n	8005eee <_puts_r+0x8e>
 8005ee0:	290a      	cmp	r1, #10
 8005ee2:	d004      	beq.n	8005eee <_puts_r+0x8e>
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	6022      	str	r2, [r4, #0]
 8005eea:	7019      	strb	r1, [r3, #0]
 8005eec:	e7cf      	b.n	8005e8e <_puts_r+0x2e>
 8005eee:	4622      	mov	r2, r4
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	f000 f88d 	bl	8006010 <__swbuf_r>
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	d1c9      	bne.n	8005e8e <_puts_r+0x2e>
 8005efa:	e7df      	b.n	8005ebc <_puts_r+0x5c>
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	250a      	movs	r5, #10
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	6022      	str	r2, [r4, #0]
 8005f04:	701d      	strb	r5, [r3, #0]
 8005f06:	e7db      	b.n	8005ec0 <_puts_r+0x60>

08005f08 <puts>:
 8005f08:	4b02      	ldr	r3, [pc, #8]	; (8005f14 <puts+0xc>)
 8005f0a:	4601      	mov	r1, r0
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	f7ff bfa7 	b.w	8005e60 <_puts_r>
 8005f12:	bf00      	nop
 8005f14:	20000068 	.word	0x20000068

08005f18 <__sread>:
 8005f18:	b510      	push	{r4, lr}
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f20:	f000 f956 	bl	80061d0 <_read_r>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	bfab      	itete	ge
 8005f28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f2a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f2c:	181b      	addge	r3, r3, r0
 8005f2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f32:	bfac      	ite	ge
 8005f34:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f36:	81a3      	strhlt	r3, [r4, #12]
 8005f38:	bd10      	pop	{r4, pc}

08005f3a <__swrite>:
 8005f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3e:	461f      	mov	r7, r3
 8005f40:	898b      	ldrh	r3, [r1, #12]
 8005f42:	05db      	lsls	r3, r3, #23
 8005f44:	4605      	mov	r5, r0
 8005f46:	460c      	mov	r4, r1
 8005f48:	4616      	mov	r6, r2
 8005f4a:	d505      	bpl.n	8005f58 <__swrite+0x1e>
 8005f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f50:	2302      	movs	r3, #2
 8005f52:	2200      	movs	r2, #0
 8005f54:	f000 f92a 	bl	80061ac <_lseek_r>
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f62:	81a3      	strh	r3, [r4, #12]
 8005f64:	4632      	mov	r2, r6
 8005f66:	463b      	mov	r3, r7
 8005f68:	4628      	mov	r0, r5
 8005f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6e:	f000 b951 	b.w	8006214 <_write_r>

08005f72 <__sseek>:
 8005f72:	b510      	push	{r4, lr}
 8005f74:	460c      	mov	r4, r1
 8005f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f7a:	f000 f917 	bl	80061ac <_lseek_r>
 8005f7e:	1c43      	adds	r3, r0, #1
 8005f80:	89a3      	ldrh	r3, [r4, #12]
 8005f82:	bf15      	itete	ne
 8005f84:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f8e:	81a3      	strheq	r3, [r4, #12]
 8005f90:	bf18      	it	ne
 8005f92:	81a3      	strhne	r3, [r4, #12]
 8005f94:	bd10      	pop	{r4, pc}

08005f96 <__sclose>:
 8005f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f9a:	f000 b8f7 	b.w	800618c <_close_r>

08005f9e <_vsniprintf_r>:
 8005f9e:	b530      	push	{r4, r5, lr}
 8005fa0:	4614      	mov	r4, r2
 8005fa2:	2c00      	cmp	r4, #0
 8005fa4:	b09b      	sub	sp, #108	; 0x6c
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	461a      	mov	r2, r3
 8005faa:	da05      	bge.n	8005fb8 <_vsniprintf_r+0x1a>
 8005fac:	238b      	movs	r3, #139	; 0x8b
 8005fae:	6003      	str	r3, [r0, #0]
 8005fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb4:	b01b      	add	sp, #108	; 0x6c
 8005fb6:	bd30      	pop	{r4, r5, pc}
 8005fb8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005fbc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005fc0:	bf14      	ite	ne
 8005fc2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005fc6:	4623      	moveq	r3, r4
 8005fc8:	9302      	str	r3, [sp, #8]
 8005fca:	9305      	str	r3, [sp, #20]
 8005fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fd0:	9100      	str	r1, [sp, #0]
 8005fd2:	9104      	str	r1, [sp, #16]
 8005fd4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005fd8:	4669      	mov	r1, sp
 8005fda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005fdc:	f000 f9fe 	bl	80063dc <_svfiprintf_r>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	bfbc      	itt	lt
 8005fe4:	238b      	movlt	r3, #139	; 0x8b
 8005fe6:	602b      	strlt	r3, [r5, #0]
 8005fe8:	2c00      	cmp	r4, #0
 8005fea:	d0e3      	beq.n	8005fb4 <_vsniprintf_r+0x16>
 8005fec:	9b00      	ldr	r3, [sp, #0]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	e7df      	b.n	8005fb4 <_vsniprintf_r+0x16>

08005ff4 <vsniprintf>:
 8005ff4:	b507      	push	{r0, r1, r2, lr}
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	460a      	mov	r2, r1
 8005ffc:	4601      	mov	r1, r0
 8005ffe:	4803      	ldr	r0, [pc, #12]	; (800600c <vsniprintf+0x18>)
 8006000:	6800      	ldr	r0, [r0, #0]
 8006002:	f7ff ffcc 	bl	8005f9e <_vsniprintf_r>
 8006006:	b003      	add	sp, #12
 8006008:	f85d fb04 	ldr.w	pc, [sp], #4
 800600c:	20000068 	.word	0x20000068

08006010 <__swbuf_r>:
 8006010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006012:	460e      	mov	r6, r1
 8006014:	4614      	mov	r4, r2
 8006016:	4605      	mov	r5, r0
 8006018:	b118      	cbz	r0, 8006022 <__swbuf_r+0x12>
 800601a:	6a03      	ldr	r3, [r0, #32]
 800601c:	b90b      	cbnz	r3, 8006022 <__swbuf_r+0x12>
 800601e:	f7ff fed7 	bl	8005dd0 <__sinit>
 8006022:	69a3      	ldr	r3, [r4, #24]
 8006024:	60a3      	str	r3, [r4, #8]
 8006026:	89a3      	ldrh	r3, [r4, #12]
 8006028:	071a      	lsls	r2, r3, #28
 800602a:	d525      	bpl.n	8006078 <__swbuf_r+0x68>
 800602c:	6923      	ldr	r3, [r4, #16]
 800602e:	b31b      	cbz	r3, 8006078 <__swbuf_r+0x68>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	6922      	ldr	r2, [r4, #16]
 8006034:	1a98      	subs	r0, r3, r2
 8006036:	6963      	ldr	r3, [r4, #20]
 8006038:	b2f6      	uxtb	r6, r6
 800603a:	4283      	cmp	r3, r0
 800603c:	4637      	mov	r7, r6
 800603e:	dc04      	bgt.n	800604a <__swbuf_r+0x3a>
 8006040:	4621      	mov	r1, r4
 8006042:	4628      	mov	r0, r5
 8006044:	f000 fe22 	bl	8006c8c <_fflush_r>
 8006048:	b9e0      	cbnz	r0, 8006084 <__swbuf_r+0x74>
 800604a:	68a3      	ldr	r3, [r4, #8]
 800604c:	3b01      	subs	r3, #1
 800604e:	60a3      	str	r3, [r4, #8]
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	6022      	str	r2, [r4, #0]
 8006056:	701e      	strb	r6, [r3, #0]
 8006058:	6962      	ldr	r2, [r4, #20]
 800605a:	1c43      	adds	r3, r0, #1
 800605c:	429a      	cmp	r2, r3
 800605e:	d004      	beq.n	800606a <__swbuf_r+0x5a>
 8006060:	89a3      	ldrh	r3, [r4, #12]
 8006062:	07db      	lsls	r3, r3, #31
 8006064:	d506      	bpl.n	8006074 <__swbuf_r+0x64>
 8006066:	2e0a      	cmp	r6, #10
 8006068:	d104      	bne.n	8006074 <__swbuf_r+0x64>
 800606a:	4621      	mov	r1, r4
 800606c:	4628      	mov	r0, r5
 800606e:	f000 fe0d 	bl	8006c8c <_fflush_r>
 8006072:	b938      	cbnz	r0, 8006084 <__swbuf_r+0x74>
 8006074:	4638      	mov	r0, r7
 8006076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006078:	4621      	mov	r1, r4
 800607a:	4628      	mov	r0, r5
 800607c:	f000 f806 	bl	800608c <__swsetup_r>
 8006080:	2800      	cmp	r0, #0
 8006082:	d0d5      	beq.n	8006030 <__swbuf_r+0x20>
 8006084:	f04f 37ff 	mov.w	r7, #4294967295
 8006088:	e7f4      	b.n	8006074 <__swbuf_r+0x64>
	...

0800608c <__swsetup_r>:
 800608c:	b538      	push	{r3, r4, r5, lr}
 800608e:	4b2a      	ldr	r3, [pc, #168]	; (8006138 <__swsetup_r+0xac>)
 8006090:	4605      	mov	r5, r0
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	460c      	mov	r4, r1
 8006096:	b118      	cbz	r0, 80060a0 <__swsetup_r+0x14>
 8006098:	6a03      	ldr	r3, [r0, #32]
 800609a:	b90b      	cbnz	r3, 80060a0 <__swsetup_r+0x14>
 800609c:	f7ff fe98 	bl	8005dd0 <__sinit>
 80060a0:	89a3      	ldrh	r3, [r4, #12]
 80060a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060a6:	0718      	lsls	r0, r3, #28
 80060a8:	d422      	bmi.n	80060f0 <__swsetup_r+0x64>
 80060aa:	06d9      	lsls	r1, r3, #27
 80060ac:	d407      	bmi.n	80060be <__swsetup_r+0x32>
 80060ae:	2309      	movs	r3, #9
 80060b0:	602b      	str	r3, [r5, #0]
 80060b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060b6:	81a3      	strh	r3, [r4, #12]
 80060b8:	f04f 30ff 	mov.w	r0, #4294967295
 80060bc:	e034      	b.n	8006128 <__swsetup_r+0x9c>
 80060be:	0758      	lsls	r0, r3, #29
 80060c0:	d512      	bpl.n	80060e8 <__swsetup_r+0x5c>
 80060c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060c4:	b141      	cbz	r1, 80060d8 <__swsetup_r+0x4c>
 80060c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060ca:	4299      	cmp	r1, r3
 80060cc:	d002      	beq.n	80060d4 <__swsetup_r+0x48>
 80060ce:	4628      	mov	r0, r5
 80060d0:	f000 f8de 	bl	8006290 <_free_r>
 80060d4:	2300      	movs	r3, #0
 80060d6:	6363      	str	r3, [r4, #52]	; 0x34
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060de:	81a3      	strh	r3, [r4, #12]
 80060e0:	2300      	movs	r3, #0
 80060e2:	6063      	str	r3, [r4, #4]
 80060e4:	6923      	ldr	r3, [r4, #16]
 80060e6:	6023      	str	r3, [r4, #0]
 80060e8:	89a3      	ldrh	r3, [r4, #12]
 80060ea:	f043 0308 	orr.w	r3, r3, #8
 80060ee:	81a3      	strh	r3, [r4, #12]
 80060f0:	6923      	ldr	r3, [r4, #16]
 80060f2:	b94b      	cbnz	r3, 8006108 <__swsetup_r+0x7c>
 80060f4:	89a3      	ldrh	r3, [r4, #12]
 80060f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060fe:	d003      	beq.n	8006108 <__swsetup_r+0x7c>
 8006100:	4621      	mov	r1, r4
 8006102:	4628      	mov	r0, r5
 8006104:	f000 fe10 	bl	8006d28 <__smakebuf_r>
 8006108:	89a0      	ldrh	r0, [r4, #12]
 800610a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800610e:	f010 0301 	ands.w	r3, r0, #1
 8006112:	d00a      	beq.n	800612a <__swsetup_r+0x9e>
 8006114:	2300      	movs	r3, #0
 8006116:	60a3      	str	r3, [r4, #8]
 8006118:	6963      	ldr	r3, [r4, #20]
 800611a:	425b      	negs	r3, r3
 800611c:	61a3      	str	r3, [r4, #24]
 800611e:	6923      	ldr	r3, [r4, #16]
 8006120:	b943      	cbnz	r3, 8006134 <__swsetup_r+0xa8>
 8006122:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006126:	d1c4      	bne.n	80060b2 <__swsetup_r+0x26>
 8006128:	bd38      	pop	{r3, r4, r5, pc}
 800612a:	0781      	lsls	r1, r0, #30
 800612c:	bf58      	it	pl
 800612e:	6963      	ldrpl	r3, [r4, #20]
 8006130:	60a3      	str	r3, [r4, #8]
 8006132:	e7f4      	b.n	800611e <__swsetup_r+0x92>
 8006134:	2000      	movs	r0, #0
 8006136:	e7f7      	b.n	8006128 <__swsetup_r+0x9c>
 8006138:	20000068 	.word	0x20000068

0800613c <memset>:
 800613c:	4402      	add	r2, r0
 800613e:	4603      	mov	r3, r0
 8006140:	4293      	cmp	r3, r2
 8006142:	d100      	bne.n	8006146 <memset+0xa>
 8006144:	4770      	bx	lr
 8006146:	f803 1b01 	strb.w	r1, [r3], #1
 800614a:	e7f9      	b.n	8006140 <memset+0x4>

0800614c <strchr>:
 800614c:	b2c9      	uxtb	r1, r1
 800614e:	4603      	mov	r3, r0
 8006150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006154:	b11a      	cbz	r2, 800615e <strchr+0x12>
 8006156:	428a      	cmp	r2, r1
 8006158:	d1f9      	bne.n	800614e <strchr+0x2>
 800615a:	4618      	mov	r0, r3
 800615c:	4770      	bx	lr
 800615e:	2900      	cmp	r1, #0
 8006160:	bf18      	it	ne
 8006162:	2300      	movne	r3, #0
 8006164:	e7f9      	b.n	800615a <strchr+0xe>

08006166 <strncpy>:
 8006166:	b510      	push	{r4, lr}
 8006168:	3901      	subs	r1, #1
 800616a:	4603      	mov	r3, r0
 800616c:	b132      	cbz	r2, 800617c <strncpy+0x16>
 800616e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006172:	f803 4b01 	strb.w	r4, [r3], #1
 8006176:	3a01      	subs	r2, #1
 8006178:	2c00      	cmp	r4, #0
 800617a:	d1f7      	bne.n	800616c <strncpy+0x6>
 800617c:	441a      	add	r2, r3
 800617e:	2100      	movs	r1, #0
 8006180:	4293      	cmp	r3, r2
 8006182:	d100      	bne.n	8006186 <strncpy+0x20>
 8006184:	bd10      	pop	{r4, pc}
 8006186:	f803 1b01 	strb.w	r1, [r3], #1
 800618a:	e7f9      	b.n	8006180 <strncpy+0x1a>

0800618c <_close_r>:
 800618c:	b538      	push	{r3, r4, r5, lr}
 800618e:	4d06      	ldr	r5, [pc, #24]	; (80061a8 <_close_r+0x1c>)
 8006190:	2300      	movs	r3, #0
 8006192:	4604      	mov	r4, r0
 8006194:	4608      	mov	r0, r1
 8006196:	602b      	str	r3, [r5, #0]
 8006198:	f7fc f8a9 	bl	80022ee <_close>
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	d102      	bne.n	80061a6 <_close_r+0x1a>
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	b103      	cbz	r3, 80061a6 <_close_r+0x1a>
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	bd38      	pop	{r3, r4, r5, pc}
 80061a8:	200003b8 	.word	0x200003b8

080061ac <_lseek_r>:
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	4d07      	ldr	r5, [pc, #28]	; (80061cc <_lseek_r+0x20>)
 80061b0:	4604      	mov	r4, r0
 80061b2:	4608      	mov	r0, r1
 80061b4:	4611      	mov	r1, r2
 80061b6:	2200      	movs	r2, #0
 80061b8:	602a      	str	r2, [r5, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	f7fc f8be 	bl	800233c <_lseek>
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	d102      	bne.n	80061ca <_lseek_r+0x1e>
 80061c4:	682b      	ldr	r3, [r5, #0]
 80061c6:	b103      	cbz	r3, 80061ca <_lseek_r+0x1e>
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	bd38      	pop	{r3, r4, r5, pc}
 80061cc:	200003b8 	.word	0x200003b8

080061d0 <_read_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4d07      	ldr	r5, [pc, #28]	; (80061f0 <_read_r+0x20>)
 80061d4:	4604      	mov	r4, r0
 80061d6:	4608      	mov	r0, r1
 80061d8:	4611      	mov	r1, r2
 80061da:	2200      	movs	r2, #0
 80061dc:	602a      	str	r2, [r5, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	f7fc f84c 	bl	800227c <_read>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d102      	bne.n	80061ee <_read_r+0x1e>
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	b103      	cbz	r3, 80061ee <_read_r+0x1e>
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	bd38      	pop	{r3, r4, r5, pc}
 80061f0:	200003b8 	.word	0x200003b8

080061f4 <_sbrk_r>:
 80061f4:	b538      	push	{r3, r4, r5, lr}
 80061f6:	4d06      	ldr	r5, [pc, #24]	; (8006210 <_sbrk_r+0x1c>)
 80061f8:	2300      	movs	r3, #0
 80061fa:	4604      	mov	r4, r0
 80061fc:	4608      	mov	r0, r1
 80061fe:	602b      	str	r3, [r5, #0]
 8006200:	f7fc f8aa 	bl	8002358 <_sbrk>
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	d102      	bne.n	800620e <_sbrk_r+0x1a>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	b103      	cbz	r3, 800620e <_sbrk_r+0x1a>
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	bd38      	pop	{r3, r4, r5, pc}
 8006210:	200003b8 	.word	0x200003b8

08006214 <_write_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4d07      	ldr	r5, [pc, #28]	; (8006234 <_write_r+0x20>)
 8006218:	4604      	mov	r4, r0
 800621a:	4608      	mov	r0, r1
 800621c:	4611      	mov	r1, r2
 800621e:	2200      	movs	r2, #0
 8006220:	602a      	str	r2, [r5, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	f7fc f847 	bl	80022b6 <_write>
 8006228:	1c43      	adds	r3, r0, #1
 800622a:	d102      	bne.n	8006232 <_write_r+0x1e>
 800622c:	682b      	ldr	r3, [r5, #0]
 800622e:	b103      	cbz	r3, 8006232 <_write_r+0x1e>
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	bd38      	pop	{r3, r4, r5, pc}
 8006234:	200003b8 	.word	0x200003b8

08006238 <__errno>:
 8006238:	4b01      	ldr	r3, [pc, #4]	; (8006240 <__errno+0x8>)
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	20000068 	.word	0x20000068

08006244 <__libc_init_array>:
 8006244:	b570      	push	{r4, r5, r6, lr}
 8006246:	4d0d      	ldr	r5, [pc, #52]	; (800627c <__libc_init_array+0x38>)
 8006248:	4c0d      	ldr	r4, [pc, #52]	; (8006280 <__libc_init_array+0x3c>)
 800624a:	1b64      	subs	r4, r4, r5
 800624c:	10a4      	asrs	r4, r4, #2
 800624e:	2600      	movs	r6, #0
 8006250:	42a6      	cmp	r6, r4
 8006252:	d109      	bne.n	8006268 <__libc_init_array+0x24>
 8006254:	4d0b      	ldr	r5, [pc, #44]	; (8006284 <__libc_init_array+0x40>)
 8006256:	4c0c      	ldr	r4, [pc, #48]	; (8006288 <__libc_init_array+0x44>)
 8006258:	f000 fe9c 	bl	8006f94 <_init>
 800625c:	1b64      	subs	r4, r4, r5
 800625e:	10a4      	asrs	r4, r4, #2
 8006260:	2600      	movs	r6, #0
 8006262:	42a6      	cmp	r6, r4
 8006264:	d105      	bne.n	8006272 <__libc_init_array+0x2e>
 8006266:	bd70      	pop	{r4, r5, r6, pc}
 8006268:	f855 3b04 	ldr.w	r3, [r5], #4
 800626c:	4798      	blx	r3
 800626e:	3601      	adds	r6, #1
 8006270:	e7ee      	b.n	8006250 <__libc_init_array+0xc>
 8006272:	f855 3b04 	ldr.w	r3, [r5], #4
 8006276:	4798      	blx	r3
 8006278:	3601      	adds	r6, #1
 800627a:	e7f2      	b.n	8006262 <__libc_init_array+0x1e>
 800627c:	08007264 	.word	0x08007264
 8006280:	08007264 	.word	0x08007264
 8006284:	08007264 	.word	0x08007264
 8006288:	08007268 	.word	0x08007268

0800628c <__retarget_lock_acquire_recursive>:
 800628c:	4770      	bx	lr

0800628e <__retarget_lock_release_recursive>:
 800628e:	4770      	bx	lr

08006290 <_free_r>:
 8006290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006292:	2900      	cmp	r1, #0
 8006294:	d044      	beq.n	8006320 <_free_r+0x90>
 8006296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800629a:	9001      	str	r0, [sp, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f1a1 0404 	sub.w	r4, r1, #4
 80062a2:	bfb8      	it	lt
 80062a4:	18e4      	addlt	r4, r4, r3
 80062a6:	f7ff fc81 	bl	8005bac <__malloc_lock>
 80062aa:	4a1e      	ldr	r2, [pc, #120]	; (8006324 <_free_r+0x94>)
 80062ac:	9801      	ldr	r0, [sp, #4]
 80062ae:	6813      	ldr	r3, [r2, #0]
 80062b0:	b933      	cbnz	r3, 80062c0 <_free_r+0x30>
 80062b2:	6063      	str	r3, [r4, #4]
 80062b4:	6014      	str	r4, [r2, #0]
 80062b6:	b003      	add	sp, #12
 80062b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062bc:	f7ff bc7c 	b.w	8005bb8 <__malloc_unlock>
 80062c0:	42a3      	cmp	r3, r4
 80062c2:	d908      	bls.n	80062d6 <_free_r+0x46>
 80062c4:	6825      	ldr	r5, [r4, #0]
 80062c6:	1961      	adds	r1, r4, r5
 80062c8:	428b      	cmp	r3, r1
 80062ca:	bf01      	itttt	eq
 80062cc:	6819      	ldreq	r1, [r3, #0]
 80062ce:	685b      	ldreq	r3, [r3, #4]
 80062d0:	1949      	addeq	r1, r1, r5
 80062d2:	6021      	streq	r1, [r4, #0]
 80062d4:	e7ed      	b.n	80062b2 <_free_r+0x22>
 80062d6:	461a      	mov	r2, r3
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	b10b      	cbz	r3, 80062e0 <_free_r+0x50>
 80062dc:	42a3      	cmp	r3, r4
 80062de:	d9fa      	bls.n	80062d6 <_free_r+0x46>
 80062e0:	6811      	ldr	r1, [r2, #0]
 80062e2:	1855      	adds	r5, r2, r1
 80062e4:	42a5      	cmp	r5, r4
 80062e6:	d10b      	bne.n	8006300 <_free_r+0x70>
 80062e8:	6824      	ldr	r4, [r4, #0]
 80062ea:	4421      	add	r1, r4
 80062ec:	1854      	adds	r4, r2, r1
 80062ee:	42a3      	cmp	r3, r4
 80062f0:	6011      	str	r1, [r2, #0]
 80062f2:	d1e0      	bne.n	80062b6 <_free_r+0x26>
 80062f4:	681c      	ldr	r4, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	6053      	str	r3, [r2, #4]
 80062fa:	440c      	add	r4, r1
 80062fc:	6014      	str	r4, [r2, #0]
 80062fe:	e7da      	b.n	80062b6 <_free_r+0x26>
 8006300:	d902      	bls.n	8006308 <_free_r+0x78>
 8006302:	230c      	movs	r3, #12
 8006304:	6003      	str	r3, [r0, #0]
 8006306:	e7d6      	b.n	80062b6 <_free_r+0x26>
 8006308:	6825      	ldr	r5, [r4, #0]
 800630a:	1961      	adds	r1, r4, r5
 800630c:	428b      	cmp	r3, r1
 800630e:	bf04      	itt	eq
 8006310:	6819      	ldreq	r1, [r3, #0]
 8006312:	685b      	ldreq	r3, [r3, #4]
 8006314:	6063      	str	r3, [r4, #4]
 8006316:	bf04      	itt	eq
 8006318:	1949      	addeq	r1, r1, r5
 800631a:	6021      	streq	r1, [r4, #0]
 800631c:	6054      	str	r4, [r2, #4]
 800631e:	e7ca      	b.n	80062b6 <_free_r+0x26>
 8006320:	b003      	add	sp, #12
 8006322:	bd30      	pop	{r4, r5, pc}
 8006324:	20000274 	.word	0x20000274

08006328 <__ssputs_r>:
 8006328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800632c:	688e      	ldr	r6, [r1, #8]
 800632e:	461f      	mov	r7, r3
 8006330:	42be      	cmp	r6, r7
 8006332:	680b      	ldr	r3, [r1, #0]
 8006334:	4682      	mov	sl, r0
 8006336:	460c      	mov	r4, r1
 8006338:	4690      	mov	r8, r2
 800633a:	d82c      	bhi.n	8006396 <__ssputs_r+0x6e>
 800633c:	898a      	ldrh	r2, [r1, #12]
 800633e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006342:	d026      	beq.n	8006392 <__ssputs_r+0x6a>
 8006344:	6965      	ldr	r5, [r4, #20]
 8006346:	6909      	ldr	r1, [r1, #16]
 8006348:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800634c:	eba3 0901 	sub.w	r9, r3, r1
 8006350:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006354:	1c7b      	adds	r3, r7, #1
 8006356:	444b      	add	r3, r9
 8006358:	106d      	asrs	r5, r5, #1
 800635a:	429d      	cmp	r5, r3
 800635c:	bf38      	it	cc
 800635e:	461d      	movcc	r5, r3
 8006360:	0553      	lsls	r3, r2, #21
 8006362:	d527      	bpl.n	80063b4 <__ssputs_r+0x8c>
 8006364:	4629      	mov	r1, r5
 8006366:	f7ff fba1 	bl	8005aac <_malloc_r>
 800636a:	4606      	mov	r6, r0
 800636c:	b360      	cbz	r0, 80063c8 <__ssputs_r+0xa0>
 800636e:	6921      	ldr	r1, [r4, #16]
 8006370:	464a      	mov	r2, r9
 8006372:	f000 fd51 	bl	8006e18 <memcpy>
 8006376:	89a3      	ldrh	r3, [r4, #12]
 8006378:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800637c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006380:	81a3      	strh	r3, [r4, #12]
 8006382:	6126      	str	r6, [r4, #16]
 8006384:	6165      	str	r5, [r4, #20]
 8006386:	444e      	add	r6, r9
 8006388:	eba5 0509 	sub.w	r5, r5, r9
 800638c:	6026      	str	r6, [r4, #0]
 800638e:	60a5      	str	r5, [r4, #8]
 8006390:	463e      	mov	r6, r7
 8006392:	42be      	cmp	r6, r7
 8006394:	d900      	bls.n	8006398 <__ssputs_r+0x70>
 8006396:	463e      	mov	r6, r7
 8006398:	6820      	ldr	r0, [r4, #0]
 800639a:	4632      	mov	r2, r6
 800639c:	4641      	mov	r1, r8
 800639e:	f000 fcff 	bl	8006da0 <memmove>
 80063a2:	68a3      	ldr	r3, [r4, #8]
 80063a4:	1b9b      	subs	r3, r3, r6
 80063a6:	60a3      	str	r3, [r4, #8]
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	4433      	add	r3, r6
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	2000      	movs	r0, #0
 80063b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b4:	462a      	mov	r2, r5
 80063b6:	f000 fd3d 	bl	8006e34 <_realloc_r>
 80063ba:	4606      	mov	r6, r0
 80063bc:	2800      	cmp	r0, #0
 80063be:	d1e0      	bne.n	8006382 <__ssputs_r+0x5a>
 80063c0:	6921      	ldr	r1, [r4, #16]
 80063c2:	4650      	mov	r0, sl
 80063c4:	f7ff ff64 	bl	8006290 <_free_r>
 80063c8:	230c      	movs	r3, #12
 80063ca:	f8ca 3000 	str.w	r3, [sl]
 80063ce:	89a3      	ldrh	r3, [r4, #12]
 80063d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063d4:	81a3      	strh	r3, [r4, #12]
 80063d6:	f04f 30ff 	mov.w	r0, #4294967295
 80063da:	e7e9      	b.n	80063b0 <__ssputs_r+0x88>

080063dc <_svfiprintf_r>:
 80063dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e0:	4698      	mov	r8, r3
 80063e2:	898b      	ldrh	r3, [r1, #12]
 80063e4:	061b      	lsls	r3, r3, #24
 80063e6:	b09d      	sub	sp, #116	; 0x74
 80063e8:	4607      	mov	r7, r0
 80063ea:	460d      	mov	r5, r1
 80063ec:	4614      	mov	r4, r2
 80063ee:	d50e      	bpl.n	800640e <_svfiprintf_r+0x32>
 80063f0:	690b      	ldr	r3, [r1, #16]
 80063f2:	b963      	cbnz	r3, 800640e <_svfiprintf_r+0x32>
 80063f4:	2140      	movs	r1, #64	; 0x40
 80063f6:	f7ff fb59 	bl	8005aac <_malloc_r>
 80063fa:	6028      	str	r0, [r5, #0]
 80063fc:	6128      	str	r0, [r5, #16]
 80063fe:	b920      	cbnz	r0, 800640a <_svfiprintf_r+0x2e>
 8006400:	230c      	movs	r3, #12
 8006402:	603b      	str	r3, [r7, #0]
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	e0d0      	b.n	80065ac <_svfiprintf_r+0x1d0>
 800640a:	2340      	movs	r3, #64	; 0x40
 800640c:	616b      	str	r3, [r5, #20]
 800640e:	2300      	movs	r3, #0
 8006410:	9309      	str	r3, [sp, #36]	; 0x24
 8006412:	2320      	movs	r3, #32
 8006414:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006418:	f8cd 800c 	str.w	r8, [sp, #12]
 800641c:	2330      	movs	r3, #48	; 0x30
 800641e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80065c4 <_svfiprintf_r+0x1e8>
 8006422:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006426:	f04f 0901 	mov.w	r9, #1
 800642a:	4623      	mov	r3, r4
 800642c:	469a      	mov	sl, r3
 800642e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006432:	b10a      	cbz	r2, 8006438 <_svfiprintf_r+0x5c>
 8006434:	2a25      	cmp	r2, #37	; 0x25
 8006436:	d1f9      	bne.n	800642c <_svfiprintf_r+0x50>
 8006438:	ebba 0b04 	subs.w	fp, sl, r4
 800643c:	d00b      	beq.n	8006456 <_svfiprintf_r+0x7a>
 800643e:	465b      	mov	r3, fp
 8006440:	4622      	mov	r2, r4
 8006442:	4629      	mov	r1, r5
 8006444:	4638      	mov	r0, r7
 8006446:	f7ff ff6f 	bl	8006328 <__ssputs_r>
 800644a:	3001      	adds	r0, #1
 800644c:	f000 80a9 	beq.w	80065a2 <_svfiprintf_r+0x1c6>
 8006450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006452:	445a      	add	r2, fp
 8006454:	9209      	str	r2, [sp, #36]	; 0x24
 8006456:	f89a 3000 	ldrb.w	r3, [sl]
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 80a1 	beq.w	80065a2 <_svfiprintf_r+0x1c6>
 8006460:	2300      	movs	r3, #0
 8006462:	f04f 32ff 	mov.w	r2, #4294967295
 8006466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800646a:	f10a 0a01 	add.w	sl, sl, #1
 800646e:	9304      	str	r3, [sp, #16]
 8006470:	9307      	str	r3, [sp, #28]
 8006472:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006476:	931a      	str	r3, [sp, #104]	; 0x68
 8006478:	4654      	mov	r4, sl
 800647a:	2205      	movs	r2, #5
 800647c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006480:	4850      	ldr	r0, [pc, #320]	; (80065c4 <_svfiprintf_r+0x1e8>)
 8006482:	f7f9 fec5 	bl	8000210 <memchr>
 8006486:	9a04      	ldr	r2, [sp, #16]
 8006488:	b9d8      	cbnz	r0, 80064c2 <_svfiprintf_r+0xe6>
 800648a:	06d0      	lsls	r0, r2, #27
 800648c:	bf44      	itt	mi
 800648e:	2320      	movmi	r3, #32
 8006490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006494:	0711      	lsls	r1, r2, #28
 8006496:	bf44      	itt	mi
 8006498:	232b      	movmi	r3, #43	; 0x2b
 800649a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800649e:	f89a 3000 	ldrb.w	r3, [sl]
 80064a2:	2b2a      	cmp	r3, #42	; 0x2a
 80064a4:	d015      	beq.n	80064d2 <_svfiprintf_r+0xf6>
 80064a6:	9a07      	ldr	r2, [sp, #28]
 80064a8:	4654      	mov	r4, sl
 80064aa:	2000      	movs	r0, #0
 80064ac:	f04f 0c0a 	mov.w	ip, #10
 80064b0:	4621      	mov	r1, r4
 80064b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064b6:	3b30      	subs	r3, #48	; 0x30
 80064b8:	2b09      	cmp	r3, #9
 80064ba:	d94d      	bls.n	8006558 <_svfiprintf_r+0x17c>
 80064bc:	b1b0      	cbz	r0, 80064ec <_svfiprintf_r+0x110>
 80064be:	9207      	str	r2, [sp, #28]
 80064c0:	e014      	b.n	80064ec <_svfiprintf_r+0x110>
 80064c2:	eba0 0308 	sub.w	r3, r0, r8
 80064c6:	fa09 f303 	lsl.w	r3, r9, r3
 80064ca:	4313      	orrs	r3, r2
 80064cc:	9304      	str	r3, [sp, #16]
 80064ce:	46a2      	mov	sl, r4
 80064d0:	e7d2      	b.n	8006478 <_svfiprintf_r+0x9c>
 80064d2:	9b03      	ldr	r3, [sp, #12]
 80064d4:	1d19      	adds	r1, r3, #4
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	9103      	str	r1, [sp, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	bfbb      	ittet	lt
 80064de:	425b      	neglt	r3, r3
 80064e0:	f042 0202 	orrlt.w	r2, r2, #2
 80064e4:	9307      	strge	r3, [sp, #28]
 80064e6:	9307      	strlt	r3, [sp, #28]
 80064e8:	bfb8      	it	lt
 80064ea:	9204      	strlt	r2, [sp, #16]
 80064ec:	7823      	ldrb	r3, [r4, #0]
 80064ee:	2b2e      	cmp	r3, #46	; 0x2e
 80064f0:	d10c      	bne.n	800650c <_svfiprintf_r+0x130>
 80064f2:	7863      	ldrb	r3, [r4, #1]
 80064f4:	2b2a      	cmp	r3, #42	; 0x2a
 80064f6:	d134      	bne.n	8006562 <_svfiprintf_r+0x186>
 80064f8:	9b03      	ldr	r3, [sp, #12]
 80064fa:	1d1a      	adds	r2, r3, #4
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	9203      	str	r2, [sp, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	bfb8      	it	lt
 8006504:	f04f 33ff 	movlt.w	r3, #4294967295
 8006508:	3402      	adds	r4, #2
 800650a:	9305      	str	r3, [sp, #20]
 800650c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80065d4 <_svfiprintf_r+0x1f8>
 8006510:	7821      	ldrb	r1, [r4, #0]
 8006512:	2203      	movs	r2, #3
 8006514:	4650      	mov	r0, sl
 8006516:	f7f9 fe7b 	bl	8000210 <memchr>
 800651a:	b138      	cbz	r0, 800652c <_svfiprintf_r+0x150>
 800651c:	9b04      	ldr	r3, [sp, #16]
 800651e:	eba0 000a 	sub.w	r0, r0, sl
 8006522:	2240      	movs	r2, #64	; 0x40
 8006524:	4082      	lsls	r2, r0
 8006526:	4313      	orrs	r3, r2
 8006528:	3401      	adds	r4, #1
 800652a:	9304      	str	r3, [sp, #16]
 800652c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006530:	4825      	ldr	r0, [pc, #148]	; (80065c8 <_svfiprintf_r+0x1ec>)
 8006532:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006536:	2206      	movs	r2, #6
 8006538:	f7f9 fe6a 	bl	8000210 <memchr>
 800653c:	2800      	cmp	r0, #0
 800653e:	d038      	beq.n	80065b2 <_svfiprintf_r+0x1d6>
 8006540:	4b22      	ldr	r3, [pc, #136]	; (80065cc <_svfiprintf_r+0x1f0>)
 8006542:	bb1b      	cbnz	r3, 800658c <_svfiprintf_r+0x1b0>
 8006544:	9b03      	ldr	r3, [sp, #12]
 8006546:	3307      	adds	r3, #7
 8006548:	f023 0307 	bic.w	r3, r3, #7
 800654c:	3308      	adds	r3, #8
 800654e:	9303      	str	r3, [sp, #12]
 8006550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006552:	4433      	add	r3, r6
 8006554:	9309      	str	r3, [sp, #36]	; 0x24
 8006556:	e768      	b.n	800642a <_svfiprintf_r+0x4e>
 8006558:	fb0c 3202 	mla	r2, ip, r2, r3
 800655c:	460c      	mov	r4, r1
 800655e:	2001      	movs	r0, #1
 8006560:	e7a6      	b.n	80064b0 <_svfiprintf_r+0xd4>
 8006562:	2300      	movs	r3, #0
 8006564:	3401      	adds	r4, #1
 8006566:	9305      	str	r3, [sp, #20]
 8006568:	4619      	mov	r1, r3
 800656a:	f04f 0c0a 	mov.w	ip, #10
 800656e:	4620      	mov	r0, r4
 8006570:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006574:	3a30      	subs	r2, #48	; 0x30
 8006576:	2a09      	cmp	r2, #9
 8006578:	d903      	bls.n	8006582 <_svfiprintf_r+0x1a6>
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0c6      	beq.n	800650c <_svfiprintf_r+0x130>
 800657e:	9105      	str	r1, [sp, #20]
 8006580:	e7c4      	b.n	800650c <_svfiprintf_r+0x130>
 8006582:	fb0c 2101 	mla	r1, ip, r1, r2
 8006586:	4604      	mov	r4, r0
 8006588:	2301      	movs	r3, #1
 800658a:	e7f0      	b.n	800656e <_svfiprintf_r+0x192>
 800658c:	ab03      	add	r3, sp, #12
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	462a      	mov	r2, r5
 8006592:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <_svfiprintf_r+0x1f4>)
 8006594:	a904      	add	r1, sp, #16
 8006596:	4638      	mov	r0, r7
 8006598:	f3af 8000 	nop.w
 800659c:	1c42      	adds	r2, r0, #1
 800659e:	4606      	mov	r6, r0
 80065a0:	d1d6      	bne.n	8006550 <_svfiprintf_r+0x174>
 80065a2:	89ab      	ldrh	r3, [r5, #12]
 80065a4:	065b      	lsls	r3, r3, #25
 80065a6:	f53f af2d 	bmi.w	8006404 <_svfiprintf_r+0x28>
 80065aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065ac:	b01d      	add	sp, #116	; 0x74
 80065ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b2:	ab03      	add	r3, sp, #12
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	462a      	mov	r2, r5
 80065b8:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <_svfiprintf_r+0x1f4>)
 80065ba:	a904      	add	r1, sp, #16
 80065bc:	4638      	mov	r0, r7
 80065be:	f000 f9bd 	bl	800693c <_printf_i>
 80065c2:	e7eb      	b.n	800659c <_svfiprintf_r+0x1c0>
 80065c4:	08007231 	.word	0x08007231
 80065c8:	0800723b 	.word	0x0800723b
 80065cc:	00000000 	.word	0x00000000
 80065d0:	08006329 	.word	0x08006329
 80065d4:	08007237 	.word	0x08007237

080065d8 <__sfputc_r>:
 80065d8:	6893      	ldr	r3, [r2, #8]
 80065da:	3b01      	subs	r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	b410      	push	{r4}
 80065e0:	6093      	str	r3, [r2, #8]
 80065e2:	da08      	bge.n	80065f6 <__sfputc_r+0x1e>
 80065e4:	6994      	ldr	r4, [r2, #24]
 80065e6:	42a3      	cmp	r3, r4
 80065e8:	db01      	blt.n	80065ee <__sfputc_r+0x16>
 80065ea:	290a      	cmp	r1, #10
 80065ec:	d103      	bne.n	80065f6 <__sfputc_r+0x1e>
 80065ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065f2:	f7ff bd0d 	b.w	8006010 <__swbuf_r>
 80065f6:	6813      	ldr	r3, [r2, #0]
 80065f8:	1c58      	adds	r0, r3, #1
 80065fa:	6010      	str	r0, [r2, #0]
 80065fc:	7019      	strb	r1, [r3, #0]
 80065fe:	4608      	mov	r0, r1
 8006600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006604:	4770      	bx	lr

08006606 <__sfputs_r>:
 8006606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006608:	4606      	mov	r6, r0
 800660a:	460f      	mov	r7, r1
 800660c:	4614      	mov	r4, r2
 800660e:	18d5      	adds	r5, r2, r3
 8006610:	42ac      	cmp	r4, r5
 8006612:	d101      	bne.n	8006618 <__sfputs_r+0x12>
 8006614:	2000      	movs	r0, #0
 8006616:	e007      	b.n	8006628 <__sfputs_r+0x22>
 8006618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800661c:	463a      	mov	r2, r7
 800661e:	4630      	mov	r0, r6
 8006620:	f7ff ffda 	bl	80065d8 <__sfputc_r>
 8006624:	1c43      	adds	r3, r0, #1
 8006626:	d1f3      	bne.n	8006610 <__sfputs_r+0xa>
 8006628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800662c <_vfiprintf_r>:
 800662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006630:	460d      	mov	r5, r1
 8006632:	b09d      	sub	sp, #116	; 0x74
 8006634:	4614      	mov	r4, r2
 8006636:	4698      	mov	r8, r3
 8006638:	4606      	mov	r6, r0
 800663a:	b118      	cbz	r0, 8006644 <_vfiprintf_r+0x18>
 800663c:	6a03      	ldr	r3, [r0, #32]
 800663e:	b90b      	cbnz	r3, 8006644 <_vfiprintf_r+0x18>
 8006640:	f7ff fbc6 	bl	8005dd0 <__sinit>
 8006644:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006646:	07d9      	lsls	r1, r3, #31
 8006648:	d405      	bmi.n	8006656 <_vfiprintf_r+0x2a>
 800664a:	89ab      	ldrh	r3, [r5, #12]
 800664c:	059a      	lsls	r2, r3, #22
 800664e:	d402      	bmi.n	8006656 <_vfiprintf_r+0x2a>
 8006650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006652:	f7ff fe1b 	bl	800628c <__retarget_lock_acquire_recursive>
 8006656:	89ab      	ldrh	r3, [r5, #12]
 8006658:	071b      	lsls	r3, r3, #28
 800665a:	d501      	bpl.n	8006660 <_vfiprintf_r+0x34>
 800665c:	692b      	ldr	r3, [r5, #16]
 800665e:	b99b      	cbnz	r3, 8006688 <_vfiprintf_r+0x5c>
 8006660:	4629      	mov	r1, r5
 8006662:	4630      	mov	r0, r6
 8006664:	f7ff fd12 	bl	800608c <__swsetup_r>
 8006668:	b170      	cbz	r0, 8006688 <_vfiprintf_r+0x5c>
 800666a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800666c:	07dc      	lsls	r4, r3, #31
 800666e:	d504      	bpl.n	800667a <_vfiprintf_r+0x4e>
 8006670:	f04f 30ff 	mov.w	r0, #4294967295
 8006674:	b01d      	add	sp, #116	; 0x74
 8006676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800667a:	89ab      	ldrh	r3, [r5, #12]
 800667c:	0598      	lsls	r0, r3, #22
 800667e:	d4f7      	bmi.n	8006670 <_vfiprintf_r+0x44>
 8006680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006682:	f7ff fe04 	bl	800628e <__retarget_lock_release_recursive>
 8006686:	e7f3      	b.n	8006670 <_vfiprintf_r+0x44>
 8006688:	2300      	movs	r3, #0
 800668a:	9309      	str	r3, [sp, #36]	; 0x24
 800668c:	2320      	movs	r3, #32
 800668e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006692:	f8cd 800c 	str.w	r8, [sp, #12]
 8006696:	2330      	movs	r3, #48	; 0x30
 8006698:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800684c <_vfiprintf_r+0x220>
 800669c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066a0:	f04f 0901 	mov.w	r9, #1
 80066a4:	4623      	mov	r3, r4
 80066a6:	469a      	mov	sl, r3
 80066a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066ac:	b10a      	cbz	r2, 80066b2 <_vfiprintf_r+0x86>
 80066ae:	2a25      	cmp	r2, #37	; 0x25
 80066b0:	d1f9      	bne.n	80066a6 <_vfiprintf_r+0x7a>
 80066b2:	ebba 0b04 	subs.w	fp, sl, r4
 80066b6:	d00b      	beq.n	80066d0 <_vfiprintf_r+0xa4>
 80066b8:	465b      	mov	r3, fp
 80066ba:	4622      	mov	r2, r4
 80066bc:	4629      	mov	r1, r5
 80066be:	4630      	mov	r0, r6
 80066c0:	f7ff ffa1 	bl	8006606 <__sfputs_r>
 80066c4:	3001      	adds	r0, #1
 80066c6:	f000 80a9 	beq.w	800681c <_vfiprintf_r+0x1f0>
 80066ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066cc:	445a      	add	r2, fp
 80066ce:	9209      	str	r2, [sp, #36]	; 0x24
 80066d0:	f89a 3000 	ldrb.w	r3, [sl]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 80a1 	beq.w	800681c <_vfiprintf_r+0x1f0>
 80066da:	2300      	movs	r3, #0
 80066dc:	f04f 32ff 	mov.w	r2, #4294967295
 80066e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066e4:	f10a 0a01 	add.w	sl, sl, #1
 80066e8:	9304      	str	r3, [sp, #16]
 80066ea:	9307      	str	r3, [sp, #28]
 80066ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066f0:	931a      	str	r3, [sp, #104]	; 0x68
 80066f2:	4654      	mov	r4, sl
 80066f4:	2205      	movs	r2, #5
 80066f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066fa:	4854      	ldr	r0, [pc, #336]	; (800684c <_vfiprintf_r+0x220>)
 80066fc:	f7f9 fd88 	bl	8000210 <memchr>
 8006700:	9a04      	ldr	r2, [sp, #16]
 8006702:	b9d8      	cbnz	r0, 800673c <_vfiprintf_r+0x110>
 8006704:	06d1      	lsls	r1, r2, #27
 8006706:	bf44      	itt	mi
 8006708:	2320      	movmi	r3, #32
 800670a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800670e:	0713      	lsls	r3, r2, #28
 8006710:	bf44      	itt	mi
 8006712:	232b      	movmi	r3, #43	; 0x2b
 8006714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006718:	f89a 3000 	ldrb.w	r3, [sl]
 800671c:	2b2a      	cmp	r3, #42	; 0x2a
 800671e:	d015      	beq.n	800674c <_vfiprintf_r+0x120>
 8006720:	9a07      	ldr	r2, [sp, #28]
 8006722:	4654      	mov	r4, sl
 8006724:	2000      	movs	r0, #0
 8006726:	f04f 0c0a 	mov.w	ip, #10
 800672a:	4621      	mov	r1, r4
 800672c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006730:	3b30      	subs	r3, #48	; 0x30
 8006732:	2b09      	cmp	r3, #9
 8006734:	d94d      	bls.n	80067d2 <_vfiprintf_r+0x1a6>
 8006736:	b1b0      	cbz	r0, 8006766 <_vfiprintf_r+0x13a>
 8006738:	9207      	str	r2, [sp, #28]
 800673a:	e014      	b.n	8006766 <_vfiprintf_r+0x13a>
 800673c:	eba0 0308 	sub.w	r3, r0, r8
 8006740:	fa09 f303 	lsl.w	r3, r9, r3
 8006744:	4313      	orrs	r3, r2
 8006746:	9304      	str	r3, [sp, #16]
 8006748:	46a2      	mov	sl, r4
 800674a:	e7d2      	b.n	80066f2 <_vfiprintf_r+0xc6>
 800674c:	9b03      	ldr	r3, [sp, #12]
 800674e:	1d19      	adds	r1, r3, #4
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	9103      	str	r1, [sp, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	bfbb      	ittet	lt
 8006758:	425b      	neglt	r3, r3
 800675a:	f042 0202 	orrlt.w	r2, r2, #2
 800675e:	9307      	strge	r3, [sp, #28]
 8006760:	9307      	strlt	r3, [sp, #28]
 8006762:	bfb8      	it	lt
 8006764:	9204      	strlt	r2, [sp, #16]
 8006766:	7823      	ldrb	r3, [r4, #0]
 8006768:	2b2e      	cmp	r3, #46	; 0x2e
 800676a:	d10c      	bne.n	8006786 <_vfiprintf_r+0x15a>
 800676c:	7863      	ldrb	r3, [r4, #1]
 800676e:	2b2a      	cmp	r3, #42	; 0x2a
 8006770:	d134      	bne.n	80067dc <_vfiprintf_r+0x1b0>
 8006772:	9b03      	ldr	r3, [sp, #12]
 8006774:	1d1a      	adds	r2, r3, #4
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	9203      	str	r2, [sp, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	bfb8      	it	lt
 800677e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006782:	3402      	adds	r4, #2
 8006784:	9305      	str	r3, [sp, #20]
 8006786:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800685c <_vfiprintf_r+0x230>
 800678a:	7821      	ldrb	r1, [r4, #0]
 800678c:	2203      	movs	r2, #3
 800678e:	4650      	mov	r0, sl
 8006790:	f7f9 fd3e 	bl	8000210 <memchr>
 8006794:	b138      	cbz	r0, 80067a6 <_vfiprintf_r+0x17a>
 8006796:	9b04      	ldr	r3, [sp, #16]
 8006798:	eba0 000a 	sub.w	r0, r0, sl
 800679c:	2240      	movs	r2, #64	; 0x40
 800679e:	4082      	lsls	r2, r0
 80067a0:	4313      	orrs	r3, r2
 80067a2:	3401      	adds	r4, #1
 80067a4:	9304      	str	r3, [sp, #16]
 80067a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067aa:	4829      	ldr	r0, [pc, #164]	; (8006850 <_vfiprintf_r+0x224>)
 80067ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067b0:	2206      	movs	r2, #6
 80067b2:	f7f9 fd2d 	bl	8000210 <memchr>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	d03f      	beq.n	800683a <_vfiprintf_r+0x20e>
 80067ba:	4b26      	ldr	r3, [pc, #152]	; (8006854 <_vfiprintf_r+0x228>)
 80067bc:	bb1b      	cbnz	r3, 8006806 <_vfiprintf_r+0x1da>
 80067be:	9b03      	ldr	r3, [sp, #12]
 80067c0:	3307      	adds	r3, #7
 80067c2:	f023 0307 	bic.w	r3, r3, #7
 80067c6:	3308      	adds	r3, #8
 80067c8:	9303      	str	r3, [sp, #12]
 80067ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067cc:	443b      	add	r3, r7
 80067ce:	9309      	str	r3, [sp, #36]	; 0x24
 80067d0:	e768      	b.n	80066a4 <_vfiprintf_r+0x78>
 80067d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80067d6:	460c      	mov	r4, r1
 80067d8:	2001      	movs	r0, #1
 80067da:	e7a6      	b.n	800672a <_vfiprintf_r+0xfe>
 80067dc:	2300      	movs	r3, #0
 80067de:	3401      	adds	r4, #1
 80067e0:	9305      	str	r3, [sp, #20]
 80067e2:	4619      	mov	r1, r3
 80067e4:	f04f 0c0a 	mov.w	ip, #10
 80067e8:	4620      	mov	r0, r4
 80067ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067ee:	3a30      	subs	r2, #48	; 0x30
 80067f0:	2a09      	cmp	r2, #9
 80067f2:	d903      	bls.n	80067fc <_vfiprintf_r+0x1d0>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0c6      	beq.n	8006786 <_vfiprintf_r+0x15a>
 80067f8:	9105      	str	r1, [sp, #20]
 80067fa:	e7c4      	b.n	8006786 <_vfiprintf_r+0x15a>
 80067fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006800:	4604      	mov	r4, r0
 8006802:	2301      	movs	r3, #1
 8006804:	e7f0      	b.n	80067e8 <_vfiprintf_r+0x1bc>
 8006806:	ab03      	add	r3, sp, #12
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	462a      	mov	r2, r5
 800680c:	4b12      	ldr	r3, [pc, #72]	; (8006858 <_vfiprintf_r+0x22c>)
 800680e:	a904      	add	r1, sp, #16
 8006810:	4630      	mov	r0, r6
 8006812:	f3af 8000 	nop.w
 8006816:	4607      	mov	r7, r0
 8006818:	1c78      	adds	r0, r7, #1
 800681a:	d1d6      	bne.n	80067ca <_vfiprintf_r+0x19e>
 800681c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800681e:	07d9      	lsls	r1, r3, #31
 8006820:	d405      	bmi.n	800682e <_vfiprintf_r+0x202>
 8006822:	89ab      	ldrh	r3, [r5, #12]
 8006824:	059a      	lsls	r2, r3, #22
 8006826:	d402      	bmi.n	800682e <_vfiprintf_r+0x202>
 8006828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800682a:	f7ff fd30 	bl	800628e <__retarget_lock_release_recursive>
 800682e:	89ab      	ldrh	r3, [r5, #12]
 8006830:	065b      	lsls	r3, r3, #25
 8006832:	f53f af1d 	bmi.w	8006670 <_vfiprintf_r+0x44>
 8006836:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006838:	e71c      	b.n	8006674 <_vfiprintf_r+0x48>
 800683a:	ab03      	add	r3, sp, #12
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	462a      	mov	r2, r5
 8006840:	4b05      	ldr	r3, [pc, #20]	; (8006858 <_vfiprintf_r+0x22c>)
 8006842:	a904      	add	r1, sp, #16
 8006844:	4630      	mov	r0, r6
 8006846:	f000 f879 	bl	800693c <_printf_i>
 800684a:	e7e4      	b.n	8006816 <_vfiprintf_r+0x1ea>
 800684c:	08007231 	.word	0x08007231
 8006850:	0800723b 	.word	0x0800723b
 8006854:	00000000 	.word	0x00000000
 8006858:	08006607 	.word	0x08006607
 800685c:	08007237 	.word	0x08007237

08006860 <_printf_common>:
 8006860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006864:	4616      	mov	r6, r2
 8006866:	4699      	mov	r9, r3
 8006868:	688a      	ldr	r2, [r1, #8]
 800686a:	690b      	ldr	r3, [r1, #16]
 800686c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006870:	4293      	cmp	r3, r2
 8006872:	bfb8      	it	lt
 8006874:	4613      	movlt	r3, r2
 8006876:	6033      	str	r3, [r6, #0]
 8006878:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800687c:	4607      	mov	r7, r0
 800687e:	460c      	mov	r4, r1
 8006880:	b10a      	cbz	r2, 8006886 <_printf_common+0x26>
 8006882:	3301      	adds	r3, #1
 8006884:	6033      	str	r3, [r6, #0]
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	0699      	lsls	r1, r3, #26
 800688a:	bf42      	ittt	mi
 800688c:	6833      	ldrmi	r3, [r6, #0]
 800688e:	3302      	addmi	r3, #2
 8006890:	6033      	strmi	r3, [r6, #0]
 8006892:	6825      	ldr	r5, [r4, #0]
 8006894:	f015 0506 	ands.w	r5, r5, #6
 8006898:	d106      	bne.n	80068a8 <_printf_common+0x48>
 800689a:	f104 0a19 	add.w	sl, r4, #25
 800689e:	68e3      	ldr	r3, [r4, #12]
 80068a0:	6832      	ldr	r2, [r6, #0]
 80068a2:	1a9b      	subs	r3, r3, r2
 80068a4:	42ab      	cmp	r3, r5
 80068a6:	dc26      	bgt.n	80068f6 <_printf_common+0x96>
 80068a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068ac:	1e13      	subs	r3, r2, #0
 80068ae:	6822      	ldr	r2, [r4, #0]
 80068b0:	bf18      	it	ne
 80068b2:	2301      	movne	r3, #1
 80068b4:	0692      	lsls	r2, r2, #26
 80068b6:	d42b      	bmi.n	8006910 <_printf_common+0xb0>
 80068b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068bc:	4649      	mov	r1, r9
 80068be:	4638      	mov	r0, r7
 80068c0:	47c0      	blx	r8
 80068c2:	3001      	adds	r0, #1
 80068c4:	d01e      	beq.n	8006904 <_printf_common+0xa4>
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	6922      	ldr	r2, [r4, #16]
 80068ca:	f003 0306 	and.w	r3, r3, #6
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	bf02      	ittt	eq
 80068d2:	68e5      	ldreq	r5, [r4, #12]
 80068d4:	6833      	ldreq	r3, [r6, #0]
 80068d6:	1aed      	subeq	r5, r5, r3
 80068d8:	68a3      	ldr	r3, [r4, #8]
 80068da:	bf0c      	ite	eq
 80068dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068e0:	2500      	movne	r5, #0
 80068e2:	4293      	cmp	r3, r2
 80068e4:	bfc4      	itt	gt
 80068e6:	1a9b      	subgt	r3, r3, r2
 80068e8:	18ed      	addgt	r5, r5, r3
 80068ea:	2600      	movs	r6, #0
 80068ec:	341a      	adds	r4, #26
 80068ee:	42b5      	cmp	r5, r6
 80068f0:	d11a      	bne.n	8006928 <_printf_common+0xc8>
 80068f2:	2000      	movs	r0, #0
 80068f4:	e008      	b.n	8006908 <_printf_common+0xa8>
 80068f6:	2301      	movs	r3, #1
 80068f8:	4652      	mov	r2, sl
 80068fa:	4649      	mov	r1, r9
 80068fc:	4638      	mov	r0, r7
 80068fe:	47c0      	blx	r8
 8006900:	3001      	adds	r0, #1
 8006902:	d103      	bne.n	800690c <_printf_common+0xac>
 8006904:	f04f 30ff 	mov.w	r0, #4294967295
 8006908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800690c:	3501      	adds	r5, #1
 800690e:	e7c6      	b.n	800689e <_printf_common+0x3e>
 8006910:	18e1      	adds	r1, r4, r3
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	2030      	movs	r0, #48	; 0x30
 8006916:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800691a:	4422      	add	r2, r4
 800691c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006920:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006924:	3302      	adds	r3, #2
 8006926:	e7c7      	b.n	80068b8 <_printf_common+0x58>
 8006928:	2301      	movs	r3, #1
 800692a:	4622      	mov	r2, r4
 800692c:	4649      	mov	r1, r9
 800692e:	4638      	mov	r0, r7
 8006930:	47c0      	blx	r8
 8006932:	3001      	adds	r0, #1
 8006934:	d0e6      	beq.n	8006904 <_printf_common+0xa4>
 8006936:	3601      	adds	r6, #1
 8006938:	e7d9      	b.n	80068ee <_printf_common+0x8e>
	...

0800693c <_printf_i>:
 800693c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006940:	7e0f      	ldrb	r7, [r1, #24]
 8006942:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006944:	2f78      	cmp	r7, #120	; 0x78
 8006946:	4691      	mov	r9, r2
 8006948:	4680      	mov	r8, r0
 800694a:	460c      	mov	r4, r1
 800694c:	469a      	mov	sl, r3
 800694e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006952:	d807      	bhi.n	8006964 <_printf_i+0x28>
 8006954:	2f62      	cmp	r7, #98	; 0x62
 8006956:	d80a      	bhi.n	800696e <_printf_i+0x32>
 8006958:	2f00      	cmp	r7, #0
 800695a:	f000 80d4 	beq.w	8006b06 <_printf_i+0x1ca>
 800695e:	2f58      	cmp	r7, #88	; 0x58
 8006960:	f000 80c0 	beq.w	8006ae4 <_printf_i+0x1a8>
 8006964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800696c:	e03a      	b.n	80069e4 <_printf_i+0xa8>
 800696e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006972:	2b15      	cmp	r3, #21
 8006974:	d8f6      	bhi.n	8006964 <_printf_i+0x28>
 8006976:	a101      	add	r1, pc, #4	; (adr r1, 800697c <_printf_i+0x40>)
 8006978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800697c:	080069d5 	.word	0x080069d5
 8006980:	080069e9 	.word	0x080069e9
 8006984:	08006965 	.word	0x08006965
 8006988:	08006965 	.word	0x08006965
 800698c:	08006965 	.word	0x08006965
 8006990:	08006965 	.word	0x08006965
 8006994:	080069e9 	.word	0x080069e9
 8006998:	08006965 	.word	0x08006965
 800699c:	08006965 	.word	0x08006965
 80069a0:	08006965 	.word	0x08006965
 80069a4:	08006965 	.word	0x08006965
 80069a8:	08006aed 	.word	0x08006aed
 80069ac:	08006a15 	.word	0x08006a15
 80069b0:	08006aa7 	.word	0x08006aa7
 80069b4:	08006965 	.word	0x08006965
 80069b8:	08006965 	.word	0x08006965
 80069bc:	08006b0f 	.word	0x08006b0f
 80069c0:	08006965 	.word	0x08006965
 80069c4:	08006a15 	.word	0x08006a15
 80069c8:	08006965 	.word	0x08006965
 80069cc:	08006965 	.word	0x08006965
 80069d0:	08006aaf 	.word	0x08006aaf
 80069d4:	682b      	ldr	r3, [r5, #0]
 80069d6:	1d1a      	adds	r2, r3, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	602a      	str	r2, [r5, #0]
 80069dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069e4:	2301      	movs	r3, #1
 80069e6:	e09f      	b.n	8006b28 <_printf_i+0x1ec>
 80069e8:	6820      	ldr	r0, [r4, #0]
 80069ea:	682b      	ldr	r3, [r5, #0]
 80069ec:	0607      	lsls	r7, r0, #24
 80069ee:	f103 0104 	add.w	r1, r3, #4
 80069f2:	6029      	str	r1, [r5, #0]
 80069f4:	d501      	bpl.n	80069fa <_printf_i+0xbe>
 80069f6:	681e      	ldr	r6, [r3, #0]
 80069f8:	e003      	b.n	8006a02 <_printf_i+0xc6>
 80069fa:	0646      	lsls	r6, r0, #25
 80069fc:	d5fb      	bpl.n	80069f6 <_printf_i+0xba>
 80069fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a02:	2e00      	cmp	r6, #0
 8006a04:	da03      	bge.n	8006a0e <_printf_i+0xd2>
 8006a06:	232d      	movs	r3, #45	; 0x2d
 8006a08:	4276      	negs	r6, r6
 8006a0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a0e:	485a      	ldr	r0, [pc, #360]	; (8006b78 <_printf_i+0x23c>)
 8006a10:	230a      	movs	r3, #10
 8006a12:	e012      	b.n	8006a3a <_printf_i+0xfe>
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	6820      	ldr	r0, [r4, #0]
 8006a18:	1d19      	adds	r1, r3, #4
 8006a1a:	6029      	str	r1, [r5, #0]
 8006a1c:	0605      	lsls	r5, r0, #24
 8006a1e:	d501      	bpl.n	8006a24 <_printf_i+0xe8>
 8006a20:	681e      	ldr	r6, [r3, #0]
 8006a22:	e002      	b.n	8006a2a <_printf_i+0xee>
 8006a24:	0641      	lsls	r1, r0, #25
 8006a26:	d5fb      	bpl.n	8006a20 <_printf_i+0xe4>
 8006a28:	881e      	ldrh	r6, [r3, #0]
 8006a2a:	4853      	ldr	r0, [pc, #332]	; (8006b78 <_printf_i+0x23c>)
 8006a2c:	2f6f      	cmp	r7, #111	; 0x6f
 8006a2e:	bf0c      	ite	eq
 8006a30:	2308      	moveq	r3, #8
 8006a32:	230a      	movne	r3, #10
 8006a34:	2100      	movs	r1, #0
 8006a36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a3a:	6865      	ldr	r5, [r4, #4]
 8006a3c:	60a5      	str	r5, [r4, #8]
 8006a3e:	2d00      	cmp	r5, #0
 8006a40:	bfa2      	ittt	ge
 8006a42:	6821      	ldrge	r1, [r4, #0]
 8006a44:	f021 0104 	bicge.w	r1, r1, #4
 8006a48:	6021      	strge	r1, [r4, #0]
 8006a4a:	b90e      	cbnz	r6, 8006a50 <_printf_i+0x114>
 8006a4c:	2d00      	cmp	r5, #0
 8006a4e:	d04b      	beq.n	8006ae8 <_printf_i+0x1ac>
 8006a50:	4615      	mov	r5, r2
 8006a52:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a56:	fb03 6711 	mls	r7, r3, r1, r6
 8006a5a:	5dc7      	ldrb	r7, [r0, r7]
 8006a5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a60:	4637      	mov	r7, r6
 8006a62:	42bb      	cmp	r3, r7
 8006a64:	460e      	mov	r6, r1
 8006a66:	d9f4      	bls.n	8006a52 <_printf_i+0x116>
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	d10b      	bne.n	8006a84 <_printf_i+0x148>
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	07de      	lsls	r6, r3, #31
 8006a70:	d508      	bpl.n	8006a84 <_printf_i+0x148>
 8006a72:	6923      	ldr	r3, [r4, #16]
 8006a74:	6861      	ldr	r1, [r4, #4]
 8006a76:	4299      	cmp	r1, r3
 8006a78:	bfde      	ittt	le
 8006a7a:	2330      	movle	r3, #48	; 0x30
 8006a7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a84:	1b52      	subs	r2, r2, r5
 8006a86:	6122      	str	r2, [r4, #16]
 8006a88:	f8cd a000 	str.w	sl, [sp]
 8006a8c:	464b      	mov	r3, r9
 8006a8e:	aa03      	add	r2, sp, #12
 8006a90:	4621      	mov	r1, r4
 8006a92:	4640      	mov	r0, r8
 8006a94:	f7ff fee4 	bl	8006860 <_printf_common>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d14a      	bne.n	8006b32 <_printf_i+0x1f6>
 8006a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa0:	b004      	add	sp, #16
 8006aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	f043 0320 	orr.w	r3, r3, #32
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	4833      	ldr	r0, [pc, #204]	; (8006b7c <_printf_i+0x240>)
 8006ab0:	2778      	movs	r7, #120	; 0x78
 8006ab2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	6829      	ldr	r1, [r5, #0]
 8006aba:	061f      	lsls	r7, r3, #24
 8006abc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ac0:	d402      	bmi.n	8006ac8 <_printf_i+0x18c>
 8006ac2:	065f      	lsls	r7, r3, #25
 8006ac4:	bf48      	it	mi
 8006ac6:	b2b6      	uxthmi	r6, r6
 8006ac8:	07df      	lsls	r7, r3, #31
 8006aca:	bf48      	it	mi
 8006acc:	f043 0320 	orrmi.w	r3, r3, #32
 8006ad0:	6029      	str	r1, [r5, #0]
 8006ad2:	bf48      	it	mi
 8006ad4:	6023      	strmi	r3, [r4, #0]
 8006ad6:	b91e      	cbnz	r6, 8006ae0 <_printf_i+0x1a4>
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	f023 0320 	bic.w	r3, r3, #32
 8006ade:	6023      	str	r3, [r4, #0]
 8006ae0:	2310      	movs	r3, #16
 8006ae2:	e7a7      	b.n	8006a34 <_printf_i+0xf8>
 8006ae4:	4824      	ldr	r0, [pc, #144]	; (8006b78 <_printf_i+0x23c>)
 8006ae6:	e7e4      	b.n	8006ab2 <_printf_i+0x176>
 8006ae8:	4615      	mov	r5, r2
 8006aea:	e7bd      	b.n	8006a68 <_printf_i+0x12c>
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	6826      	ldr	r6, [r4, #0]
 8006af0:	6961      	ldr	r1, [r4, #20]
 8006af2:	1d18      	adds	r0, r3, #4
 8006af4:	6028      	str	r0, [r5, #0]
 8006af6:	0635      	lsls	r5, r6, #24
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	d501      	bpl.n	8006b00 <_printf_i+0x1c4>
 8006afc:	6019      	str	r1, [r3, #0]
 8006afe:	e002      	b.n	8006b06 <_printf_i+0x1ca>
 8006b00:	0670      	lsls	r0, r6, #25
 8006b02:	d5fb      	bpl.n	8006afc <_printf_i+0x1c0>
 8006b04:	8019      	strh	r1, [r3, #0]
 8006b06:	2300      	movs	r3, #0
 8006b08:	6123      	str	r3, [r4, #16]
 8006b0a:	4615      	mov	r5, r2
 8006b0c:	e7bc      	b.n	8006a88 <_printf_i+0x14c>
 8006b0e:	682b      	ldr	r3, [r5, #0]
 8006b10:	1d1a      	adds	r2, r3, #4
 8006b12:	602a      	str	r2, [r5, #0]
 8006b14:	681d      	ldr	r5, [r3, #0]
 8006b16:	6862      	ldr	r2, [r4, #4]
 8006b18:	2100      	movs	r1, #0
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f7f9 fb78 	bl	8000210 <memchr>
 8006b20:	b108      	cbz	r0, 8006b26 <_printf_i+0x1ea>
 8006b22:	1b40      	subs	r0, r0, r5
 8006b24:	6060      	str	r0, [r4, #4]
 8006b26:	6863      	ldr	r3, [r4, #4]
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b30:	e7aa      	b.n	8006a88 <_printf_i+0x14c>
 8006b32:	6923      	ldr	r3, [r4, #16]
 8006b34:	462a      	mov	r2, r5
 8006b36:	4649      	mov	r1, r9
 8006b38:	4640      	mov	r0, r8
 8006b3a:	47d0      	blx	sl
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d0ad      	beq.n	8006a9c <_printf_i+0x160>
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	079b      	lsls	r3, r3, #30
 8006b44:	d413      	bmi.n	8006b6e <_printf_i+0x232>
 8006b46:	68e0      	ldr	r0, [r4, #12]
 8006b48:	9b03      	ldr	r3, [sp, #12]
 8006b4a:	4298      	cmp	r0, r3
 8006b4c:	bfb8      	it	lt
 8006b4e:	4618      	movlt	r0, r3
 8006b50:	e7a6      	b.n	8006aa0 <_printf_i+0x164>
 8006b52:	2301      	movs	r3, #1
 8006b54:	4632      	mov	r2, r6
 8006b56:	4649      	mov	r1, r9
 8006b58:	4640      	mov	r0, r8
 8006b5a:	47d0      	blx	sl
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d09d      	beq.n	8006a9c <_printf_i+0x160>
 8006b60:	3501      	adds	r5, #1
 8006b62:	68e3      	ldr	r3, [r4, #12]
 8006b64:	9903      	ldr	r1, [sp, #12]
 8006b66:	1a5b      	subs	r3, r3, r1
 8006b68:	42ab      	cmp	r3, r5
 8006b6a:	dcf2      	bgt.n	8006b52 <_printf_i+0x216>
 8006b6c:	e7eb      	b.n	8006b46 <_printf_i+0x20a>
 8006b6e:	2500      	movs	r5, #0
 8006b70:	f104 0619 	add.w	r6, r4, #25
 8006b74:	e7f5      	b.n	8006b62 <_printf_i+0x226>
 8006b76:	bf00      	nop
 8006b78:	08007242 	.word	0x08007242
 8006b7c:	08007253 	.word	0x08007253

08006b80 <__sflush_r>:
 8006b80:	898a      	ldrh	r2, [r1, #12]
 8006b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b86:	4605      	mov	r5, r0
 8006b88:	0710      	lsls	r0, r2, #28
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	d458      	bmi.n	8006c40 <__sflush_r+0xc0>
 8006b8e:	684b      	ldr	r3, [r1, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	dc05      	bgt.n	8006ba0 <__sflush_r+0x20>
 8006b94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	dc02      	bgt.n	8006ba0 <__sflush_r+0x20>
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ba2:	2e00      	cmp	r6, #0
 8006ba4:	d0f9      	beq.n	8006b9a <__sflush_r+0x1a>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006bac:	682f      	ldr	r7, [r5, #0]
 8006bae:	6a21      	ldr	r1, [r4, #32]
 8006bb0:	602b      	str	r3, [r5, #0]
 8006bb2:	d032      	beq.n	8006c1a <__sflush_r+0x9a>
 8006bb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	075a      	lsls	r2, r3, #29
 8006bba:	d505      	bpl.n	8006bc8 <__sflush_r+0x48>
 8006bbc:	6863      	ldr	r3, [r4, #4]
 8006bbe:	1ac0      	subs	r0, r0, r3
 8006bc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bc2:	b10b      	cbz	r3, 8006bc8 <__sflush_r+0x48>
 8006bc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bc6:	1ac0      	subs	r0, r0, r3
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4602      	mov	r2, r0
 8006bcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bce:	6a21      	ldr	r1, [r4, #32]
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b0      	blx	r6
 8006bd4:	1c43      	adds	r3, r0, #1
 8006bd6:	89a3      	ldrh	r3, [r4, #12]
 8006bd8:	d106      	bne.n	8006be8 <__sflush_r+0x68>
 8006bda:	6829      	ldr	r1, [r5, #0]
 8006bdc:	291d      	cmp	r1, #29
 8006bde:	d82b      	bhi.n	8006c38 <__sflush_r+0xb8>
 8006be0:	4a29      	ldr	r2, [pc, #164]	; (8006c88 <__sflush_r+0x108>)
 8006be2:	410a      	asrs	r2, r1
 8006be4:	07d6      	lsls	r6, r2, #31
 8006be6:	d427      	bmi.n	8006c38 <__sflush_r+0xb8>
 8006be8:	2200      	movs	r2, #0
 8006bea:	6062      	str	r2, [r4, #4]
 8006bec:	04d9      	lsls	r1, r3, #19
 8006bee:	6922      	ldr	r2, [r4, #16]
 8006bf0:	6022      	str	r2, [r4, #0]
 8006bf2:	d504      	bpl.n	8006bfe <__sflush_r+0x7e>
 8006bf4:	1c42      	adds	r2, r0, #1
 8006bf6:	d101      	bne.n	8006bfc <__sflush_r+0x7c>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b903      	cbnz	r3, 8006bfe <__sflush_r+0x7e>
 8006bfc:	6560      	str	r0, [r4, #84]	; 0x54
 8006bfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c00:	602f      	str	r7, [r5, #0]
 8006c02:	2900      	cmp	r1, #0
 8006c04:	d0c9      	beq.n	8006b9a <__sflush_r+0x1a>
 8006c06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c0a:	4299      	cmp	r1, r3
 8006c0c:	d002      	beq.n	8006c14 <__sflush_r+0x94>
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f7ff fb3e 	bl	8006290 <_free_r>
 8006c14:	2000      	movs	r0, #0
 8006c16:	6360      	str	r0, [r4, #52]	; 0x34
 8006c18:	e7c0      	b.n	8006b9c <__sflush_r+0x1c>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	47b0      	blx	r6
 8006c20:	1c41      	adds	r1, r0, #1
 8006c22:	d1c8      	bne.n	8006bb6 <__sflush_r+0x36>
 8006c24:	682b      	ldr	r3, [r5, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0c5      	beq.n	8006bb6 <__sflush_r+0x36>
 8006c2a:	2b1d      	cmp	r3, #29
 8006c2c:	d001      	beq.n	8006c32 <__sflush_r+0xb2>
 8006c2e:	2b16      	cmp	r3, #22
 8006c30:	d101      	bne.n	8006c36 <__sflush_r+0xb6>
 8006c32:	602f      	str	r7, [r5, #0]
 8006c34:	e7b1      	b.n	8006b9a <__sflush_r+0x1a>
 8006c36:	89a3      	ldrh	r3, [r4, #12]
 8006c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c3c:	81a3      	strh	r3, [r4, #12]
 8006c3e:	e7ad      	b.n	8006b9c <__sflush_r+0x1c>
 8006c40:	690f      	ldr	r7, [r1, #16]
 8006c42:	2f00      	cmp	r7, #0
 8006c44:	d0a9      	beq.n	8006b9a <__sflush_r+0x1a>
 8006c46:	0793      	lsls	r3, r2, #30
 8006c48:	680e      	ldr	r6, [r1, #0]
 8006c4a:	bf08      	it	eq
 8006c4c:	694b      	ldreq	r3, [r1, #20]
 8006c4e:	600f      	str	r7, [r1, #0]
 8006c50:	bf18      	it	ne
 8006c52:	2300      	movne	r3, #0
 8006c54:	eba6 0807 	sub.w	r8, r6, r7
 8006c58:	608b      	str	r3, [r1, #8]
 8006c5a:	f1b8 0f00 	cmp.w	r8, #0
 8006c5e:	dd9c      	ble.n	8006b9a <__sflush_r+0x1a>
 8006c60:	6a21      	ldr	r1, [r4, #32]
 8006c62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c64:	4643      	mov	r3, r8
 8006c66:	463a      	mov	r2, r7
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b0      	blx	r6
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	dc06      	bgt.n	8006c7e <__sflush_r+0xfe>
 8006c70:	89a3      	ldrh	r3, [r4, #12]
 8006c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c76:	81a3      	strh	r3, [r4, #12]
 8006c78:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7c:	e78e      	b.n	8006b9c <__sflush_r+0x1c>
 8006c7e:	4407      	add	r7, r0
 8006c80:	eba8 0800 	sub.w	r8, r8, r0
 8006c84:	e7e9      	b.n	8006c5a <__sflush_r+0xda>
 8006c86:	bf00      	nop
 8006c88:	dfbffffe 	.word	0xdfbffffe

08006c8c <_fflush_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	690b      	ldr	r3, [r1, #16]
 8006c90:	4605      	mov	r5, r0
 8006c92:	460c      	mov	r4, r1
 8006c94:	b913      	cbnz	r3, 8006c9c <_fflush_r+0x10>
 8006c96:	2500      	movs	r5, #0
 8006c98:	4628      	mov	r0, r5
 8006c9a:	bd38      	pop	{r3, r4, r5, pc}
 8006c9c:	b118      	cbz	r0, 8006ca6 <_fflush_r+0x1a>
 8006c9e:	6a03      	ldr	r3, [r0, #32]
 8006ca0:	b90b      	cbnz	r3, 8006ca6 <_fflush_r+0x1a>
 8006ca2:	f7ff f895 	bl	8005dd0 <__sinit>
 8006ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0f3      	beq.n	8006c96 <_fflush_r+0xa>
 8006cae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cb0:	07d0      	lsls	r0, r2, #31
 8006cb2:	d404      	bmi.n	8006cbe <_fflush_r+0x32>
 8006cb4:	0599      	lsls	r1, r3, #22
 8006cb6:	d402      	bmi.n	8006cbe <_fflush_r+0x32>
 8006cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cba:	f7ff fae7 	bl	800628c <__retarget_lock_acquire_recursive>
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	f7ff ff5d 	bl	8006b80 <__sflush_r>
 8006cc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cc8:	07da      	lsls	r2, r3, #31
 8006cca:	4605      	mov	r5, r0
 8006ccc:	d4e4      	bmi.n	8006c98 <_fflush_r+0xc>
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	059b      	lsls	r3, r3, #22
 8006cd2:	d4e1      	bmi.n	8006c98 <_fflush_r+0xc>
 8006cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cd6:	f7ff fada 	bl	800628e <__retarget_lock_release_recursive>
 8006cda:	e7dd      	b.n	8006c98 <_fflush_r+0xc>

08006cdc <__swhatbuf_r>:
 8006cdc:	b570      	push	{r4, r5, r6, lr}
 8006cde:	460c      	mov	r4, r1
 8006ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce4:	2900      	cmp	r1, #0
 8006ce6:	b096      	sub	sp, #88	; 0x58
 8006ce8:	4615      	mov	r5, r2
 8006cea:	461e      	mov	r6, r3
 8006cec:	da0d      	bge.n	8006d0a <__swhatbuf_r+0x2e>
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006cf4:	f04f 0100 	mov.w	r1, #0
 8006cf8:	bf0c      	ite	eq
 8006cfa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006cfe:	2340      	movne	r3, #64	; 0x40
 8006d00:	2000      	movs	r0, #0
 8006d02:	6031      	str	r1, [r6, #0]
 8006d04:	602b      	str	r3, [r5, #0]
 8006d06:	b016      	add	sp, #88	; 0x58
 8006d08:	bd70      	pop	{r4, r5, r6, pc}
 8006d0a:	466a      	mov	r2, sp
 8006d0c:	f000 f862 	bl	8006dd4 <_fstat_r>
 8006d10:	2800      	cmp	r0, #0
 8006d12:	dbec      	blt.n	8006cee <__swhatbuf_r+0x12>
 8006d14:	9901      	ldr	r1, [sp, #4]
 8006d16:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006d1a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006d1e:	4259      	negs	r1, r3
 8006d20:	4159      	adcs	r1, r3
 8006d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d26:	e7eb      	b.n	8006d00 <__swhatbuf_r+0x24>

08006d28 <__smakebuf_r>:
 8006d28:	898b      	ldrh	r3, [r1, #12]
 8006d2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d2c:	079d      	lsls	r5, r3, #30
 8006d2e:	4606      	mov	r6, r0
 8006d30:	460c      	mov	r4, r1
 8006d32:	d507      	bpl.n	8006d44 <__smakebuf_r+0x1c>
 8006d34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	6123      	str	r3, [r4, #16]
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	6163      	str	r3, [r4, #20]
 8006d40:	b002      	add	sp, #8
 8006d42:	bd70      	pop	{r4, r5, r6, pc}
 8006d44:	ab01      	add	r3, sp, #4
 8006d46:	466a      	mov	r2, sp
 8006d48:	f7ff ffc8 	bl	8006cdc <__swhatbuf_r>
 8006d4c:	9900      	ldr	r1, [sp, #0]
 8006d4e:	4605      	mov	r5, r0
 8006d50:	4630      	mov	r0, r6
 8006d52:	f7fe feab 	bl	8005aac <_malloc_r>
 8006d56:	b948      	cbnz	r0, 8006d6c <__smakebuf_r+0x44>
 8006d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d5c:	059a      	lsls	r2, r3, #22
 8006d5e:	d4ef      	bmi.n	8006d40 <__smakebuf_r+0x18>
 8006d60:	f023 0303 	bic.w	r3, r3, #3
 8006d64:	f043 0302 	orr.w	r3, r3, #2
 8006d68:	81a3      	strh	r3, [r4, #12]
 8006d6a:	e7e3      	b.n	8006d34 <__smakebuf_r+0xc>
 8006d6c:	89a3      	ldrh	r3, [r4, #12]
 8006d6e:	6020      	str	r0, [r4, #0]
 8006d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	9b00      	ldr	r3, [sp, #0]
 8006d78:	6163      	str	r3, [r4, #20]
 8006d7a:	9b01      	ldr	r3, [sp, #4]
 8006d7c:	6120      	str	r0, [r4, #16]
 8006d7e:	b15b      	cbz	r3, 8006d98 <__smakebuf_r+0x70>
 8006d80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d84:	4630      	mov	r0, r6
 8006d86:	f000 f837 	bl	8006df8 <_isatty_r>
 8006d8a:	b128      	cbz	r0, 8006d98 <__smakebuf_r+0x70>
 8006d8c:	89a3      	ldrh	r3, [r4, #12]
 8006d8e:	f023 0303 	bic.w	r3, r3, #3
 8006d92:	f043 0301 	orr.w	r3, r3, #1
 8006d96:	81a3      	strh	r3, [r4, #12]
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	431d      	orrs	r5, r3
 8006d9c:	81a5      	strh	r5, [r4, #12]
 8006d9e:	e7cf      	b.n	8006d40 <__smakebuf_r+0x18>

08006da0 <memmove>:
 8006da0:	4288      	cmp	r0, r1
 8006da2:	b510      	push	{r4, lr}
 8006da4:	eb01 0402 	add.w	r4, r1, r2
 8006da8:	d902      	bls.n	8006db0 <memmove+0x10>
 8006daa:	4284      	cmp	r4, r0
 8006dac:	4623      	mov	r3, r4
 8006dae:	d807      	bhi.n	8006dc0 <memmove+0x20>
 8006db0:	1e43      	subs	r3, r0, #1
 8006db2:	42a1      	cmp	r1, r4
 8006db4:	d008      	beq.n	8006dc8 <memmove+0x28>
 8006db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006dbe:	e7f8      	b.n	8006db2 <memmove+0x12>
 8006dc0:	4402      	add	r2, r0
 8006dc2:	4601      	mov	r1, r0
 8006dc4:	428a      	cmp	r2, r1
 8006dc6:	d100      	bne.n	8006dca <memmove+0x2a>
 8006dc8:	bd10      	pop	{r4, pc}
 8006dca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dd2:	e7f7      	b.n	8006dc4 <memmove+0x24>

08006dd4 <_fstat_r>:
 8006dd4:	b538      	push	{r3, r4, r5, lr}
 8006dd6:	4d07      	ldr	r5, [pc, #28]	; (8006df4 <_fstat_r+0x20>)
 8006dd8:	2300      	movs	r3, #0
 8006dda:	4604      	mov	r4, r0
 8006ddc:	4608      	mov	r0, r1
 8006dde:	4611      	mov	r1, r2
 8006de0:	602b      	str	r3, [r5, #0]
 8006de2:	f7fb fa90 	bl	8002306 <_fstat>
 8006de6:	1c43      	adds	r3, r0, #1
 8006de8:	d102      	bne.n	8006df0 <_fstat_r+0x1c>
 8006dea:	682b      	ldr	r3, [r5, #0]
 8006dec:	b103      	cbz	r3, 8006df0 <_fstat_r+0x1c>
 8006dee:	6023      	str	r3, [r4, #0]
 8006df0:	bd38      	pop	{r3, r4, r5, pc}
 8006df2:	bf00      	nop
 8006df4:	200003b8 	.word	0x200003b8

08006df8 <_isatty_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4d06      	ldr	r5, [pc, #24]	; (8006e14 <_isatty_r+0x1c>)
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	4604      	mov	r4, r0
 8006e00:	4608      	mov	r0, r1
 8006e02:	602b      	str	r3, [r5, #0]
 8006e04:	f7fb fa8f 	bl	8002326 <_isatty>
 8006e08:	1c43      	adds	r3, r0, #1
 8006e0a:	d102      	bne.n	8006e12 <_isatty_r+0x1a>
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	b103      	cbz	r3, 8006e12 <_isatty_r+0x1a>
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	bd38      	pop	{r3, r4, r5, pc}
 8006e14:	200003b8 	.word	0x200003b8

08006e18 <memcpy>:
 8006e18:	440a      	add	r2, r1
 8006e1a:	4291      	cmp	r1, r2
 8006e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e20:	d100      	bne.n	8006e24 <memcpy+0xc>
 8006e22:	4770      	bx	lr
 8006e24:	b510      	push	{r4, lr}
 8006e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e2e:	4291      	cmp	r1, r2
 8006e30:	d1f9      	bne.n	8006e26 <memcpy+0xe>
 8006e32:	bd10      	pop	{r4, pc}

08006e34 <_realloc_r>:
 8006e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e38:	4680      	mov	r8, r0
 8006e3a:	4614      	mov	r4, r2
 8006e3c:	460e      	mov	r6, r1
 8006e3e:	b921      	cbnz	r1, 8006e4a <_realloc_r+0x16>
 8006e40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e44:	4611      	mov	r1, r2
 8006e46:	f7fe be31 	b.w	8005aac <_malloc_r>
 8006e4a:	b92a      	cbnz	r2, 8006e58 <_realloc_r+0x24>
 8006e4c:	f7ff fa20 	bl	8006290 <_free_r>
 8006e50:	4625      	mov	r5, r4
 8006e52:	4628      	mov	r0, r5
 8006e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e58:	f000 f81b 	bl	8006e92 <_malloc_usable_size_r>
 8006e5c:	4284      	cmp	r4, r0
 8006e5e:	4607      	mov	r7, r0
 8006e60:	d802      	bhi.n	8006e68 <_realloc_r+0x34>
 8006e62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e66:	d812      	bhi.n	8006e8e <_realloc_r+0x5a>
 8006e68:	4621      	mov	r1, r4
 8006e6a:	4640      	mov	r0, r8
 8006e6c:	f7fe fe1e 	bl	8005aac <_malloc_r>
 8006e70:	4605      	mov	r5, r0
 8006e72:	2800      	cmp	r0, #0
 8006e74:	d0ed      	beq.n	8006e52 <_realloc_r+0x1e>
 8006e76:	42bc      	cmp	r4, r7
 8006e78:	4622      	mov	r2, r4
 8006e7a:	4631      	mov	r1, r6
 8006e7c:	bf28      	it	cs
 8006e7e:	463a      	movcs	r2, r7
 8006e80:	f7ff ffca 	bl	8006e18 <memcpy>
 8006e84:	4631      	mov	r1, r6
 8006e86:	4640      	mov	r0, r8
 8006e88:	f7ff fa02 	bl	8006290 <_free_r>
 8006e8c:	e7e1      	b.n	8006e52 <_realloc_r+0x1e>
 8006e8e:	4635      	mov	r5, r6
 8006e90:	e7df      	b.n	8006e52 <_realloc_r+0x1e>

08006e92 <_malloc_usable_size_r>:
 8006e92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e96:	1f18      	subs	r0, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	bfbc      	itt	lt
 8006e9c:	580b      	ldrlt	r3, [r1, r0]
 8006e9e:	18c0      	addlt	r0, r0, r3
 8006ea0:	4770      	bx	lr

08006ea2 <fmax>:
 8006ea2:	b508      	push	{r3, lr}
 8006ea4:	ed2d 8b04 	vpush	{d8-d9}
 8006ea8:	eeb0 8a40 	vmov.f32	s16, s0
 8006eac:	eef0 8a60 	vmov.f32	s17, s1
 8006eb0:	eeb0 9a41 	vmov.f32	s18, s2
 8006eb4:	eef0 9a61 	vmov.f32	s19, s3
 8006eb8:	f000 f842 	bl	8006f40 <__fpclassifyd>
 8006ebc:	b168      	cbz	r0, 8006eda <fmax+0x38>
 8006ebe:	eeb0 0a49 	vmov.f32	s0, s18
 8006ec2:	eef0 0a69 	vmov.f32	s1, s19
 8006ec6:	f000 f83b 	bl	8006f40 <__fpclassifyd>
 8006eca:	b150      	cbz	r0, 8006ee2 <fmax+0x40>
 8006ecc:	ec53 2b19 	vmov	r2, r3, d9
 8006ed0:	ec51 0b18 	vmov	r0, r1, d8
 8006ed4:	f7f9 fe38 	bl	8000b48 <__aeabi_dcmpgt>
 8006ed8:	b918      	cbnz	r0, 8006ee2 <fmax+0x40>
 8006eda:	eeb0 8a49 	vmov.f32	s16, s18
 8006ede:	eef0 8a69 	vmov.f32	s17, s19
 8006ee2:	eeb0 0a48 	vmov.f32	s0, s16
 8006ee6:	eef0 0a68 	vmov.f32	s1, s17
 8006eea:	ecbd 8b04 	vpop	{d8-d9}
 8006eee:	bd08      	pop	{r3, pc}

08006ef0 <fmin>:
 8006ef0:	b508      	push	{r3, lr}
 8006ef2:	ed2d 8b04 	vpush	{d8-d9}
 8006ef6:	eeb0 8a40 	vmov.f32	s16, s0
 8006efa:	eef0 8a60 	vmov.f32	s17, s1
 8006efe:	eeb0 9a41 	vmov.f32	s18, s2
 8006f02:	eef0 9a61 	vmov.f32	s19, s3
 8006f06:	f000 f81b 	bl	8006f40 <__fpclassifyd>
 8006f0a:	b168      	cbz	r0, 8006f28 <fmin+0x38>
 8006f0c:	eeb0 0a49 	vmov.f32	s0, s18
 8006f10:	eef0 0a69 	vmov.f32	s1, s19
 8006f14:	f000 f814 	bl	8006f40 <__fpclassifyd>
 8006f18:	b150      	cbz	r0, 8006f30 <fmin+0x40>
 8006f1a:	ec53 2b19 	vmov	r2, r3, d9
 8006f1e:	ec51 0b18 	vmov	r0, r1, d8
 8006f22:	f7f9 fdf3 	bl	8000b0c <__aeabi_dcmplt>
 8006f26:	b918      	cbnz	r0, 8006f30 <fmin+0x40>
 8006f28:	eeb0 8a49 	vmov.f32	s16, s18
 8006f2c:	eef0 8a69 	vmov.f32	s17, s19
 8006f30:	eeb0 0a48 	vmov.f32	s0, s16
 8006f34:	eef0 0a68 	vmov.f32	s1, s17
 8006f38:	ecbd 8b04 	vpop	{d8-d9}
 8006f3c:	bd08      	pop	{r3, pc}
	...

08006f40 <__fpclassifyd>:
 8006f40:	ec51 0b10 	vmov	r0, r1, d0
 8006f44:	b510      	push	{r4, lr}
 8006f46:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	d019      	beq.n	8006f82 <__fpclassifyd+0x42>
 8006f4e:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8006f52:	490e      	ldr	r1, [pc, #56]	; (8006f8c <__fpclassifyd+0x4c>)
 8006f54:	428a      	cmp	r2, r1
 8006f56:	d90e      	bls.n	8006f76 <__fpclassifyd+0x36>
 8006f58:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8006f5c:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8006f60:	428a      	cmp	r2, r1
 8006f62:	d908      	bls.n	8006f76 <__fpclassifyd+0x36>
 8006f64:	4a0a      	ldr	r2, [pc, #40]	; (8006f90 <__fpclassifyd+0x50>)
 8006f66:	4213      	tst	r3, r2
 8006f68:	d007      	beq.n	8006f7a <__fpclassifyd+0x3a>
 8006f6a:	4294      	cmp	r4, r2
 8006f6c:	d107      	bne.n	8006f7e <__fpclassifyd+0x3e>
 8006f6e:	fab0 f080 	clz	r0, r0
 8006f72:	0940      	lsrs	r0, r0, #5
 8006f74:	bd10      	pop	{r4, pc}
 8006f76:	2004      	movs	r0, #4
 8006f78:	e7fc      	b.n	8006f74 <__fpclassifyd+0x34>
 8006f7a:	2003      	movs	r0, #3
 8006f7c:	e7fa      	b.n	8006f74 <__fpclassifyd+0x34>
 8006f7e:	2000      	movs	r0, #0
 8006f80:	e7f8      	b.n	8006f74 <__fpclassifyd+0x34>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	d1ee      	bne.n	8006f64 <__fpclassifyd+0x24>
 8006f86:	2002      	movs	r0, #2
 8006f88:	e7f4      	b.n	8006f74 <__fpclassifyd+0x34>
 8006f8a:	bf00      	nop
 8006f8c:	7fdfffff 	.word	0x7fdfffff
 8006f90:	7ff00000 	.word	0x7ff00000

08006f94 <_init>:
 8006f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f96:	bf00      	nop
 8006f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f9a:	bc08      	pop	{r3}
 8006f9c:	469e      	mov	lr, r3
 8006f9e:	4770      	bx	lr

08006fa0 <_fini>:
 8006fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa2:	bf00      	nop
 8006fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa6:	bc08      	pop	{r3}
 8006fa8:	469e      	mov	lr, r3
 8006faa:	4770      	bx	lr
