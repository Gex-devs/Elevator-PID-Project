
ElevatorProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004248  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080043e8  080043e8  000143e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e4  080044e4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080044e4  080044e4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044e4  080044e4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044e4  080044e4  000144e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044e8  080044e8  000144e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080044ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000204  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  20000260  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009b12  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000017f8  00000000  00000000  00029be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000710  00000000  00000000  0002b3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000563  00000000  00000000  0002baf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002015e  00000000  00000000  0002c053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a630  00000000  00000000  0004c1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c0d48  00000000  00000000  000567e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002130  00000000  00000000  0011752c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0011965c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080043d0 	.word	0x080043d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080043d0 	.word	0x080043d0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <initPIDController>:
#include <stdlib.h>
#include <math.h>

#include "PIDController.h"

PIDController* initPIDController(double Kp, double Ki, double Kd, double timeDelta, double maxError) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b08c      	sub	sp, #48	; 0x30
 800060c:	af00      	add	r7, sp, #0
 800060e:	ed87 0b08 	vstr	d0, [r7, #32]
 8000612:	ed87 1b06 	vstr	d1, [r7, #24]
 8000616:	ed87 2b04 	vstr	d2, [r7, #16]
 800061a:	ed87 3b02 	vstr	d3, [r7, #8]
 800061e:	ed87 4b00 	vstr	d4, [r7]
    PIDController *pid = (PIDController*)malloc(sizeof(PIDController));
 8000622:	2050      	movs	r0, #80	; 0x50
 8000624:	f003 fa0e 	bl	8003a44 <malloc>
 8000628:	4603      	mov	r3, r0
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (pid == NULL) {
 800062c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800062e:	2b00      	cmp	r3, #0
 8000630:	d101      	bne.n	8000636 <initPIDController+0x2e>
        return NULL;
 8000632:	2300      	movs	r3, #0
 8000634:	e035      	b.n	80006a2 <initPIDController+0x9a>
    }

    pid->constants.Kp = Kp;
 8000636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000638:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800063c:	e9c1 2300 	strd	r2, r3, [r1]
    pid->constants.Ki = Ki;
 8000640:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000642:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000646:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid->constants.Kd = Kd;
 800064a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800064c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000650:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid->constants.maxError = maxError;
 8000654:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800065a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->values.timeDelta = timeDelta;
 800065e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000660:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000664:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    // Initialize other members to zero, they're
    // going to be calculated during operation.
    pid->values.currentError = 0.0;
 8000668:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800066a:	f04f 0200 	mov.w	r2, #0
 800066e:	f04f 0300 	mov.w	r3, #0
 8000672:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid->values.previousError = 0.0;
 8000676:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000678:	f04f 0200 	mov.w	r2, #0
 800067c:	f04f 0300 	mov.w	r3, #0
 8000680:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    pid->values.integral = 0.0;
 8000684:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    pid->values.derivative = 0.0;
 8000692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    return pid;
 80006a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3730      	adds	r7, #48	; 0x30
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <setPIDStep>:
    pid->values.currentError = pid->values.targetStep - currentProcessValue;
    return 0;
}


void setPIDStep(PIDController* pid, double targetStep, double currentProcessValue) {
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b086      	sub	sp, #24
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6178      	str	r0, [r7, #20]
 80006b2:	ed87 0b02 	vstr	d0, [r7, #8]
 80006b6:	ed87 1b00 	vstr	d1, [r7]
    if (pid == NULL) {
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d017      	beq.n	80006f0 <setPIDStep+0x46>
        return;
    }

    pid->values.targetStep = targetStep;
 80006c0:	6979      	ldr	r1, [r7, #20]
 80006c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80006c6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    pid->values.currentError = targetStep - currentProcessValue;
 80006ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80006ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80006d2:	f7ff fde1 	bl	8000298 <__aeabi_dsub>
 80006d6:	4602      	mov	r2, r0
 80006d8:	460b      	mov	r3, r1
 80006da:	6979      	ldr	r1, [r7, #20]
 80006dc:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid->values.previousError = 0.0; // reset to not mess up initial derivative calculation
 80006e0:	6979      	ldr	r1, [r7, #20]
 80006e2:	f04f 0200 	mov.w	r2, #0
 80006e6:	f04f 0300 	mov.w	r3, #0
 80006ea:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80006ee:	e000      	b.n	80006f2 <setPIDStep+0x48>
        return;
 80006f0:	bf00      	nop
}
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	2b00      	cmp	r3, #0
 8000708:	db0b      	blt.n	8000722 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	f003 021f 	and.w	r2, r3, #31
 8000710:	4907      	ldr	r1, [pc, #28]	; (8000730 <__NVIC_EnableIRQ+0x38>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	095b      	lsrs	r3, r3, #5
 8000718:	2001      	movs	r0, #1
 800071a:	fa00 f202 	lsl.w	r2, r0, r2
 800071e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000e100 	.word	0xe000e100

08000734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000744:	2b00      	cmp	r3, #0
 8000746:	db0a      	blt.n	800075e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	b2da      	uxtb	r2, r3
 800074c:	490c      	ldr	r1, [pc, #48]	; (8000780 <__NVIC_SetPriority+0x4c>)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	0112      	lsls	r2, r2, #4
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	440b      	add	r3, r1
 8000758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800075c:	e00a      	b.n	8000774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4908      	ldr	r1, [pc, #32]	; (8000784 <__NVIC_SetPriority+0x50>)
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	f003 030f 	and.w	r3, r3, #15
 800076a:	3b04      	subs	r3, #4
 800076c:	0112      	lsls	r2, r2, #4
 800076e:	b2d2      	uxtb	r2, r2
 8000770:	440b      	add	r3, r1
 8000772:	761a      	strb	r2, [r3, #24]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000e100 	.word	0xe000e100
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <UART_print>:
/**
  * @brief UART transmission function to output a string to the serial monitor
  * @param string the string literal to transmit over UART
  * @author Wouter Swinkels
 */
void UART_print(const char *string) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
    if (string != NULL) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00a      	beq.n	80007ac <UART_print+0x24>
        HAL_UART_Transmit(&huart2, (uint8_t *)string, strlen(string), HAL_MAX_DELAY);
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff fd22 	bl	80001e0 <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	b29a      	uxth	r2, r3
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	4803      	ldr	r0, [pc, #12]	; (80007b4 <UART_print+0x2c>)
 80007a8:	f002 fcd2 	bl	8003150 <HAL_UART_Transmit>
    }
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000078 	.word	0x20000078

080007b8 <UART_print_formatted>:
  * @brief UART transmission of a string with formatting (like in `sprintf()`).
  * @param string the string literal to transmit over UART, (e.g., "distance: %d")
  * @param ... any parameters to be formatted into the string (e.g., int distance)
  * @author Wouter Swinkels
 */
void UART_print_formatted(const char *format, ...) {
 80007b8:	b40f      	push	{r0, r1, r2, r3}
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b092      	sub	sp, #72	; 0x48
 80007be:	af00      	add	r7, sp, #0
    char UARTString[64];

    va_list args;
    va_start(args, format);
 80007c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007c4:	607b      	str	r3, [r7, #4]
    vsnprintf(UARTString, sizeof(UARTString), format, args);
 80007c6:	f107 0008 	add.w	r0, r7, #8
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80007ce:	2140      	movs	r1, #64	; 0x40
 80007d0:	f003 fa18 	bl	8003c04 <vsniprintf>
    va_end(args);
    UART_print(UARTString); // Use UART_print to transmit
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ffd5 	bl	8000788 <UART_print>
}
 80007de:	bf00      	nop
 80007e0:	3748      	adds	r7, #72	; 0x48
 80007e2:	46bd      	mov	sp, r7
 80007e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007e8:	b004      	add	sp, #16
 80007ea:	4770      	bx	lr

080007ec <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

	// Rising or falling edge trigger:
	if (TIM4->SR & TIM_SR_CC1IF) {
 80007f0:	4b3c      	ldr	r3, [pc, #240]	; (80008e4 <TIM4_IRQHandler+0xf8>)
 80007f2:	691b      	ldr	r3, [r3, #16]
 80007f4:	f003 0302 	and.w	r3, r3, #2
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d04c      	beq.n	8000896 <TIM4_IRQHandler+0xaa>
		TIM4->SR &= ~TIM_SR_CC1IF;
 80007fc:	4b39      	ldr	r3, [pc, #228]	; (80008e4 <TIM4_IRQHandler+0xf8>)
 80007fe:	691b      	ldr	r3, [r3, #16]
 8000800:	4a38      	ldr	r2, [pc, #224]	; (80008e4 <TIM4_IRQHandler+0xf8>)
 8000802:	f023 0302 	bic.w	r3, r3, #2
 8000806:	6113      	str	r3, [r2, #16]
		if (!capture_flag && !capture_done_flag) {		     // Rising edge
 8000808:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <TIM4_IRQHandler+0xfc>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	f083 0301 	eor.w	r3, r3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d01e      	beq.n	8000856 <TIM4_IRQHandler+0x6a>
 8000818:	4b34      	ldr	r3, [pc, #208]	; (80008ec <TIM4_IRQHandler+0x100>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	f083 0301 	eor.w	r3, r3, #1
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d016      	beq.n	8000856 <TIM4_IRQHandler+0x6a>
			thigh = TIM4->CCR1;          // Store time of rising edge
 8000828:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <TIM4_IRQHandler+0xf8>)
 800082a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800082c:	4a30      	ldr	r2, [pc, #192]	; (80008f0 <TIM4_IRQHandler+0x104>)
 800082e:	6013      	str	r3, [r2, #0]
			TIM4->CCER ^= TIM_CCER_CC1P; // Switch to capturing falling edge
 8000830:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <TIM4_IRQHandler+0xf8>)
 8000832:	6a1b      	ldr	r3, [r3, #32]
 8000834:	4a2b      	ldr	r2, [pc, #172]	; (80008e4 <TIM4_IRQHandler+0xf8>)
 8000836:	f083 0302 	eor.w	r3, r3, #2
 800083a:	6213      	str	r3, [r2, #32]
			capture_flag = true;
 800083c:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <TIM4_IRQHandler+0xfc>)
 800083e:	2201      	movs	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]
			overflow_count = 0;          // Reset overflow, as this is a new time capture
 8000842:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <TIM4_IRQHandler+0x108>)
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
			capture_done_flag = false;
 8000848:	4b28      	ldr	r3, [pc, #160]	; (80008ec <TIM4_IRQHandler+0x100>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
			capture_flag = true;
 800084e:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <TIM4_IRQHandler+0xfc>)
 8000850:	2201      	movs	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	e01f      	b.n	8000896 <TIM4_IRQHandler+0xaa>
		} else if (capture_flag && !capture_done_flag) { // Falling edge
 8000856:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <TIM4_IRQHandler+0xfc>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	d01a      	beq.n	8000896 <TIM4_IRQHandler+0xaa>
 8000860:	4b22      	ldr	r3, [pc, #136]	; (80008ec <TIM4_IRQHandler+0x100>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	f083 0301 	eor.w	r3, r3, #1
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	d012      	beq.n	8000896 <TIM4_IRQHandler+0xaa>
			tlow = TIM4->CCR1;           // Store time of the falling edge using CCR
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <TIM4_IRQHandler+0xf8>)
 8000872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000874:	4a20      	ldr	r2, [pc, #128]	; (80008f8 <TIM4_IRQHandler+0x10c>)
 8000876:	6013      	str	r3, [r2, #0]
			capture_flag = false;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <TIM4_IRQHandler+0xfc>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
			capture_done_flag = true;
 800087e:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <TIM4_IRQHandler+0x100>)
 8000880:	2201      	movs	r2, #1
 8000882:	701a      	strb	r2, [r3, #0]
			TIM4->CCER ^= TIM_CCER_CC1P; // Switch back to capture the rising edge
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <TIM4_IRQHandler+0xf8>)
 8000886:	6a1b      	ldr	r3, [r3, #32]
 8000888:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <TIM4_IRQHandler+0xf8>)
 800088a:	f083 0302 	eor.w	r3, r3, #2
 800088e:	6213      	str	r3, [r2, #32]
			capture_done_flag = true; // should be set false in other task handler.
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <TIM4_IRQHandler+0x100>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
		}
	}

  // Overflow of TIM4, increment the overflow count
  // to ensure proper calculation of time duration.
	if (TIM4->SR & TIM_SR_UIF) {
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <TIM4_IRQHandler+0xf8>)
 8000898:	691b      	ldr	r3, [r3, #16]
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d01a      	beq.n	80008d8 <TIM4_IRQHandler+0xec>
		TIM4->SR &= ~TIM_SR_UIF;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <TIM4_IRQHandler+0xf8>)
 80008a4:	691b      	ldr	r3, [r3, #16]
 80008a6:	4a0f      	ldr	r2, [pc, #60]	; (80008e4 <TIM4_IRQHandler+0xf8>)
 80008a8:	f023 0301 	bic.w	r3, r3, #1
 80008ac:	6113      	str	r3, [r2, #16]
		if (capture_flag && !capture_done_flag) {
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <TIM4_IRQHandler+0xfc>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d00f      	beq.n	80008d8 <TIM4_IRQHandler+0xec>
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <TIM4_IRQHandler+0x100>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	f083 0301 	eor.w	r3, r3, #1
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d007      	beq.n	80008d8 <TIM4_IRQHandler+0xec>
			overflow_flag = true;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <TIM4_IRQHandler+0x110>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
			overflow_count++;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <TIM4_IRQHandler+0x108>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	3301      	adds	r3, #1
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <TIM4_IRQHandler+0x108>)
 80008d6:	6013      	str	r3, [r2, #0]
		}
	}
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40000800 	.word	0x40000800
 80008e8:	20000100 	.word	0x20000100
 80008ec:	20000101 	.word	0x20000101
 80008f0:	20000104 	.word	0x20000104
 80008f4:	2000010c 	.word	0x2000010c
 80008f8:	20000108 	.word	0x20000108
 80008fc:	20000102 	.word	0x20000102

08000900 <TIM3_Configuration>:
  * @brief TIM3 Initialization Function
  * @details Sets TIM3 to a PWM output signal for a servo motor on a 50Hz frequency
  * @param None
  * @retval None
  */
void TIM3_Configuration(void) {
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000904:	4b29      	ldr	r3, [pc, #164]	; (80009ac <TIM3_Configuration+0xac>)
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	4a28      	ldr	r2, [pc, #160]	; (80009ac <TIM3_Configuration+0xac>)
 800090a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800090e:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000910:	4b26      	ldr	r3, [pc, #152]	; (80009ac <TIM3_Configuration+0xac>)
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	4a25      	ldr	r2, [pc, #148]	; (80009ac <TIM3_Configuration+0xac>)
 8000916:	f043 0302 	orr.w	r3, r3, #2
 800091a:	61d3      	str	r3, [r2, #28]

    GPIOB->MODER &= ~(GPIO_MODER_MODER5);
 800091c:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <TIM3_Configuration+0xb0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a23      	ldr	r2, [pc, #140]	; (80009b0 <TIM3_Configuration+0xb0>)
 8000922:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000926:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODER5_1;
 8000928:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <TIM3_Configuration+0xb0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a20      	ldr	r2, [pc, #128]	; (80009b0 <TIM3_Configuration+0xb0>)
 800092e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000932:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[0] &= ~GPIO_AFRL_AFRL5;
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <TIM3_Configuration+0xb0>)
 8000936:	6a1b      	ldr	r3, [r3, #32]
 8000938:	4a1d      	ldr	r2, [pc, #116]	; (80009b0 <TIM3_Configuration+0xb0>)
 800093a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800093e:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (0b0010 << GPIO_AFRL_AFRL5_Pos);
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <TIM3_Configuration+0xb0>)
 8000942:	6a1b      	ldr	r3, [r3, #32]
 8000944:	4a1a      	ldr	r2, [pc, #104]	; (80009b0 <TIM3_Configuration+0xb0>)
 8000946:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800094a:	6213      	str	r3, [r2, #32]

    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <TIM3_Configuration+0xac>)
 800094e:	69db      	ldr	r3, [r3, #28]
 8000950:	4a16      	ldr	r2, [pc, #88]	; (80009ac <TIM3_Configuration+0xac>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	61d3      	str	r3, [r2, #28]
    TIM3->PSC = 71;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <TIM3_Configuration+0xb4>)
 800095a:	2247      	movs	r2, #71	; 0x47
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 19999; // Set auto-reload value to 50Hz (period of 20ms on 1MHz)
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <TIM3_Configuration+0xb4>)
 8000960:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000964:	62da      	str	r2, [r3, #44]	; 0x2c

    TIM3->CCMR1 &= ~(TIM_CCMR1_OC2M);
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <TIM3_Configuration+0xb4>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <TIM3_Configuration+0xb4>)
 800096c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000974:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= (TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2);
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <TIM3_Configuration+0xb4>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <TIM3_Configuration+0xb4>)
 800097c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000980:	6193      	str	r3, [r2, #24]
    TIM3->CCER |= TIM_CCER_CC2E;
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <TIM3_Configuration+0xb4>)
 8000984:	6a1b      	ldr	r3, [r3, #32]
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <TIM3_Configuration+0xb4>)
 8000988:	f043 0310 	orr.w	r3, r3, #16
 800098c:	6213      	str	r3, [r2, #32]
    TIM3->CR1 |= TIM_CR1_CEN;
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <TIM3_Configuration+0xb4>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <TIM3_Configuration+0xb4>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6013      	str	r3, [r2, #0]

    TIM3->CCR1 = 1500; // Set the signal to 1.5ms to pause the motor initially.
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <TIM3_Configuration+0xb4>)
 800099c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80009a0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	40021000 	.word	0x40021000
 80009b0:	48000400 	.word	0x48000400
 80009b4:	40000400 	.word	0x40000400

080009b8 <Timer4_Init>:
  * @brief TIM4 Initialization Function
  * @details Sets TIM4 to capturing both the rising and falling edges on a 1MHz capture rate.
  * @param None
  * @retval None
  */
void Timer4_Init(void) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;	// Enable clock for GPIOB
 80009bc:	4b3d      	ldr	r3, [pc, #244]	; (8000ab4 <Timer4_Init+0xfc>)
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	4a3c      	ldr	r2, [pc, #240]	; (8000ab4 <Timer4_Init+0xfc>)
 80009c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c6:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN; // Enable APB clock for TIM4
 80009c8:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <Timer4_Init+0xfc>)
 80009ca:	69db      	ldr	r3, [r3, #28]
 80009cc:	4a39      	ldr	r2, [pc, #228]	; (8000ab4 <Timer4_Init+0xfc>)
 80009ce:	f043 0304 	orr.w	r3, r3, #4
 80009d2:	61d3      	str	r3, [r2, #28]


    GPIOB->MODER &= ~(GPIO_MODER_MODER6); // Configure PB6 to AF mode
 80009d4:	4b38      	ldr	r3, [pc, #224]	; (8000ab8 <Timer4_Init+0x100>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a37      	ldr	r2, [pc, #220]	; (8000ab8 <Timer4_Init+0x100>)
 80009da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009de:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODER6_1;
 80009e0:	4b35      	ldr	r3, [pc, #212]	; (8000ab8 <Timer4_Init+0x100>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a34      	ldr	r2, [pc, #208]	; (8000ab8 <Timer4_Init+0x100>)
 80009e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009ea:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] &= ~(0xFU << (4U * 6U)); // Configure AF mapping to PB6
 80009ec:	4b32      	ldr	r3, [pc, #200]	; (8000ab8 <Timer4_Init+0x100>)
 80009ee:	6a1b      	ldr	r3, [r3, #32]
 80009f0:	4a31      	ldr	r2, [pc, #196]	; (8000ab8 <Timer4_Init+0x100>)
 80009f2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80009f6:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (2U << (4U * 6U));
 80009f8:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <Timer4_Init+0x100>)
 80009fa:	6a1b      	ldr	r3, [r3, #32]
 80009fc:	4a2e      	ldr	r2, [pc, #184]	; (8000ab8 <Timer4_Init+0x100>)
 80009fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a02:	6213      	str	r3, [r2, #32]


	TIM4->PSC = 71; // Configure PSC for 1MHz clock (72MHZ/72=1MHz)
 8000a04:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <Timer4_Init+0x104>)
 8000a06:	2247      	movs	r2, #71	; 0x47
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28

	// Set TIM4 to Capture Compare input (see CCCER and CCMR entries in datasheet)
	TIM4->CCMR1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_IC1PSC | TIM_CCMR1_IC1F);
 8000a0a:	4b2c      	ldr	r3, [pc, #176]	; (8000abc <Timer4_Init+0x104>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a2b      	ldr	r2, [pc, #172]	; (8000abc <Timer4_Init+0x104>)
 8000a10:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000a14:	6193      	str	r3, [r2, #24]
	TIM4->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000a16:	4b29      	ldr	r3, [pc, #164]	; (8000abc <Timer4_Init+0x104>)
 8000a18:	6a1b      	ldr	r3, [r3, #32]
 8000a1a:	4a28      	ldr	r2, [pc, #160]	; (8000abc <Timer4_Init+0x104>)
 8000a1c:	f023 030b 	bic.w	r3, r3, #11
 8000a20:	6213      	str	r3, [r2, #32]
	TIM4->CCMR1 &= ~(TIM_CCMR1_CC1S);
 8000a22:	4b26      	ldr	r3, [pc, #152]	; (8000abc <Timer4_Init+0x104>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	4a25      	ldr	r2, [pc, #148]	; (8000abc <Timer4_Init+0x104>)
 8000a28:	f023 0303 	bic.w	r3, r3, #3
 8000a2c:	6193      	str	r3, [r2, #24]

	TIM4->CCMR1 |= TIM_CCMR1_CC1S_0; // Set to input mode
 8000a2e:	4b23      	ldr	r3, [pc, #140]	; (8000abc <Timer4_Init+0x104>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4a22      	ldr	r2, [pc, #136]	; (8000abc <Timer4_Init+0x104>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6193      	str	r3, [r2, #24]

	TIM4->CCER |= TIM_CCER_CC1E;	// Enable capture compare
 8000a3a:	4b20      	ldr	r3, [pc, #128]	; (8000abc <Timer4_Init+0x104>)
 8000a3c:	6a1b      	ldr	r3, [r3, #32]
 8000a3e:	4a1f      	ldr	r2, [pc, #124]	; (8000abc <Timer4_Init+0x104>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~TIM_CCER_CC1NP;  // Set to capture both rising and falling
 8000a46:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <Timer4_Init+0x104>)
 8000a48:	6a1b      	ldr	r3, [r3, #32]
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <Timer4_Init+0x104>)
 8000a4c:	f023 0308 	bic.w	r3, r3, #8
 8000a50:	6213      	str	r3, [r2, #32]

	TIM4->DIER &= ~(TIM_DIER_CC1IE | TIM_DIER_CC1DE);
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <Timer4_Init+0x104>)
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	4a19      	ldr	r2, [pc, #100]	; (8000abc <Timer4_Init+0x104>)
 8000a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a5c:	f023 0302 	bic.w	r3, r3, #2
 8000a60:	60d3      	str	r3, [r2, #12]
	TIM4->DIER |= TIM_DIER_CC1IE;	// Enable interrupt for capture channel 1
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <Timer4_Init+0x104>)
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	4a15      	ldr	r2, [pc, #84]	; (8000abc <Timer4_Init+0x104>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	60d3      	str	r3, [r2, #12]
	TIM4->DIER |= TIM_DIER_UIE;		// Enable update interrupt for overflow capture
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <Timer4_Init+0x104>)
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <Timer4_Init+0x104>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	60d3      	str	r3, [r2, #12]

	// Enable TIM4 for channel 1 (by setting Control Register 1 values):
	TIM4->CR1 &= ~(TIM_CR1_CEN | TIM_CR1_OPM | TIM_CR1_URS | TIM_CR1_UDIS |
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <Timer4_Init+0x104>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a0f      	ldr	r2, [pc, #60]	; (8000abc <Timer4_Init+0x104>)
 8000a80:	f423 630e 	bic.w	r3, r3, #2272	; 0x8e0
 8000a84:	f023 030f 	bic.w	r3, r3, #15
 8000a88:	6013      	str	r3, [r2, #0]
				   TIM_CR1_CMS | TIM_CR1_ARPE | TIM_CR1_UIFREMAP);
	TIM4->CR1 &= ~TIM_CR1_DIR;
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <Timer4_Init+0x104>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <Timer4_Init+0x104>)
 8000a90:	f023 0310 	bic.w	r3, r3, #16
 8000a94:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |= TIM_CR1_CEN;
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <Timer4_Init+0x104>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <Timer4_Init+0x104>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6013      	str	r3, [r2, #0]

	// Enabe the interrupt service routine for TIm4:
	NVIC_EnableIRQ(TIM4_IRQn);
 8000aa2:	201e      	movs	r0, #30
 8000aa4:	f7ff fe28 	bl	80006f8 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM4_IRQn, 0);
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	201e      	movs	r0, #30
 8000aac:	f7ff fe42 	bl	8000734 <__NVIC_SetPriority>
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	48000400 	.word	0x48000400
 8000abc:	40000800 	.word	0x40000800

08000ac0 <calculateNewEncoderAngle>:

void calculateNewEncoderAngle(float* currentAngle, int* currentTurns) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	if (!capture_done_flag) return; // no new encoder capture, angle stays the same.
 8000aca:	4b5a      	ldr	r3, [pc, #360]	; (8000c34 <calculateNewEncoderAngle+0x174>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	f083 0301 	eor.w	r3, r3, #1
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 80a6 	bne.w	8000c28 <calculateNewEncoderAngle+0x168>
	capture_done_flag = false;
 8000adc:	4b55      	ldr	r3, [pc, #340]	; (8000c34 <calculateNewEncoderAngle+0x174>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]

	// 1. Calculate the capture tick time
	//UART_print("New capture + angle update! ");
	uint32_t ticks = ((tlow-thigh) + (overflow_count* (TIMER_MAX_VALUE + 1))) % (TIMER_MAX_VALUE + 1);
 8000ae2:	4b55      	ldr	r3, [pc, #340]	; (8000c38 <calculateNewEncoderAngle+0x178>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	4b55      	ldr	r3, [pc, #340]	; (8000c3c <calculateNewEncoderAngle+0x17c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	1ad1      	subs	r1, r2, r3
 8000aec:	4b54      	ldr	r3, [pc, #336]	; (8000c40 <calculateNewEncoderAngle+0x180>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4613      	mov	r3, r2
 8000af2:	041b      	lsls	r3, r3, #16
 8000af4:	4413      	add	r3, r2
 8000af6:	18ca      	adds	r2, r1, r3
 8000af8:	4b52      	ldr	r3, [pc, #328]	; (8000c44 <calculateNewEncoderAngle+0x184>)
 8000afa:	fba3 1302 	umull	r1, r3, r3, r2
 8000afe:	0c19      	lsrs	r1, r3, #16
 8000b00:	460b      	mov	r3, r1
 8000b02:	041b      	lsls	r3, r3, #16
 8000b04:	440b      	add	r3, r1
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	617b      	str	r3, [r7, #20]
	UART_print_formatted("ticks = %d\n", ticks);
 8000b0a:	6979      	ldr	r1, [r7, #20]
 8000b0c:	484e      	ldr	r0, [pc, #312]	; (8000c48 <calculateNewEncoderAngle+0x188>)
 8000b0e:	f7ff fe53 	bl	80007b8 <UART_print_formatted>

	// 2. Calculate the current angle from the duty cycle of the encoder:
	float PWM_duty_cycle = ((ticks) / (1100.0f)) * 100.0f;
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	ee07 3a90 	vmov	s15, r3
 8000b18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b1c:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8000c4c <calculateNewEncoderAngle+0x18c>
 8000b20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b24:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8000c50 <calculateNewEncoderAngle+0x190>
 8000b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2c:	edc7 7a04 	vstr	s15, [r7, #16]
	UART_print_formatted("dc = %d\n", (int)PWM_duty_cycle);
 8000b30:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b38:	ee17 1a90 	vmov	r1, s15
 8000b3c:	4845      	ldr	r0, [pc, #276]	; (8000c54 <calculateNewEncoderAngle+0x194>)
 8000b3e:	f7ff fe3b 	bl	80007b8 <UART_print_formatted>
	if (PWM_duty_cycle > 100) return; // wrong duty cycle. May happen with initial captures on bootup
 8000b42:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b46:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000c50 <calculateNewEncoderAngle+0x190>
 8000b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b52:	dc6b      	bgt.n	8000c2c <calculateNewEncoderAngle+0x16c>
	float motorTheta = (UNITS_FULL_CIRCLE - 1) - ((PWM_duty_cycle - dcMin) * UNITS_FULL_CIRCLE) / (dcMax - dcMin + 1);
 8000b54:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000c58 <calculateNewEncoderAngle+0x198>
 8000b58:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b60:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8000c5c <calculateNewEncoderAngle+0x19c>
 8000b64:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000b68:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8000c60 <calculateNewEncoderAngle+0x1a0>
 8000b6c:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8000c58 <calculateNewEncoderAngle+0x198>
 8000b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b80:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8000c64 <calculateNewEncoderAngle+0x1a4>
 8000b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b88:	edc7 7a03 	vstr	s15, [r7, #12]
	UART_print_formatted("measured = %d\n", (int)motorTheta);
 8000b8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b94:	ee17 1a90 	vmov	r1, s15
 8000b98:	4833      	ldr	r0, [pc, #204]	; (8000c68 <calculateNewEncoderAngle+0x1a8>)
 8000b9a:	f7ff fe0d 	bl	80007b8 <UART_print_formatted>

	// 3. Check whether the new angle has made any full cycle turns, and
	//    apply those turns accordingly.

    float angleDifference = motorTheta - *currentAngle;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	edd3 7a00 	vldr	s15, [r3]
 8000ba4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bac:	edc7 7a02 	vstr	s15, [r7, #8]

    if (angleDifference > 180.0f) {
 8000bb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bb4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000c6c <calculateNewEncoderAngle+0x1ac>
 8000bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc0:	dd03      	ble.n	8000bca <calculateNewEncoderAngle+0x10a>
        UART_print("wrapped from 360 to 0");
 8000bc2:	482b      	ldr	r0, [pc, #172]	; (8000c70 <calculateNewEncoderAngle+0x1b0>)
 8000bc4:	f7ff fde0 	bl	8000788 <UART_print>
        while(1);
 8000bc8:	e7fe      	b.n	8000bc8 <calculateNewEncoderAngle+0x108>
        (*currentTurns)--;
    } else if (angleDifference < -180.0f) {
 8000bca:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bce:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000c74 <calculateNewEncoderAngle+0x1b4>
 8000bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bda:	d503      	bpl.n	8000be4 <calculateNewEncoderAngle+0x124>
        UART_print("wrapped from 0 to 360");
 8000bdc:	4826      	ldr	r0, [pc, #152]	; (8000c78 <calculateNewEncoderAngle+0x1b8>)
 8000bde:	f7ff fdd3 	bl	8000788 <UART_print>
        while(1);
 8000be2:	e7fe      	b.n	8000be2 <calculateNewEncoderAngle+0x122>
    	(*currentTurns)++;
    }

	// 4. Update the current angle:
	*currentAngle = motorTheta + (float)(*currentTurns * UNITS_FULL_CIRCLE);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000bec:	fb02 f303 	mul.w	r3, r2, r3
 8000bf0:	ee07 3a90 	vmov	s15, r3
 8000bf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	edc3 7a00 	vstr	s15, [r3]

	UART_print_formatted("turns=%d\t", *currentTurns);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	481b      	ldr	r0, [pc, #108]	; (8000c7c <calculateNewEncoderAngle+0x1bc>)
 8000c0e:	f7ff fdd3 	bl	80007b8 <UART_print_formatted>
	UART_print_formatted("angle=%d\n", (int)*currentAngle);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	edd3 7a00 	vldr	s15, [r3]
 8000c18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c1c:	ee17 1a90 	vmov	r1, s15
 8000c20:	4817      	ldr	r0, [pc, #92]	; (8000c80 <calculateNewEncoderAngle+0x1c0>)
 8000c22:	f7ff fdc9 	bl	80007b8 <UART_print_formatted>
 8000c26:	e002      	b.n	8000c2e <calculateNewEncoderAngle+0x16e>
	if (!capture_done_flag) return; // no new encoder capture, angle stays the same.
 8000c28:	bf00      	nop
 8000c2a:	e000      	b.n	8000c2e <calculateNewEncoderAngle+0x16e>
	if (PWM_duty_cycle > 100) return; // wrong duty cycle. May happen with initial captures on bootup
 8000c2c:	bf00      	nop


}
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000101 	.word	0x20000101
 8000c38:	20000108 	.word	0x20000108
 8000c3c:	20000104 	.word	0x20000104
 8000c40:	2000010c 	.word	0x2000010c
 8000c44:	ffff0001 	.word	0xffff0001
 8000c48:	080043e8 	.word	0x080043e8
 8000c4c:	44898000 	.word	0x44898000
 8000c50:	42c80000 	.word	0x42c80000
 8000c54:	080043f4 	.word	0x080043f4
 8000c58:	4039999a 	.word	0x4039999a
 8000c5c:	43b40000 	.word	0x43b40000
 8000c60:	42c23333 	.word	0x42c23333
 8000c64:	43b38000 	.word	0x43b38000
 8000c68:	08004400 	.word	0x08004400
 8000c6c:	43340000 	.word	0x43340000
 8000c70:	08004410 	.word	0x08004410
 8000c74:	c3340000 	.word	0xc3340000
 8000c78:	08004428 	.word	0x08004428
 8000c7c:	08004440 	.word	0x08004440
 8000c80:	0800444c 	.word	0x0800444c
 8000c84:	00000000 	.word	0x00000000

08000c88 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b090      	sub	sp, #64	; 0x40
 8000c8c:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8e:	f000 fa6d 	bl	800116c <HAL_Init>
  SystemClock_Config();
 8000c92:	f000 f86f 	bl	8000d74 <SystemClock_Config>
  MX_GPIO_Init();
 8000c96:	f000 f8fb 	bl	8000e90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c9a:	f000 f8c9 	bl	8000e30 <MX_USART2_UART_Init>

  /* Setup timers: */

  Timer4_Init(); 		// Initialise TIM4 with input capture on PB6
 8000c9e:	f7ff fe8b 	bl	80009b8 <Timer4_Init>
  TIM3_Configuration(); // Initialise TIM3 to a PWM signal for the motor control
 8000ca2:	f7ff fe2d 	bl	8000900 <TIM3_Configuration>

  /* Setup the angles to be used by the motor: */

  float currentAngle = 0.0; // The current angle of the motor
 8000ca6:	f04f 0300 	mov.w	r3, #0
 8000caa:	607b      	str	r3, [r7, #4]
  int currentTurns = 0;     // The current amount of full-degree turns the motor has made (used for calculating total)
 8000cac:	2300      	movs	r3, #0
 8000cae:	603b      	str	r3, [r7, #0]

  /* Setup the PID controller */

  double Kp = 3.0;
 8000cb0:	f04f 0200 	mov.w	r2, #0
 8000cb4:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <main+0xd8>)
 8000cb6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  double Ki = 0.0; // Will evaluate to a PD controller if Ki is zero.
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  double Kd = 0.01;
 8000cc6:	a324      	add	r3, pc, #144	; (adr r3, 8000d58 <main+0xd0>)
 8000cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ccc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  double timeDelta = 20.0;  // Time delta of step function (used for integral and derivative calculations)
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <main+0xdc>)
 8000cd6:	e9c7 2308 	strd	r2, r3, [r7, #32]
  double maxError = 1000.0; // Max expected (thus point of saturated normalized value) error in degrees
 8000cda:	f04f 0200 	mov.w	r2, #0
 8000cde:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <main+0xe0>)
 8000ce0:	e9c7 2306 	strd	r2, r3, [r7, #24]

  PIDController* pid = initPIDController(Kp, Ki, Kd, timeDelta, maxError);
 8000ce4:	ed97 4b06 	vldr	d4, [r7, #24]
 8000ce8:	ed97 3b08 	vldr	d3, [r7, #32]
 8000cec:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8000cf0:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8000cf4:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8000cf8:	f7ff fc86 	bl	8000608 <initPIDController>
 8000cfc:	6178      	str	r0, [r7, #20]

  if (pid == NULL) {
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d103      	bne.n	8000d0c <main+0x84>
	  UART_print("Failed to setup PID controller");
 8000d04:	4819      	ldr	r0, [pc, #100]	; (8000d6c <main+0xe4>)
 8000d06:	f7ff fd3f 	bl	8000788 <UART_print>
	  while(1); // Halt
 8000d0a:	e7fe      	b.n	8000d0a <main+0x82>
  }

  HAL_Delay(1000); // Wait to ensure that initial capture is already completed
 8000d0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d10:	f000 fa92 	bl	8001238 <HAL_Delay>
  	  	  	     // Otherwise, one gets erronous values.

  // Retrieve the initial angle from the encoder:
  calculateNewEncoderAngle(&currentAngle, &currentTurns);
 8000d14:	463a      	mov	r2, r7
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fed0 	bl	8000ac0 <calculateNewEncoderAngle>

  double targetDegree = 500.0; // Example target degree.
 8000d20:	f04f 0200 	mov.w	r2, #0
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <main+0xe8>)
 8000d26:	e9c7 2302 	strd	r2, r3, [r7, #8]
  setPIDStep(pid, targetDegree, currentAngle);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fc13 	bl	8000558 <__aeabi_f2d>
 8000d32:	4602      	mov	r2, r0
 8000d34:	460b      	mov	r3, r1
 8000d36:	ec43 2b11 	vmov	d1, r2, r3
 8000d3a:	ed97 0b02 	vldr	d0, [r7, #8]
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff fcb3 	bl	80006aa <setPIDStep>
	   * 2. Applying the power using PID updates and power control
	   * 3. Waiting for the step amount
	   */

	  // 1. Calculate the new angle and update the PID error:
	  calculateNewEncoderAngle(&currentAngle, &currentTurns);
 8000d44:	463a      	mov	r2, r7
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff feb8 	bl	8000ac0 <calculateNewEncoderAngle>
	  if (true) continue;
 8000d50:	bf00      	nop
  while (1) {
 8000d52:	e7f7      	b.n	8000d44 <main+0xbc>
 8000d54:	f3af 8000 	nop.w
 8000d58:	47ae147b 	.word	0x47ae147b
 8000d5c:	3f847ae1 	.word	0x3f847ae1
 8000d60:	40080000 	.word	0x40080000
 8000d64:	40340000 	.word	0x40340000
 8000d68:	408f4000 	.word	0x408f4000
 8000d6c:	08004458 	.word	0x08004458
 8000d70:	407f4000 	.word	0x407f4000

08000d74 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b0a6      	sub	sp, #152	; 0x98
 8000d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d7e:	2228      	movs	r2, #40	; 0x28
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f002 ff4c 	bl	8003c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2258      	movs	r2, #88	; 0x58
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 ff3e 	bl	8003c20 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da4:	2302      	movs	r3, #2
 8000da6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da8:	2301      	movs	r3, #1
 8000daa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dac:	2310      	movs	r3, #16
 8000dae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db2:	2302      	movs	r3, #2
 8000db4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dc0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 fcdc 	bl	8001790 <HAL_RCC_OscConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dde:	f000 f8bd 	bl	8000f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de2:	230f      	movs	r3, #15
 8000de4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de6:	2302      	movs	r3, #2
 8000de8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000df8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 fd1a 	bl	8002838 <HAL_RCC_ClockConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e0a:	f000 f8a7 	bl	8000f5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 ff2d 	bl	8002c78 <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e24:	f000 f89a 	bl	8000f5c <Error_Handler>
  }
}
 8000e28:	bf00      	nop
 8000e2a:	3798      	adds	r7, #152	; 0x98
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e36:	4a15      	ldr	r2, [pc, #84]	; (8000e8c <MX_USART2_UART_Init+0x5c>)
 8000e38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e3c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e74:	f002 f91e 	bl	80030b4 <HAL_UART_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e7e:	f000 f86d 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000078 	.word	0x20000078
 8000e8c:	40004400 	.word	0x40004400

08000e90 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	4a2a      	ldr	r2, [pc, #168]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000eac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000eb0:	6153      	str	r3, [r2, #20]
 8000eb2:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ebe:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	4a24      	ldr	r2, [pc, #144]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000ec4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ec8:	6153      	str	r3, [r2, #20]
 8000eca:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	4a1e      	ldr	r2, [pc, #120]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	6153      	str	r3, [r2, #20]
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	4a18      	ldr	r2, [pc, #96]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef8:	6153      	str	r3, [r2, #20]
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2120      	movs	r1, #32
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0e:	f000 fc27 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f18:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	480b      	ldr	r0, [pc, #44]	; (8000f58 <MX_GPIO_Init+0xc8>)
 8000f2a:	f000 fa8f 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f2e:	2320      	movs	r3, #32
 8000f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f48:	f000 fa80 	bl	800144c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	; 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000
 8000f58:	48000800 	.word	0x48000800

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <Error_Handler+0x8>
	...

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <HAL_MspInit+0x44>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <HAL_MspInit+0x44>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6193      	str	r3, [r2, #24]
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <HAL_MspInit+0x44>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_MspInit+0x44>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_MspInit+0x44>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_MspInit+0x44>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f9e:	2007      	movs	r0, #7
 8000fa0:	f000 fa20 	bl	80013e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40021000 	.word	0x40021000

08000fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a17      	ldr	r2, [pc, #92]	; (800102c <HAL_UART_MspInit+0x7c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d128      	bne.n	8001024 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_UART_MspInit+0x80>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4a16      	ldr	r2, [pc, #88]	; (8001030 <HAL_UART_MspInit+0x80>)
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fdc:	61d3      	str	r3, [r2, #28]
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_UART_MspInit+0x80>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_UART_MspInit+0x80>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	4a10      	ldr	r2, [pc, #64]	; (8001030 <HAL_UART_MspInit+0x80>)
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	6153      	str	r3, [r2, #20]
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_UART_MspInit+0x80>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001002:	230c      	movs	r3, #12
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001012:	2307      	movs	r3, #7
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f000 fa14 	bl	800144c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001024:	bf00      	nop
 8001026:	3728      	adds	r7, #40	; 0x28
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40004400 	.word	0x40004400
 8001030:	40021000 	.word	0x40021000

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <NMI_Handler+0x4>

0800103a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <MemManage_Handler+0x4>

08001046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler+0x4>

08001052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001080:	f000 f8ba 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001090:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <_sbrk+0x5c>)
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <_sbrk+0x60>)
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <_sbrk+0x64>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <_sbrk+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d207      	bcs.n	80010c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b8:	f002 fdca 	bl	8003c50 <__errno>
 80010bc:	4603      	mov	r3, r0
 80010be:	220c      	movs	r2, #12
 80010c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	e009      	b.n	80010dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <_sbrk+0x64>)
 80010d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20010000 	.word	0x20010000
 80010e8:	00000400 	.word	0x00000400
 80010ec:	20000110 	.word	0x20000110
 80010f0:	20000260 	.word	0x20000260

080010f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <SystemInit+0x20>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <SystemInit+0x20>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001150 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800111c:	f7ff ffea 	bl	80010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <LoopForever+0x6>)
  ldr r1, =_edata
 8001122:	490d      	ldr	r1, [pc, #52]	; (8001158 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <LoopForever+0xe>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001138:	4c0a      	ldr	r4, [pc, #40]	; (8001164 <LoopForever+0x16>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001146:	f002 fd89 	bl	8003c5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800114a:	f7ff fd9d 	bl	8000c88 <main>

0800114e <LoopForever>:

LoopForever:
    b LoopForever
 800114e:	e7fe      	b.n	800114e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001150:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800115c:	080044ec 	.word	0x080044ec
  ldr r2, =_sbss
 8001160:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001164:	20000260 	.word	0x20000260

08001168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC1_2_IRQHandler>
	...

0800116c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_Init+0x28>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_Init+0x28>)
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 f931 	bl	80013e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001182:	2000      	movs	r0, #0
 8001184:	f000 f808 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff feee 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40022000 	.word	0x40022000

08001198 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f93b 	bl	8001432 <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f000 f911 	bl	80013fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x20>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x24>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_IncTick+0x24>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008
 800121c:	20000114 	.word	0x20000114

08001220 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;  
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000114 	.word	0x20000114

08001238 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff ffee 	bl	8001220 <HAL_GetTick>
 8001244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001250:	d005      	beq.n	800125e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_Delay+0x44>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800125e:	bf00      	nop
 8001260:	f7ff ffde 	bl	8001220 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	429a      	cmp	r2, r3
 800126e:	d8f7      	bhi.n	8001260 <HAL_Delay+0x28>
  {
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008

08001280 <__NVIC_SetPriorityGrouping>:
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_GetPriorityGrouping>:
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_SetPriority>:
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	db0a      	blt.n	800130e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	490c      	ldr	r1, [pc, #48]	; (8001330 <__NVIC_SetPriority+0x4c>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	440b      	add	r3, r1
 8001308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800130c:	e00a      	b.n	8001324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4908      	ldr	r1, [pc, #32]	; (8001334 <__NVIC_SetPriority+0x50>)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	3b04      	subs	r3, #4
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	440b      	add	r3, r1
 8001322:	761a      	strb	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000e100 	.word	0xe000e100
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f1c3 0307 	rsb	r3, r3, #7
 8001352:	2b04      	cmp	r3, #4
 8001354:	bf28      	it	cs
 8001356:	2304      	movcs	r3, #4
 8001358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3304      	adds	r3, #4
 800135e:	2b06      	cmp	r3, #6
 8001360:	d902      	bls.n	8001368 <NVIC_EncodePriority+0x30>
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3b03      	subs	r3, #3
 8001366:	e000      	b.n	800136a <NVIC_EncodePriority+0x32>
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	401a      	ands	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001380:	f04f 31ff 	mov.w	r1, #4294967295
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43d9      	mvns	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	4313      	orrs	r3, r2
         );
}
 8001392:	4618      	mov	r0, r3
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b0:	d301      	bcc.n	80013b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00f      	b.n	80013d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <SysTick_Config+0x40>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013be:	210f      	movs	r1, #15
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f7ff ff8e 	bl	80012e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <SysTick_Config+0x40>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <SysTick_Config+0x40>)
 80013d0:	2207      	movs	r2, #7
 80013d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	e000e010 	.word	0xe000e010

080013e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff47 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800140c:	f7ff ff5c 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 8001410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	6978      	ldr	r0, [r7, #20]
 8001418:	f7ff ff8e 	bl	8001338 <NVIC_EncodePriority>
 800141c:	4602      	mov	r2, r0
 800141e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff5d 	bl	80012e4 <__NVIC_SetPriority>
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ffb0 	bl	80013a0 <SysTick_Config>
 8001440:	4603      	mov	r3, r0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145a:	e160      	b.n	800171e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2101      	movs	r1, #1
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	fa01 f303 	lsl.w	r3, r1, r3
 8001468:	4013      	ands	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 8152 	beq.w	8001718 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b01      	cmp	r3, #1
 800147e:	d005      	beq.n	800148c <HAL_GPIO_Init+0x40>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d130      	bne.n	80014ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c2:	2201      	movs	r2, #1
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	f003 0201 	and.w	r2, r3, #1
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d017      	beq.n	800152a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d123      	bne.n	800157e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	08da      	lsrs	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3208      	adds	r2, #8
 800153e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	691a      	ldr	r2, [r3, #16]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	08da      	lsrs	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3208      	adds	r2, #8
 8001578:	6939      	ldr	r1, [r7, #16]
 800157a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0203 	and.w	r2, r3, #3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 80ac 	beq.w	8001718 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c0:	4b5e      	ldr	r3, [pc, #376]	; (800173c <HAL_GPIO_Init+0x2f0>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a5d      	ldr	r2, [pc, #372]	; (800173c <HAL_GPIO_Init+0x2f0>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b5b      	ldr	r3, [pc, #364]	; (800173c <HAL_GPIO_Init+0x2f0>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015d8:	4a59      	ldr	r2, [pc, #356]	; (8001740 <HAL_GPIO_Init+0x2f4>)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001602:	d025      	beq.n	8001650 <HAL_GPIO_Init+0x204>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a4f      	ldr	r2, [pc, #316]	; (8001744 <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d01f      	beq.n	800164c <HAL_GPIO_Init+0x200>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a4e      	ldr	r2, [pc, #312]	; (8001748 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d019      	beq.n	8001648 <HAL_GPIO_Init+0x1fc>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a4d      	ldr	r2, [pc, #308]	; (800174c <HAL_GPIO_Init+0x300>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d013      	beq.n	8001644 <HAL_GPIO_Init+0x1f8>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a4c      	ldr	r2, [pc, #304]	; (8001750 <HAL_GPIO_Init+0x304>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d00d      	beq.n	8001640 <HAL_GPIO_Init+0x1f4>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a4b      	ldr	r2, [pc, #300]	; (8001754 <HAL_GPIO_Init+0x308>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d007      	beq.n	800163c <HAL_GPIO_Init+0x1f0>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a4a      	ldr	r2, [pc, #296]	; (8001758 <HAL_GPIO_Init+0x30c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d101      	bne.n	8001638 <HAL_GPIO_Init+0x1ec>
 8001634:	2306      	movs	r3, #6
 8001636:	e00c      	b.n	8001652 <HAL_GPIO_Init+0x206>
 8001638:	2307      	movs	r3, #7
 800163a:	e00a      	b.n	8001652 <HAL_GPIO_Init+0x206>
 800163c:	2305      	movs	r3, #5
 800163e:	e008      	b.n	8001652 <HAL_GPIO_Init+0x206>
 8001640:	2304      	movs	r3, #4
 8001642:	e006      	b.n	8001652 <HAL_GPIO_Init+0x206>
 8001644:	2303      	movs	r3, #3
 8001646:	e004      	b.n	8001652 <HAL_GPIO_Init+0x206>
 8001648:	2302      	movs	r3, #2
 800164a:	e002      	b.n	8001652 <HAL_GPIO_Init+0x206>
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <HAL_GPIO_Init+0x206>
 8001650:	2300      	movs	r3, #0
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	f002 0203 	and.w	r2, r2, #3
 8001658:	0092      	lsls	r2, r2, #2
 800165a:	4093      	lsls	r3, r2
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001662:	4937      	ldr	r1, [pc, #220]	; (8001740 <HAL_GPIO_Init+0x2f4>)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001670:	4b3a      	ldr	r3, [pc, #232]	; (800175c <HAL_GPIO_Init+0x310>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001694:	4a31      	ldr	r2, [pc, #196]	; (800175c <HAL_GPIO_Init+0x310>)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800169a:	4b30      	ldr	r3, [pc, #192]	; (800175c <HAL_GPIO_Init+0x310>)
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016be:	4a27      	ldr	r2, [pc, #156]	; (800175c <HAL_GPIO_Init+0x310>)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016c4:	4b25      	ldr	r3, [pc, #148]	; (800175c <HAL_GPIO_Init+0x310>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016e8:	4a1c      	ldr	r2, [pc, #112]	; (800175c <HAL_GPIO_Init+0x310>)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_GPIO_Init+0x310>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <HAL_GPIO_Init+0x310>)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	3301      	adds	r3, #1
 800171c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	fa22 f303 	lsr.w	r3, r2, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	f47f ae97 	bne.w	800145c <HAL_GPIO_Init+0x10>
  }
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40021000 	.word	0x40021000
 8001740:	40010000 	.word	0x40010000
 8001744:	48000400 	.word	0x48000400
 8001748:	48000800 	.word	0x48000800
 800174c:	48000c00 	.word	0x48000c00
 8001750:	48001000 	.word	0x48001000
 8001754:	48001400 	.word	0x48001400
 8001758:	48001800 	.word	0x48001800
 800175c:	40010400 	.word	0x40010400

08001760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
 800176c:	4613      	mov	r3, r2
 800176e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001770:	787b      	ldrb	r3, [r7, #1]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800177c:	e002      	b.n	8001784 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800177e:	887a      	ldrh	r2, [r7, #2]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001796:	af00      	add	r7, sp, #0
 8001798:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800179c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017a0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	f001 b83a 	b.w	800282a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 816f 	beq.w	8001aaa <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017cc:	4bb5      	ldr	r3, [pc, #724]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d00c      	beq.n	80017f2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017d8:	4bb2      	ldr	r3, [pc, #712]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d15c      	bne.n	800189e <HAL_RCC_OscConfig+0x10e>
 80017e4:	4baf      	ldr	r3, [pc, #700]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80017ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f0:	d155      	bne.n	800189e <HAL_RCC_OscConfig+0x10e>
 80017f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017f6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001806:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180a:	fab3 f383 	clz	r3, r3
 800180e:	b2db      	uxtb	r3, r3
 8001810:	095b      	lsrs	r3, r3, #5
 8001812:	b2db      	uxtb	r3, r3
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d102      	bne.n	8001824 <HAL_RCC_OscConfig+0x94>
 800181e:	4ba1      	ldr	r3, [pc, #644]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	e015      	b.n	8001850 <HAL_RCC_OscConfig+0xc0>
 8001824:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001828:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001830:	fa93 f3a3 	rbit	r3, r3
 8001834:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800183c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001840:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001844:	fa93 f3a3 	rbit	r3, r3
 8001848:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800184c:	4b95      	ldr	r3, [pc, #596]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001854:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001858:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800185c:	fa92 f2a2 	rbit	r2, r2
 8001860:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001864:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001868:	fab2 f282 	clz	r2, r2
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	f042 0220 	orr.w	r2, r2, #32
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	f002 021f 	and.w	r2, r2, #31
 8001878:	2101      	movs	r1, #1
 800187a:	fa01 f202 	lsl.w	r2, r1, r2
 800187e:	4013      	ands	r3, r2
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 8111 	beq.w	8001aa8 <HAL_RCC_OscConfig+0x318>
 8001886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f040 8108 	bne.w	8001aa8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	f000 bfc6 	b.w	800282a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800189e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ae:	d106      	bne.n	80018be <HAL_RCC_OscConfig+0x12e>
 80018b0:	4b7c      	ldr	r3, [pc, #496]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a7b      	ldr	r2, [pc, #492]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 80018b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	e036      	b.n	800192c <HAL_RCC_OscConfig+0x19c>
 80018be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x158>
 80018ce:	4b75      	ldr	r3, [pc, #468]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a74      	ldr	r2, [pc, #464]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 80018d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b72      	ldr	r3, [pc, #456]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a71      	ldr	r2, [pc, #452]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 80018e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e021      	b.n	800192c <HAL_RCC_OscConfig+0x19c>
 80018e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0x184>
 80018fa:	4b6a      	ldr	r3, [pc, #424]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a69      	ldr	r2, [pc, #420]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b67      	ldr	r3, [pc, #412]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a66      	ldr	r2, [pc, #408]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e00b      	b.n	800192c <HAL_RCC_OscConfig+0x19c>
 8001914:	4b63      	ldr	r3, [pc, #396]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a62      	ldr	r2, [pc, #392]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 800191a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b60      	ldr	r3, [pc, #384]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a5f      	ldr	r2, [pc, #380]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 8001926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800192a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800192c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001930:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d059      	beq.n	80019f0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff fc70 	bl	8001220 <HAL_GetTick>
 8001940:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001944:	e00a      	b.n	800195c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001946:	f7ff fc6b 	bl	8001220 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d902      	bls.n	800195c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	f000 bf67 	b.w	800282a <HAL_RCC_OscConfig+0x109a>
 800195c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001960:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001968:	fa93 f3a3 	rbit	r3, r3
 800196c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001970:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d102      	bne.n	800198e <HAL_RCC_OscConfig+0x1fe>
 8001988:	4b46      	ldr	r3, [pc, #280]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	e015      	b.n	80019ba <HAL_RCC_OscConfig+0x22a>
 800198e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001992:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800199a:	fa93 f3a3 	rbit	r3, r3
 800199e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80019a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019a6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80019aa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80019ae:	fa93 f3a3 	rbit	r3, r3
 80019b2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80019b6:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019be:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80019c2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80019c6:	fa92 f2a2 	rbit	r2, r2
 80019ca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80019ce:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80019d2:	fab2 f282 	clz	r2, r2
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	f042 0220 	orr.w	r2, r2, #32
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	f002 021f 	and.w	r2, r2, #31
 80019e2:	2101      	movs	r1, #1
 80019e4:	fa01 f202 	lsl.w	r2, r1, r2
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0ab      	beq.n	8001946 <HAL_RCC_OscConfig+0x1b6>
 80019ee:	e05c      	b.n	8001aaa <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fc16 	bl	8001220 <HAL_GetTick>
 80019f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f8:	e00a      	b.n	8001a10 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019fa:	f7ff fc11 	bl	8001220 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	; 0x64
 8001a08:	d902      	bls.n	8001a10 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	f000 bf0d 	b.w	800282a <HAL_RCC_OscConfig+0x109a>
 8001a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a14:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001a24:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d102      	bne.n	8001a42 <HAL_RCC_OscConfig+0x2b2>
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	e015      	b.n	8001a6e <HAL_RCC_OscConfig+0x2de>
 8001a42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a46:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001a56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a5a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a62:	fa93 f3a3 	rbit	r3, r3
 8001a66:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_RCC_OscConfig+0x314>)
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a72:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001a76:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001a7a:	fa92 f2a2 	rbit	r2, r2
 8001a7e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001a82:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a86:	fab2 f282 	clz	r2, r2
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	f042 0220 	orr.w	r2, r2, #32
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	f002 021f 	and.w	r2, r2, #31
 8001a96:	2101      	movs	r1, #1
 8001a98:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1ab      	bne.n	80019fa <HAL_RCC_OscConfig+0x26a>
 8001aa2:	e002      	b.n	8001aaa <HAL_RCC_OscConfig+0x31a>
 8001aa4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 817f 	beq.w	8001dbe <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ac0:	4ba7      	ldr	r3, [pc, #668]	; (8001d60 <HAL_RCC_OscConfig+0x5d0>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00c      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001acc:	4ba4      	ldr	r3, [pc, #656]	; (8001d60 <HAL_RCC_OscConfig+0x5d0>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d173      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x430>
 8001ad8:	4ba1      	ldr	r3, [pc, #644]	; (8001d60 <HAL_RCC_OscConfig+0x5d0>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ae4:	d16c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x430>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001af8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d102      	bne.n	8001b16 <HAL_RCC_OscConfig+0x386>
 8001b10:	4b93      	ldr	r3, [pc, #588]	; (8001d60 <HAL_RCC_OscConfig+0x5d0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	e013      	b.n	8001b3e <HAL_RCC_OscConfig+0x3ae>
 8001b16:	2302      	movs	r3, #2
 8001b18:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001b20:	fa93 f3a3 	rbit	r3, r3
 8001b24:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001b28:	2302      	movs	r3, #2
 8001b2a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b2e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001b32:	fa93 f3a3 	rbit	r3, r3
 8001b36:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b3a:	4b89      	ldr	r3, [pc, #548]	; (8001d60 <HAL_RCC_OscConfig+0x5d0>)
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	2202      	movs	r2, #2
 8001b40:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001b44:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001b48:	fa92 f2a2 	rbit	r2, r2
 8001b4c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001b50:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b54:	fab2 f282 	clz	r2, r2
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	f042 0220 	orr.w	r2, r2, #32
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	f002 021f 	and.w	r2, r2, #31
 8001b64:	2101      	movs	r1, #1
 8001b66:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00a      	beq.n	8001b86 <HAL_RCC_OscConfig+0x3f6>
 8001b70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d002      	beq.n	8001b86 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f000 be52 	b.w	800282a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b86:	4b76      	ldr	r3, [pc, #472]	; (8001d60 <HAL_RCC_OscConfig+0x5d0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	21f8      	movs	r1, #248	; 0xf8
 8001b9c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001ba4:	fa91 f1a1 	rbit	r1, r1
 8001ba8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001bac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001bb0:	fab1 f181 	clz	r1, r1
 8001bb4:	b2c9      	uxtb	r1, r1
 8001bb6:	408b      	lsls	r3, r1
 8001bb8:	4969      	ldr	r1, [pc, #420]	; (8001d60 <HAL_RCC_OscConfig+0x5d0>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bbe:	e0fe      	b.n	8001dbe <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 8088 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x552>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001be4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be8:	fab3 f383 	clz	r3, r3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bf2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fb0f 	bl	8001220 <HAL_GetTick>
 8001c02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c08:	f7ff fb0a 	bl	8001220 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d902      	bls.n	8001c1e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	f000 be06 	b.w	800282a <HAL_RCC_OscConfig+0x109a>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001c28:	fa93 f3a3 	rbit	r3, r3
 8001c2c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001c30:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d102      	bne.n	8001c4e <HAL_RCC_OscConfig+0x4be>
 8001c48:	4b45      	ldr	r3, [pc, #276]	; (8001d60 <HAL_RCC_OscConfig+0x5d0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	e013      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001c60:	2302      	movs	r3, #2
 8001c62:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c66:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c72:	4b3b      	ldr	r3, [pc, #236]	; (8001d60 <HAL_RCC_OscConfig+0x5d0>)
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	2202      	movs	r2, #2
 8001c78:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001c7c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001c80:	fa92 f2a2 	rbit	r2, r2
 8001c84:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001c88:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c8c:	fab2 f282 	clz	r2, r2
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	f042 0220 	orr.w	r2, r2, #32
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	f002 021f 	and.w	r2, r2, #31
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0af      	beq.n	8001c08 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <HAL_RCC_OscConfig+0x5d0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	21f8      	movs	r1, #248	; 0xf8
 8001cbe:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001cc6:	fa91 f1a1 	rbit	r1, r1
 8001cca:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001cce:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001cd2:	fab1 f181 	clz	r1, r1
 8001cd6:	b2c9      	uxtb	r1, r1
 8001cd8:	408b      	lsls	r3, r1
 8001cda:	4921      	ldr	r1, [pc, #132]	; (8001d60 <HAL_RCC_OscConfig+0x5d0>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]
 8001ce0:	e06d      	b.n	8001dbe <HAL_RCC_OscConfig+0x62e>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001cf4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf8:	fab3 f383 	clz	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7ff fa87 	bl	8001220 <HAL_GetTick>
 8001d12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	e00a      	b.n	8001d2e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d18:	f7ff fa82 	bl	8001220 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d902      	bls.n	8001d2e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	f000 bd7e 	b.w	800282a <HAL_RCC_OscConfig+0x109a>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001d40:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d105      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5d4>
 8001d58:	4b01      	ldr	r3, [pc, #4]	; (8001d60 <HAL_RCC_OscConfig+0x5d0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	e016      	b.n	8001d8c <HAL_RCC_OscConfig+0x5fc>
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000
 8001d64:	2302      	movs	r3, #2
 8001d66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d76:	2302      	movs	r3, #2
 8001d78:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d7c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d88:	4bbf      	ldr	r3, [pc, #764]	; (8002088 <HAL_RCC_OscConfig+0x8f8>)
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001d92:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001d96:	fa92 f2a2 	rbit	r2, r2
 8001d9a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001d9e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001da2:	fab2 f282 	clz	r2, r2
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	f042 0220 	orr.w	r2, r2, #32
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	f002 021f 	and.w	r2, r2, #31
 8001db2:	2101      	movs	r1, #1
 8001db4:	fa01 f202 	lsl.w	r2, r1, r2
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ac      	bne.n	8001d18 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8113 	beq.w	8001ffa <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d07c      	beq.n	8001ede <HAL_RCC_OscConfig+0x74e>
 8001de4:	2301      	movs	r3, #1
 8001de6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001df6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	4ba2      	ldr	r3, [pc, #648]	; (800208c <HAL_RCC_OscConfig+0x8fc>)
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	461a      	mov	r2, r3
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fa07 	bl	8001220 <HAL_GetTick>
 8001e12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e18:	f7ff fa02 	bl	8001220 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d902      	bls.n	8001e2e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	f000 bcfe 	b.w	800282a <HAL_RCC_OscConfig+0x109a>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001e38:	fa93 f2a3 	rbit	r2, r3
 8001e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e40:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e4e:	2202      	movs	r2, #2
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	fa93 f2a3 	rbit	r2, r3
 8001e60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e72:	2202      	movs	r2, #2
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	fa93 f2a3 	rbit	r2, r3
 8001e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8e:	4b7e      	ldr	r3, [pc, #504]	; (8002088 <HAL_RCC_OscConfig+0x8f8>)
 8001e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e96:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	6019      	str	r1, [r3, #0]
 8001e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	fa93 f1a3 	rbit	r1, r3
 8001eac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001eb4:	6019      	str	r1, [r3, #0]
  return result;
 8001eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d09d      	beq.n	8001e18 <HAL_RCC_OscConfig+0x688>
 8001edc:	e08d      	b.n	8001ffa <HAL_RCC_OscConfig+0x86a>
 8001ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	fa93 f2a3 	rbit	r2, r3
 8001ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f00:	601a      	str	r2, [r3, #0]
  return result;
 8001f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f06:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f0a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0c:	fab3 f383 	clz	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b5d      	ldr	r3, [pc, #372]	; (800208c <HAL_RCC_OscConfig+0x8fc>)
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f20:	f7ff f97e 	bl	8001220 <HAL_GetTick>
 8001f24:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f2a:	f7ff f979 	bl	8001220 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d902      	bls.n	8001f40 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	f000 bc75 	b.w	800282a <HAL_RCC_OscConfig+0x109a>
 8001f40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f44:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f48:	2202      	movs	r2, #2
 8001f4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f50:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	fa93 f2a3 	rbit	r2, r3
 8001f5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	fa93 f2a3 	rbit	r2, r3
 8001f7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f8c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f90:	2202      	movs	r2, #2
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f98:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	fa93 f2a3 	rbit	r2, r3
 8001fa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001faa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fac:	4b36      	ldr	r3, [pc, #216]	; (8002088 <HAL_RCC_OscConfig+0x8f8>)
 8001fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001fb8:	2102      	movs	r1, #2
 8001fba:	6019      	str	r1, [r3, #0]
 8001fbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f1a3 	rbit	r1, r3
 8001fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fce:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001fd2:	6019      	str	r1, [r3, #0]
  return result;
 8001fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	2101      	movs	r1, #1
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d197      	bne.n	8001f2a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ffa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ffe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 81a5 	beq.w	800235a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002010:	2300      	movs	r3, #0
 8002012:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002016:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <HAL_RCC_OscConfig+0x8f8>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d116      	bne.n	8002050 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_RCC_OscConfig+0x8f8>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	4a18      	ldr	r2, [pc, #96]	; (8002088 <HAL_RCC_OscConfig+0x8f8>)
 8002028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202c:	61d3      	str	r3, [r2, #28]
 800202e:	4b16      	ldr	r3, [pc, #88]	; (8002088 <HAL_RCC_OscConfig+0x8f8>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002044:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002048:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800204a:	2301      	movs	r3, #1
 800204c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_RCC_OscConfig+0x900>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002058:	2b00      	cmp	r3, #0
 800205a:	d121      	bne.n	80020a0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_RCC_OscConfig+0x900>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <HAL_RCC_OscConfig+0x900>)
 8002062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002066:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002068:	f7ff f8da 	bl	8001220 <HAL_GetTick>
 800206c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	e010      	b.n	8002094 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002072:	f7ff f8d5 	bl	8001220 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	; 0x64
 8002080:	d908      	bls.n	8002094 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e3d1      	b.n	800282a <HAL_RCC_OscConfig+0x109a>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	10908120 	.word	0x10908120
 8002090:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	4b8d      	ldr	r3, [pc, #564]	; (80022cc <HAL_RCC_OscConfig+0xb3c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0e8      	beq.n	8002072 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d106      	bne.n	80020be <HAL_RCC_OscConfig+0x92e>
 80020b0:	4b87      	ldr	r3, [pc, #540]	; (80022d0 <HAL_RCC_OscConfig+0xb40>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4a86      	ldr	r2, [pc, #536]	; (80022d0 <HAL_RCC_OscConfig+0xb40>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6213      	str	r3, [r2, #32]
 80020bc:	e035      	b.n	800212a <HAL_RCC_OscConfig+0x99a>
 80020be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x958>
 80020ce:	4b80      	ldr	r3, [pc, #512]	; (80022d0 <HAL_RCC_OscConfig+0xb40>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4a7f      	ldr	r2, [pc, #508]	; (80022d0 <HAL_RCC_OscConfig+0xb40>)
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	6213      	str	r3, [r2, #32]
 80020da:	4b7d      	ldr	r3, [pc, #500]	; (80022d0 <HAL_RCC_OscConfig+0xb40>)
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4a7c      	ldr	r2, [pc, #496]	; (80022d0 <HAL_RCC_OscConfig+0xb40>)
 80020e0:	f023 0304 	bic.w	r3, r3, #4
 80020e4:	6213      	str	r3, [r2, #32]
 80020e6:	e020      	b.n	800212a <HAL_RCC_OscConfig+0x99a>
 80020e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b05      	cmp	r3, #5
 80020f6:	d10c      	bne.n	8002112 <HAL_RCC_OscConfig+0x982>
 80020f8:	4b75      	ldr	r3, [pc, #468]	; (80022d0 <HAL_RCC_OscConfig+0xb40>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a74      	ldr	r2, [pc, #464]	; (80022d0 <HAL_RCC_OscConfig+0xb40>)
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	4b72      	ldr	r3, [pc, #456]	; (80022d0 <HAL_RCC_OscConfig+0xb40>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4a71      	ldr	r2, [pc, #452]	; (80022d0 <HAL_RCC_OscConfig+0xb40>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6213      	str	r3, [r2, #32]
 8002110:	e00b      	b.n	800212a <HAL_RCC_OscConfig+0x99a>
 8002112:	4b6f      	ldr	r3, [pc, #444]	; (80022d0 <HAL_RCC_OscConfig+0xb40>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a6e      	ldr	r2, [pc, #440]	; (80022d0 <HAL_RCC_OscConfig+0xb40>)
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	6213      	str	r3, [r2, #32]
 800211e:	4b6c      	ldr	r3, [pc, #432]	; (80022d0 <HAL_RCC_OscConfig+0xb40>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a6b      	ldr	r2, [pc, #428]	; (80022d0 <HAL_RCC_OscConfig+0xb40>)
 8002124:	f023 0304 	bic.w	r3, r3, #4
 8002128:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800212a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8081 	beq.w	800223e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213c:	f7ff f870 	bl	8001220 <HAL_GetTick>
 8002140:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	e00b      	b.n	800215e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7ff f86b 	bl	8001220 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	; 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e365      	b.n	800282a <HAL_RCC_OscConfig+0x109a>
 800215e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002162:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002166:	2202      	movs	r2, #2
 8002168:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800216e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	fa93 f2a3 	rbit	r2, r3
 8002178:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002186:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800218a:	2202      	movs	r2, #2
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002192:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	fa93 f2a3 	rbit	r2, r3
 800219c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80021a4:	601a      	str	r2, [r3, #0]
  return result;
 80021a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021aa:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80021ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b0:	fab3 f383 	clz	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	f043 0302 	orr.w	r3, r3, #2
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d102      	bne.n	80021ca <HAL_RCC_OscConfig+0xa3a>
 80021c4:	4b42      	ldr	r3, [pc, #264]	; (80022d0 <HAL_RCC_OscConfig+0xb40>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	e013      	b.n	80021f2 <HAL_RCC_OscConfig+0xa62>
 80021ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80021d2:	2202      	movs	r2, #2
 80021d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021da:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	fa93 f2a3 	rbit	r2, r3
 80021e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <HAL_RCC_OscConfig+0xb40>)
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021f6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021fa:	2102      	movs	r1, #2
 80021fc:	6011      	str	r1, [r2, #0]
 80021fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002202:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	fa92 f1a2 	rbit	r1, r2
 800220c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002210:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002214:	6011      	str	r1, [r2, #0]
  return result;
 8002216:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800221a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	fab2 f282 	clz	r2, r2
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	f002 021f 	and.w	r2, r2, #31
 8002230:	2101      	movs	r1, #1
 8002232:	fa01 f202 	lsl.w	r2, r1, r2
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d084      	beq.n	8002146 <HAL_RCC_OscConfig+0x9b6>
 800223c:	e083      	b.n	8002346 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223e:	f7fe ffef 	bl	8001220 <HAL_GetTick>
 8002242:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002246:	e00b      	b.n	8002260 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002248:	f7fe ffea 	bl	8001220 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f241 3288 	movw	r2, #5000	; 0x1388
 8002258:	4293      	cmp	r3, r2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e2e4      	b.n	800282a <HAL_RCC_OscConfig+0x109a>
 8002260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002264:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002268:	2202      	movs	r2, #2
 800226a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002270:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	fa93 f2a3 	rbit	r2, r3
 800227a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800227e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002288:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800228c:	2202      	movs	r2, #2
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002294:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	fa93 f2a3 	rbit	r2, r3
 800229e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80022a6:	601a      	str	r2, [r3, #0]
  return result;
 80022a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ac:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80022b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d106      	bne.n	80022d4 <HAL_RCC_OscConfig+0xb44>
 80022c6:	4b02      	ldr	r3, [pc, #8]	; (80022d0 <HAL_RCC_OscConfig+0xb40>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	e017      	b.n	80022fc <HAL_RCC_OscConfig+0xb6c>
 80022cc:	40007000 	.word	0x40007000
 80022d0:	40021000 	.word	0x40021000
 80022d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80022dc:	2202      	movs	r2, #2
 80022de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	fa93 f2a3 	rbit	r2, r3
 80022ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	4bb3      	ldr	r3, [pc, #716]	; (80025c8 <HAL_RCC_OscConfig+0xe38>)
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002300:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002304:	2102      	movs	r1, #2
 8002306:	6011      	str	r1, [r2, #0]
 8002308:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800230c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	fa92 f1a2 	rbit	r1, r2
 8002316:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800231a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800231e:	6011      	str	r1, [r2, #0]
  return result;
 8002320:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002324:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	fab2 f282 	clz	r2, r2
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	f002 021f 	and.w	r2, r2, #31
 800233a:	2101      	movs	r1, #1
 800233c:	fa01 f202 	lsl.w	r2, r1, r2
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d180      	bne.n	8002248 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002346:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800234a:	2b01      	cmp	r3, #1
 800234c:	d105      	bne.n	800235a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234e:	4b9e      	ldr	r3, [pc, #632]	; (80025c8 <HAL_RCC_OscConfig+0xe38>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4a9d      	ldr	r2, [pc, #628]	; (80025c8 <HAL_RCC_OscConfig+0xe38>)
 8002354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002358:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800235a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800235e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 825e 	beq.w	8002828 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236c:	4b96      	ldr	r3, [pc, #600]	; (80025c8 <HAL_RCC_OscConfig+0xe38>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b08      	cmp	r3, #8
 8002376:	f000 821f 	beq.w	80027b8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800237a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800237e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b02      	cmp	r3, #2
 8002388:	f040 8170 	bne.w	800266c <HAL_RCC_OscConfig+0xedc>
 800238c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002390:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002394:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800239e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	fa93 f2a3 	rbit	r2, r3
 80023a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80023b0:	601a      	str	r2, [r3, #0]
  return result;
 80023b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80023ba:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	461a      	mov	r2, r3
 80023ce:	2300      	movs	r3, #0
 80023d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d2:	f7fe ff25 	bl	8001220 <HAL_GetTick>
 80023d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023da:	e009      	b.n	80023f0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023dc:	f7fe ff20 	bl	8001220 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e21c      	b.n	800282a <HAL_RCC_OscConfig+0x109a>
 80023f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002402:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	fa93 f2a3 	rbit	r2, r3
 800240c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002410:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002414:	601a      	str	r2, [r3, #0]
  return result;
 8002416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800241e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002420:	fab3 f383 	clz	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d102      	bne.n	800243a <HAL_RCC_OscConfig+0xcaa>
 8002434:	4b64      	ldr	r3, [pc, #400]	; (80025c8 <HAL_RCC_OscConfig+0xe38>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	e027      	b.n	800248a <HAL_RCC_OscConfig+0xcfa>
 800243a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800243e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002442:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800244c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	fa93 f2a3 	rbit	r2, r3
 8002456:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800245a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002464:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002468:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002472:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	fa93 f2a3 	rbit	r2, r3
 800247c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002480:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	4b50      	ldr	r3, [pc, #320]	; (80025c8 <HAL_RCC_OscConfig+0xe38>)
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800248e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002492:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002496:	6011      	str	r1, [r2, #0]
 8002498:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800249c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	fa92 f1a2 	rbit	r1, r2
 80024a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024aa:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80024ae:	6011      	str	r1, [r2, #0]
  return result;
 80024b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024b4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	fab2 f282 	clz	r2, r2
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	f042 0220 	orr.w	r2, r2, #32
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	f002 021f 	and.w	r2, r2, #31
 80024ca:	2101      	movs	r1, #1
 80024cc:	fa01 f202 	lsl.w	r2, r1, r2
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d182      	bne.n	80023dc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d6:	4b3c      	ldr	r3, [pc, #240]	; (80025c8 <HAL_RCC_OscConfig+0xe38>)
 80024d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024da:	f023 020f 	bic.w	r2, r3, #15
 80024de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	4937      	ldr	r1, [pc, #220]	; (80025c8 <HAL_RCC_OscConfig+0xe38>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 80024f0:	4b35      	ldr	r3, [pc, #212]	; (80025c8 <HAL_RCC_OscConfig+0xe38>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80024f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6a19      	ldr	r1, [r3, #32]
 8002504:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002508:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	430b      	orrs	r3, r1
 8002512:	492d      	ldr	r1, [pc, #180]	; (80025c8 <HAL_RCC_OscConfig+0xe38>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
 8002518:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800251c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002520:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002524:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800252a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	fa93 f2a3 	rbit	r2, r3
 8002534:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002538:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800253c:	601a      	str	r2, [r3, #0]
  return result;
 800253e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002542:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002546:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002552:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	461a      	mov	r2, r3
 800255a:	2301      	movs	r3, #1
 800255c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7fe fe5f 	bl	8001220 <HAL_GetTick>
 8002562:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002566:	e009      	b.n	800257c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002568:	f7fe fe5a 	bl	8001220 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e156      	b.n	800282a <HAL_RCC_OscConfig+0x109a>
 800257c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002580:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002584:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800258e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	fa93 f2a3 	rbit	r2, r3
 8002598:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800259c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80025a0:	601a      	str	r2, [r3, #0]
  return result;
 80025a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80025aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d105      	bne.n	80025cc <HAL_RCC_OscConfig+0xe3c>
 80025c0:	4b01      	ldr	r3, [pc, #4]	; (80025c8 <HAL_RCC_OscConfig+0xe38>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	e02a      	b.n	800261c <HAL_RCC_OscConfig+0xe8c>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80025d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025de:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	fa93 f2a3 	rbit	r2, r3
 80025e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80025fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002604:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	fa93 f2a3 	rbit	r2, r3
 800260e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002612:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	4b86      	ldr	r3, [pc, #536]	; (8002834 <HAL_RCC_OscConfig+0x10a4>)
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002620:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002624:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002628:	6011      	str	r1, [r2, #0]
 800262a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800262e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	fa92 f1a2 	rbit	r1, r2
 8002638:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800263c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002640:	6011      	str	r1, [r2, #0]
  return result;
 8002642:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002646:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	fab2 f282 	clz	r2, r2
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	f042 0220 	orr.w	r2, r2, #32
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	f002 021f 	and.w	r2, r2, #31
 800265c:	2101      	movs	r1, #1
 800265e:	fa01 f202 	lsl.w	r2, r1, r2
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	f43f af7f 	beq.w	8002568 <HAL_RCC_OscConfig+0xdd8>
 800266a:	e0dd      	b.n	8002828 <HAL_RCC_OscConfig+0x1098>
 800266c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002670:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002674:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800267e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	fa93 f2a3 	rbit	r2, r3
 8002688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002690:	601a      	str	r2, [r3, #0]
  return result;
 8002692:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002696:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800269a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	461a      	mov	r2, r3
 80026ae:	2300      	movs	r3, #0
 80026b0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7fe fdb5 	bl	8001220 <HAL_GetTick>
 80026b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ba:	e009      	b.n	80026d0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026bc:	f7fe fdb0 	bl	8001220 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e0ac      	b.n	800282a <HAL_RCC_OscConfig+0x109a>
 80026d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	fa93 f2a3 	rbit	r2, r3
 80026ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026f4:	601a      	str	r2, [r3, #0]
  return result;
 80026f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	d102      	bne.n	800271a <HAL_RCC_OscConfig+0xf8a>
 8002714:	4b47      	ldr	r3, [pc, #284]	; (8002834 <HAL_RCC_OscConfig+0x10a4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	e027      	b.n	800276a <HAL_RCC_OscConfig+0xfda>
 800271a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800271e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002722:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800272c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	fa93 f2a3 	rbit	r2, r3
 8002736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800273a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002744:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002748:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002752:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	fa93 f2a3 	rbit	r2, r3
 800275c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002760:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	4b33      	ldr	r3, [pc, #204]	; (8002834 <HAL_RCC_OscConfig+0x10a4>)
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800276e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002772:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002776:	6011      	str	r1, [r2, #0]
 8002778:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800277c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	fa92 f1a2 	rbit	r1, r2
 8002786:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800278a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800278e:	6011      	str	r1, [r2, #0]
  return result;
 8002790:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002794:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	fab2 f282 	clz	r2, r2
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	f042 0220 	orr.w	r2, r2, #32
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	f002 021f 	and.w	r2, r2, #31
 80027aa:	2101      	movs	r1, #1
 80027ac:	fa01 f202 	lsl.w	r2, r1, r2
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d182      	bne.n	80026bc <HAL_RCC_OscConfig+0xf2c>
 80027b6:	e037      	b.n	8002828 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e02e      	b.n	800282a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027cc:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_RCC_OscConfig+0x10a4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80027d4:	4b17      	ldr	r3, [pc, #92]	; (8002834 <HAL_RCC_OscConfig+0x10a4>)
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80027e0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80027e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d117      	bne.n	8002824 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80027f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80027f8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002800:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002808:	429a      	cmp	r2, r3
 800280a:	d10b      	bne.n	8002824 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800280c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002810:	f003 020f 	and.w	r2, r3, #15
 8002814:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002818:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000

08002838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b09e      	sub	sp, #120	; 0x78
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e162      	b.n	8002b16 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002850:	4b90      	ldr	r3, [pc, #576]	; (8002a94 <HAL_RCC_ClockConfig+0x25c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d910      	bls.n	8002880 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b8d      	ldr	r3, [pc, #564]	; (8002a94 <HAL_RCC_ClockConfig+0x25c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 0207 	bic.w	r2, r3, #7
 8002866:	498b      	ldr	r1, [pc, #556]	; (8002a94 <HAL_RCC_ClockConfig+0x25c>)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	4b89      	ldr	r3, [pc, #548]	; (8002a94 <HAL_RCC_ClockConfig+0x25c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e14a      	b.n	8002b16 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800288c:	4b82      	ldr	r3, [pc, #520]	; (8002a98 <HAL_RCC_ClockConfig+0x260>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	497f      	ldr	r1, [pc, #508]	; (8002a98 <HAL_RCC_ClockConfig+0x260>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 80dc 	beq.w	8002a64 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d13c      	bne.n	800292e <HAL_RCC_ClockConfig+0xf6>
 80028b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80028c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d102      	bne.n	80028de <HAL_RCC_ClockConfig+0xa6>
 80028d8:	4b6f      	ldr	r3, [pc, #444]	; (8002a98 <HAL_RCC_ClockConfig+0x260>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	e00f      	b.n	80028fe <HAL_RCC_ClockConfig+0xc6>
 80028de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	667b      	str	r3, [r7, #100]	; 0x64
 80028ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028f0:	663b      	str	r3, [r7, #96]	; 0x60
 80028f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028fa:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <HAL_RCC_ClockConfig+0x260>)
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002902:	65ba      	str	r2, [r7, #88]	; 0x58
 8002904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002906:	fa92 f2a2 	rbit	r2, r2
 800290a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800290c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800290e:	fab2 f282 	clz	r2, r2
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	f042 0220 	orr.w	r2, r2, #32
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	f002 021f 	and.w	r2, r2, #31
 800291e:	2101      	movs	r1, #1
 8002920:	fa01 f202 	lsl.w	r2, r1, r2
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d17b      	bne.n	8002a22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0f3      	b.n	8002b16 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d13c      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x178>
 8002936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800293a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b01      	cmp	r3, #1
 8002958:	d102      	bne.n	8002960 <HAL_RCC_ClockConfig+0x128>
 800295a:	4b4f      	ldr	r3, [pc, #316]	; (8002a98 <HAL_RCC_ClockConfig+0x260>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	e00f      	b.n	8002980 <HAL_RCC_ClockConfig+0x148>
 8002960:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002964:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	647b      	str	r3, [r7, #68]	; 0x44
 800296e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002972:	643b      	str	r3, [r7, #64]	; 0x40
 8002974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800297c:	4b46      	ldr	r3, [pc, #280]	; (8002a98 <HAL_RCC_ClockConfig+0x260>)
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002984:	63ba      	str	r2, [r7, #56]	; 0x38
 8002986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002988:	fa92 f2a2 	rbit	r2, r2
 800298c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800298e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002990:	fab2 f282 	clz	r2, r2
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	f042 0220 	orr.w	r2, r2, #32
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	f002 021f 	and.w	r2, r2, #31
 80029a0:	2101      	movs	r1, #1
 80029a2:	fa01 f202 	lsl.w	r2, r1, r2
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d13a      	bne.n	8002a22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0b2      	b.n	8002b16 <HAL_RCC_ClockConfig+0x2de>
 80029b0:	2302      	movs	r3, #2
 80029b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d102      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x1a0>
 80029d2:	4b31      	ldr	r3, [pc, #196]	; (8002a98 <HAL_RCC_ClockConfig+0x260>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	e00d      	b.n	80029f4 <HAL_RCC_ClockConfig+0x1bc>
 80029d8:	2302      	movs	r3, #2
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
 80029e4:	2302      	movs	r3, #2
 80029e6:	623b      	str	r3, [r7, #32]
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <HAL_RCC_ClockConfig+0x260>)
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	2202      	movs	r2, #2
 80029f6:	61ba      	str	r2, [r7, #24]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	fa92 f2a2 	rbit	r2, r2
 80029fe:	617a      	str	r2, [r7, #20]
  return result;
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	fab2 f282 	clz	r2, r2
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	f042 0220 	orr.w	r2, r2, #32
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	f002 021f 	and.w	r2, r2, #31
 8002a12:	2101      	movs	r1, #1
 8002a14:	fa01 f202 	lsl.w	r2, r1, r2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e079      	b.n	8002b16 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a22:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <HAL_RCC_ClockConfig+0x260>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f023 0203 	bic.w	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	491a      	ldr	r1, [pc, #104]	; (8002a98 <HAL_RCC_ClockConfig+0x260>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a34:	f7fe fbf4 	bl	8001220 <HAL_GetTick>
 8002a38:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3c:	f7fe fbf0 	bl	8001220 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e061      	b.n	8002b16 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_RCC_ClockConfig+0x260>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 020c 	and.w	r2, r3, #12
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d1eb      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_RCC_ClockConfig+0x25c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d214      	bcs.n	8002a9c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <HAL_RCC_ClockConfig+0x25c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 0207 	bic.w	r2, r3, #7
 8002a7a:	4906      	ldr	r1, [pc, #24]	; (8002a94 <HAL_RCC_ClockConfig+0x25c>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <HAL_RCC_ClockConfig+0x25c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e040      	b.n	8002b16 <HAL_RCC_ClockConfig+0x2de>
 8002a94:	40022000 	.word	0x40022000
 8002a98:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_RCC_ClockConfig+0x2e8>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	491a      	ldr	r1, [pc, #104]	; (8002b20 <HAL_RCC_ClockConfig+0x2e8>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ac6:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <HAL_RCC_ClockConfig+0x2e8>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4912      	ldr	r1, [pc, #72]	; (8002b20 <HAL_RCC_ClockConfig+0x2e8>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ada:	f000 f829 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 8002ade:	4601      	mov	r1, r0
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <HAL_RCC_ClockConfig+0x2e8>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae8:	22f0      	movs	r2, #240	; 0xf0
 8002aea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	fa92 f2a2 	rbit	r2, r2
 8002af2:	60fa      	str	r2, [r7, #12]
  return result;
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	fab2 f282 	clz	r2, r2
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	40d3      	lsrs	r3, r2
 8002afe:	4a09      	ldr	r2, [pc, #36]	; (8002b24 <HAL_RCC_ClockConfig+0x2ec>)
 8002b00:	5cd3      	ldrb	r3, [r2, r3]
 8002b02:	fa21 f303 	lsr.w	r3, r1, r3
 8002b06:	4a08      	ldr	r2, [pc, #32]	; (8002b28 <HAL_RCC_ClockConfig+0x2f0>)
 8002b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <HAL_RCC_ClockConfig+0x2f4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe fb42 	bl	8001198 <HAL_InitTick>
  
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3778      	adds	r7, #120	; 0x78
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	08004478 	.word	0x08004478
 8002b28:	20000000 	.word	0x20000000
 8002b2c:	20000004 	.word	0x20000004

08002b30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002b4a:	4b1f      	ldr	r3, [pc, #124]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d002      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x30>
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d003      	beq.n	8002b66 <HAL_RCC_GetSysClockFreq+0x36>
 8002b5e:	e029      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b60:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b62:	613b      	str	r3, [r7, #16]
      break;
 8002b64:	e029      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	0c9b      	lsrs	r3, r3, #18
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b70:	5cd3      	ldrb	r3, [r2, r3]
 8002b72:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002b74:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	4a15      	ldr	r2, [pc, #84]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b8c:	4a0f      	ldr	r2, [pc, #60]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	e007      	b.n	8002bae <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b9e:	4a0b      	ldr	r2, [pc, #44]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	fb02 f303 	mul.w	r3, r2, r3
 8002bac:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	613b      	str	r3, [r7, #16]
      break;
 8002bb2:	e002      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bb6:	613b      	str	r3, [r7, #16]
      break;
 8002bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bba:	693b      	ldr	r3, [r7, #16]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	371c      	adds	r7, #28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	007a1200 	.word	0x007a1200
 8002bd0:	08004490 	.word	0x08004490
 8002bd4:	080044a0 	.word	0x080044a0

08002bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_RCC_GetHCLKFreq+0x14>)
 8002bde:	681b      	ldr	r3, [r3, #0]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000000 	.word	0x20000000

08002bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002bf6:	f7ff ffef 	bl	8002bd8 <HAL_RCC_GetHCLKFreq>
 8002bfa:	4601      	mov	r1, r0
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c04:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c08:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	fa92 f2a2 	rbit	r2, r2
 8002c10:	603a      	str	r2, [r7, #0]
  return result;
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	fab2 f282 	clz	r2, r2
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	40d3      	lsrs	r3, r2
 8002c1c:	4a04      	ldr	r2, [pc, #16]	; (8002c30 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c1e:	5cd3      	ldrb	r3, [r2, r3]
 8002c20:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	08004488 	.word	0x08004488

08002c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002c3a:	f7ff ffcd 	bl	8002bd8 <HAL_RCC_GetHCLKFreq>
 8002c3e:	4601      	mov	r1, r0
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002c48:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	fa92 f2a2 	rbit	r2, r2
 8002c54:	603a      	str	r2, [r7, #0]
  return result;
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	fab2 f282 	clz	r2, r2
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	40d3      	lsrs	r3, r2
 8002c60:	4a04      	ldr	r2, [pc, #16]	; (8002c74 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c62:	5cd3      	ldrb	r3, [r2, r3]
 8002c64:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40021000 	.word	0x40021000
 8002c74:	08004488 	.word	0x08004488

08002c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b092      	sub	sp, #72	; 0x48
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 80d4 	beq.w	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9c:	4b4e      	ldr	r3, [pc, #312]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10e      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca8:	4b4b      	ldr	r3, [pc, #300]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	4a4a      	ldr	r2, [pc, #296]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	61d3      	str	r3, [r2, #28]
 8002cb4:	4b48      	ldr	r3, [pc, #288]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	4b45      	ldr	r3, [pc, #276]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d118      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd2:	4b42      	ldr	r3, [pc, #264]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a41      	ldr	r2, [pc, #260]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cdc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cde:	f7fe fa9f 	bl	8001220 <HAL_GetTick>
 8002ce2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce6:	f7fe fa9b 	bl	8001220 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b64      	cmp	r3, #100	; 0x64
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e1d6      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf8:	4b38      	ldr	r3, [pc, #224]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d04:	4b34      	ldr	r3, [pc, #208]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 8084 	beq.w	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d07c      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d24:	4b2c      	ldr	r3, [pc, #176]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2301      	movs	r3, #1
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	461a      	mov	r2, r3
 8002d72:	2300      	movs	r3, #0
 8002d74:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d76:	4a18      	ldr	r2, [pc, #96]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d7a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d04b      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7fe fa4b 	bl	8001220 <HAL_GetTick>
 8002d8a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fe fa47 	bl	8001220 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e180      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002da4:	2302      	movs	r3, #2
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
 8002db0:	2302      	movs	r3, #2
 8002db2:	623b      	str	r3, [r7, #32]
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	61fb      	str	r3, [r7, #28]
  return result;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f043 0302 	orr.w	r3, r3, #2
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d108      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002dd2:	4b01      	ldr	r3, [pc, #4]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	e00d      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40007000 	.word	0x40007000
 8002de0:	10908100 	.word	0x10908100
 8002de4:	2302      	movs	r3, #2
 8002de6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	4b9a      	ldr	r3, [pc, #616]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	2202      	movs	r2, #2
 8002df6:	613a      	str	r2, [r7, #16]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	fa92 f2a2 	rbit	r2, r2
 8002dfe:	60fa      	str	r2, [r7, #12]
  return result;
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	fab2 f282 	clz	r2, r2
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	f002 021f 	and.w	r2, r2, #31
 8002e12:	2101      	movs	r1, #1
 8002e14:	fa01 f202 	lsl.w	r2, r1, r2
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0b7      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e1e:	4b8f      	ldr	r3, [pc, #572]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	498c      	ldr	r1, [pc, #560]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d105      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e38:	4b88      	ldr	r3, [pc, #544]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	4a87      	ldr	r2, [pc, #540]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e50:	4b82      	ldr	r3, [pc, #520]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	f023 0203 	bic.w	r2, r3, #3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	497f      	ldr	r1, [pc, #508]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e6e:	4b7b      	ldr	r3, [pc, #492]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	4978      	ldr	r1, [pc, #480]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e8c:	4b73      	ldr	r3, [pc, #460]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	4970      	ldr	r1, [pc, #448]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eaa:	4b6c      	ldr	r3, [pc, #432]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f023 0210 	bic.w	r2, r3, #16
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	4969      	ldr	r1, [pc, #420]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ec8:	4b64      	ldr	r3, [pc, #400]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed4:	4961      	ldr	r1, [pc, #388]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d008      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ee6:	4b5d      	ldr	r3, [pc, #372]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f023 0220 	bic.w	r2, r3, #32
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	495a      	ldr	r1, [pc, #360]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f04:	4b55      	ldr	r3, [pc, #340]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	4952      	ldr	r1, [pc, #328]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f22:	4b4e      	ldr	r3, [pc, #312]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	494b      	ldr	r1, [pc, #300]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f40:	4b46      	ldr	r3, [pc, #280]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	4943      	ldr	r1, [pc, #268]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f5e:	4b3f      	ldr	r3, [pc, #252]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	493c      	ldr	r1, [pc, #240]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f7c:	4b37      	ldr	r3, [pc, #220]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	4934      	ldr	r1, [pc, #208]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f9a:	4b30      	ldr	r3, [pc, #192]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	492d      	ldr	r1, [pc, #180]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fb8:	4b28      	ldr	r3, [pc, #160]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc4:	4925      	ldr	r1, [pc, #148]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002fd6:	4b21      	ldr	r3, [pc, #132]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	491e      	ldr	r1, [pc, #120]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002ff4:	4b19      	ldr	r3, [pc, #100]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	4916      	ldr	r1, [pc, #88]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003012:	4b12      	ldr	r3, [pc, #72]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301e:	490f      	ldr	r1, [pc, #60]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003020:	4313      	orrs	r3, r2
 8003022:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003030:	4b0a      	ldr	r3, [pc, #40]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303c:	4907      	ldr	r1, [pc, #28]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00c      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800304e:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	e002      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800305a:	bf00      	nop
 800305c:	40021000 	.word	0x40021000
 8003060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003062:	4913      	ldr	r1, [pc, #76]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003064:	4313      	orrs	r3, r2
 8003066:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003074:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003080:	490b      	ldr	r1, [pc, #44]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003082:	4313      	orrs	r3, r2
 8003084:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d008      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003092:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800309e:	4904      	ldr	r1, [pc, #16]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3748      	adds	r7, #72	; 0x48
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000

080030b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e040      	b.n	8003148 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fd ff6a 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2224      	movs	r2, #36	; 0x24
 80030e0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fa86 	bl	800360c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f8af 	bl	8003264 <UART_SetConfig>
 8003106:	4603      	mov	r3, r0
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e01b      	b.n	8003148 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800311e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800312e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fb05 	bl	8003750 <UART_CheckIdleState>
 8003146:	4603      	mov	r3, r0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af02      	add	r7, sp, #8
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003164:	2b20      	cmp	r3, #32
 8003166:	d178      	bne.n	800325a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_UART_Transmit+0x24>
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e071      	b.n	800325c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2221      	movs	r2, #33	; 0x21
 8003184:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003186:	f7fe f84b 	bl	8001220 <HAL_GetTick>
 800318a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	88fa      	ldrh	r2, [r7, #6]
 8003190:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	88fa      	ldrh	r2, [r7, #6]
 8003198:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a4:	d108      	bne.n	80031b8 <HAL_UART_Transmit+0x68>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d104      	bne.n	80031b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	e003      	b.n	80031c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031c0:	e030      	b.n	8003224 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2200      	movs	r2, #0
 80031ca:	2180      	movs	r1, #128	; 0x80
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 fb67 	bl	80038a0 <UART_WaitOnFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d004      	beq.n	80031e2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e03c      	b.n	800325c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10b      	bne.n	8003200 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	881a      	ldrh	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031f4:	b292      	uxth	r2, r2
 80031f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	3302      	adds	r3, #2
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	e008      	b.n	8003212 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	781a      	ldrb	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	b292      	uxth	r2, r2
 800320a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	3301      	adds	r3, #1
 8003210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1c8      	bne.n	80031c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2200      	movs	r2, #0
 8003238:	2140      	movs	r1, #64	; 0x40
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fb30 	bl	80038a0 <UART_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d004      	beq.n	8003250 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e005      	b.n	800325c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	e000      	b.n	800325c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800325a:	2302      	movs	r3, #2
  }
}
 800325c:	4618      	mov	r0, r3
 800325e:	3720      	adds	r7, #32
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4b92      	ldr	r3, [pc, #584]	; (80034d8 <UART_SetConfig+0x274>)
 8003290:	4013      	ands	r3, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	6979      	ldr	r1, [r7, #20]
 8003298:	430b      	orrs	r3, r1
 800329a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a80      	ldr	r2, [pc, #512]	; (80034dc <UART_SetConfig+0x278>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d120      	bne.n	8003322 <UART_SetConfig+0xbe>
 80032e0:	4b7f      	ldr	r3, [pc, #508]	; (80034e0 <UART_SetConfig+0x27c>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d817      	bhi.n	800331c <UART_SetConfig+0xb8>
 80032ec:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <UART_SetConfig+0x90>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003305 	.word	0x08003305
 80032f8:	08003311 	.word	0x08003311
 80032fc:	08003317 	.word	0x08003317
 8003300:	0800330b 	.word	0x0800330b
 8003304:	2301      	movs	r3, #1
 8003306:	77fb      	strb	r3, [r7, #31]
 8003308:	e0b5      	b.n	8003476 <UART_SetConfig+0x212>
 800330a:	2302      	movs	r3, #2
 800330c:	77fb      	strb	r3, [r7, #31]
 800330e:	e0b2      	b.n	8003476 <UART_SetConfig+0x212>
 8003310:	2304      	movs	r3, #4
 8003312:	77fb      	strb	r3, [r7, #31]
 8003314:	e0af      	b.n	8003476 <UART_SetConfig+0x212>
 8003316:	2308      	movs	r3, #8
 8003318:	77fb      	strb	r3, [r7, #31]
 800331a:	e0ac      	b.n	8003476 <UART_SetConfig+0x212>
 800331c:	2310      	movs	r3, #16
 800331e:	77fb      	strb	r3, [r7, #31]
 8003320:	e0a9      	b.n	8003476 <UART_SetConfig+0x212>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a6f      	ldr	r2, [pc, #444]	; (80034e4 <UART_SetConfig+0x280>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d124      	bne.n	8003376 <UART_SetConfig+0x112>
 800332c:	4b6c      	ldr	r3, [pc, #432]	; (80034e0 <UART_SetConfig+0x27c>)
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003334:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003338:	d011      	beq.n	800335e <UART_SetConfig+0xfa>
 800333a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800333e:	d817      	bhi.n	8003370 <UART_SetConfig+0x10c>
 8003340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003344:	d011      	beq.n	800336a <UART_SetConfig+0x106>
 8003346:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800334a:	d811      	bhi.n	8003370 <UART_SetConfig+0x10c>
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <UART_SetConfig+0xf4>
 8003350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003354:	d006      	beq.n	8003364 <UART_SetConfig+0x100>
 8003356:	e00b      	b.n	8003370 <UART_SetConfig+0x10c>
 8003358:	2300      	movs	r3, #0
 800335a:	77fb      	strb	r3, [r7, #31]
 800335c:	e08b      	b.n	8003476 <UART_SetConfig+0x212>
 800335e:	2302      	movs	r3, #2
 8003360:	77fb      	strb	r3, [r7, #31]
 8003362:	e088      	b.n	8003476 <UART_SetConfig+0x212>
 8003364:	2304      	movs	r3, #4
 8003366:	77fb      	strb	r3, [r7, #31]
 8003368:	e085      	b.n	8003476 <UART_SetConfig+0x212>
 800336a:	2308      	movs	r3, #8
 800336c:	77fb      	strb	r3, [r7, #31]
 800336e:	e082      	b.n	8003476 <UART_SetConfig+0x212>
 8003370:	2310      	movs	r3, #16
 8003372:	77fb      	strb	r3, [r7, #31]
 8003374:	e07f      	b.n	8003476 <UART_SetConfig+0x212>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a5b      	ldr	r2, [pc, #364]	; (80034e8 <UART_SetConfig+0x284>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d124      	bne.n	80033ca <UART_SetConfig+0x166>
 8003380:	4b57      	ldr	r3, [pc, #348]	; (80034e0 <UART_SetConfig+0x27c>)
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003388:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800338c:	d011      	beq.n	80033b2 <UART_SetConfig+0x14e>
 800338e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003392:	d817      	bhi.n	80033c4 <UART_SetConfig+0x160>
 8003394:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003398:	d011      	beq.n	80033be <UART_SetConfig+0x15a>
 800339a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800339e:	d811      	bhi.n	80033c4 <UART_SetConfig+0x160>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <UART_SetConfig+0x148>
 80033a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033a8:	d006      	beq.n	80033b8 <UART_SetConfig+0x154>
 80033aa:	e00b      	b.n	80033c4 <UART_SetConfig+0x160>
 80033ac:	2300      	movs	r3, #0
 80033ae:	77fb      	strb	r3, [r7, #31]
 80033b0:	e061      	b.n	8003476 <UART_SetConfig+0x212>
 80033b2:	2302      	movs	r3, #2
 80033b4:	77fb      	strb	r3, [r7, #31]
 80033b6:	e05e      	b.n	8003476 <UART_SetConfig+0x212>
 80033b8:	2304      	movs	r3, #4
 80033ba:	77fb      	strb	r3, [r7, #31]
 80033bc:	e05b      	b.n	8003476 <UART_SetConfig+0x212>
 80033be:	2308      	movs	r3, #8
 80033c0:	77fb      	strb	r3, [r7, #31]
 80033c2:	e058      	b.n	8003476 <UART_SetConfig+0x212>
 80033c4:	2310      	movs	r3, #16
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	e055      	b.n	8003476 <UART_SetConfig+0x212>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a47      	ldr	r2, [pc, #284]	; (80034ec <UART_SetConfig+0x288>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d124      	bne.n	800341e <UART_SetConfig+0x1ba>
 80033d4:	4b42      	ldr	r3, [pc, #264]	; (80034e0 <UART_SetConfig+0x27c>)
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80033dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033e0:	d011      	beq.n	8003406 <UART_SetConfig+0x1a2>
 80033e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033e6:	d817      	bhi.n	8003418 <UART_SetConfig+0x1b4>
 80033e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ec:	d011      	beq.n	8003412 <UART_SetConfig+0x1ae>
 80033ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033f2:	d811      	bhi.n	8003418 <UART_SetConfig+0x1b4>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <UART_SetConfig+0x19c>
 80033f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033fc:	d006      	beq.n	800340c <UART_SetConfig+0x1a8>
 80033fe:	e00b      	b.n	8003418 <UART_SetConfig+0x1b4>
 8003400:	2300      	movs	r3, #0
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e037      	b.n	8003476 <UART_SetConfig+0x212>
 8003406:	2302      	movs	r3, #2
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e034      	b.n	8003476 <UART_SetConfig+0x212>
 800340c:	2304      	movs	r3, #4
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e031      	b.n	8003476 <UART_SetConfig+0x212>
 8003412:	2308      	movs	r3, #8
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e02e      	b.n	8003476 <UART_SetConfig+0x212>
 8003418:	2310      	movs	r3, #16
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e02b      	b.n	8003476 <UART_SetConfig+0x212>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a33      	ldr	r2, [pc, #204]	; (80034f0 <UART_SetConfig+0x28c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d124      	bne.n	8003472 <UART_SetConfig+0x20e>
 8003428:	4b2d      	ldr	r3, [pc, #180]	; (80034e0 <UART_SetConfig+0x27c>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003430:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003434:	d011      	beq.n	800345a <UART_SetConfig+0x1f6>
 8003436:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800343a:	d817      	bhi.n	800346c <UART_SetConfig+0x208>
 800343c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003440:	d011      	beq.n	8003466 <UART_SetConfig+0x202>
 8003442:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003446:	d811      	bhi.n	800346c <UART_SetConfig+0x208>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <UART_SetConfig+0x1f0>
 800344c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003450:	d006      	beq.n	8003460 <UART_SetConfig+0x1fc>
 8003452:	e00b      	b.n	800346c <UART_SetConfig+0x208>
 8003454:	2300      	movs	r3, #0
 8003456:	77fb      	strb	r3, [r7, #31]
 8003458:	e00d      	b.n	8003476 <UART_SetConfig+0x212>
 800345a:	2302      	movs	r3, #2
 800345c:	77fb      	strb	r3, [r7, #31]
 800345e:	e00a      	b.n	8003476 <UART_SetConfig+0x212>
 8003460:	2304      	movs	r3, #4
 8003462:	77fb      	strb	r3, [r7, #31]
 8003464:	e007      	b.n	8003476 <UART_SetConfig+0x212>
 8003466:	2308      	movs	r3, #8
 8003468:	77fb      	strb	r3, [r7, #31]
 800346a:	e004      	b.n	8003476 <UART_SetConfig+0x212>
 800346c:	2310      	movs	r3, #16
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e001      	b.n	8003476 <UART_SetConfig+0x212>
 8003472:	2310      	movs	r3, #16
 8003474:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800347e:	d16b      	bne.n	8003558 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003480:	7ffb      	ldrb	r3, [r7, #31]
 8003482:	2b08      	cmp	r3, #8
 8003484:	d838      	bhi.n	80034f8 <UART_SetConfig+0x294>
 8003486:	a201      	add	r2, pc, #4	; (adr r2, 800348c <UART_SetConfig+0x228>)
 8003488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348c:	080034b1 	.word	0x080034b1
 8003490:	080034b9 	.word	0x080034b9
 8003494:	080034c1 	.word	0x080034c1
 8003498:	080034f9 	.word	0x080034f9
 800349c:	080034c7 	.word	0x080034c7
 80034a0:	080034f9 	.word	0x080034f9
 80034a4:	080034f9 	.word	0x080034f9
 80034a8:	080034f9 	.word	0x080034f9
 80034ac:	080034cf 	.word	0x080034cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034b0:	f7ff fb9e 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 80034b4:	61b8      	str	r0, [r7, #24]
        break;
 80034b6:	e024      	b.n	8003502 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034b8:	f7ff fbbc 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 80034bc:	61b8      	str	r0, [r7, #24]
        break;
 80034be:	e020      	b.n	8003502 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <UART_SetConfig+0x290>)
 80034c2:	61bb      	str	r3, [r7, #24]
        break;
 80034c4:	e01d      	b.n	8003502 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034c6:	f7ff fb33 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 80034ca:	61b8      	str	r0, [r7, #24]
        break;
 80034cc:	e019      	b.n	8003502 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d2:	61bb      	str	r3, [r7, #24]
        break;
 80034d4:	e015      	b.n	8003502 <UART_SetConfig+0x29e>
 80034d6:	bf00      	nop
 80034d8:	efff69f3 	.word	0xefff69f3
 80034dc:	40013800 	.word	0x40013800
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40004400 	.word	0x40004400
 80034e8:	40004800 	.word	0x40004800
 80034ec:	40004c00 	.word	0x40004c00
 80034f0:	40005000 	.word	0x40005000
 80034f4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	77bb      	strb	r3, [r7, #30]
        break;
 8003500:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d073      	beq.n	80035f0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	005a      	lsls	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	085b      	lsrs	r3, r3, #1
 8003512:	441a      	add	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	fbb2 f3f3 	udiv	r3, r2, r3
 800351c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2b0f      	cmp	r3, #15
 8003522:	d916      	bls.n	8003552 <UART_SetConfig+0x2ee>
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352a:	d212      	bcs.n	8003552 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	b29b      	uxth	r3, r3
 8003530:	f023 030f 	bic.w	r3, r3, #15
 8003534:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	b29b      	uxth	r3, r3
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	b29a      	uxth	r2, r3
 8003542:	89fb      	ldrh	r3, [r7, #14]
 8003544:	4313      	orrs	r3, r2
 8003546:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	89fa      	ldrh	r2, [r7, #14]
 800354e:	60da      	str	r2, [r3, #12]
 8003550:	e04e      	b.n	80035f0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	77bb      	strb	r3, [r7, #30]
 8003556:	e04b      	b.n	80035f0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003558:	7ffb      	ldrb	r3, [r7, #31]
 800355a:	2b08      	cmp	r3, #8
 800355c:	d827      	bhi.n	80035ae <UART_SetConfig+0x34a>
 800355e:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <UART_SetConfig+0x300>)
 8003560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003564:	08003589 	.word	0x08003589
 8003568:	08003591 	.word	0x08003591
 800356c:	08003599 	.word	0x08003599
 8003570:	080035af 	.word	0x080035af
 8003574:	0800359f 	.word	0x0800359f
 8003578:	080035af 	.word	0x080035af
 800357c:	080035af 	.word	0x080035af
 8003580:	080035af 	.word	0x080035af
 8003584:	080035a7 	.word	0x080035a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003588:	f7ff fb32 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 800358c:	61b8      	str	r0, [r7, #24]
        break;
 800358e:	e013      	b.n	80035b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003590:	f7ff fb50 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 8003594:	61b8      	str	r0, [r7, #24]
        break;
 8003596:	e00f      	b.n	80035b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003598:	4b1b      	ldr	r3, [pc, #108]	; (8003608 <UART_SetConfig+0x3a4>)
 800359a:	61bb      	str	r3, [r7, #24]
        break;
 800359c:	e00c      	b.n	80035b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800359e:	f7ff fac7 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 80035a2:	61b8      	str	r0, [r7, #24]
        break;
 80035a4:	e008      	b.n	80035b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035aa:	61bb      	str	r3, [r7, #24]
        break;
 80035ac:	e004      	b.n	80035b8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	77bb      	strb	r3, [r7, #30]
        break;
 80035b6:	bf00      	nop
    }

    if (pclk != 0U)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d018      	beq.n	80035f0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	085a      	lsrs	r2, r3, #1
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	441a      	add	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b0f      	cmp	r3, #15
 80035d6:	d909      	bls.n	80035ec <UART_SetConfig+0x388>
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035de:	d205      	bcs.n	80035ec <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	e001      	b.n	80035f0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80035fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3720      	adds	r7, #32
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	007a1200 	.word	0x007a1200

0800360c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01a      	beq.n	8003722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800370a:	d10a      	bne.n	8003722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	605a      	str	r2, [r3, #4]
  }
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b098      	sub	sp, #96	; 0x60
 8003754:	af02      	add	r7, sp, #8
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003760:	f7fd fd5e 	bl	8001220 <HAL_GetTick>
 8003764:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b08      	cmp	r3, #8
 8003772:	d12e      	bne.n	80037d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800377c:	2200      	movs	r2, #0
 800377e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f88c 	bl	80038a0 <UART_WaitOnFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d021      	beq.n	80037d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003796:	e853 3f00 	ldrex	r3, [r3]
 800379a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800379c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037a2:	653b      	str	r3, [r7, #80]	; 0x50
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ac:	647b      	str	r3, [r7, #68]	; 0x44
 80037ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037b4:	e841 2300 	strex	r3, r2, [r1]
 80037b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e6      	bne.n	800378e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e062      	b.n	8003898 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d149      	bne.n	8003874 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e8:	2200      	movs	r2, #0
 80037ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f856 	bl	80038a0 <UART_WaitOnFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d03c      	beq.n	8003874 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	623b      	str	r3, [r7, #32]
   return(result);
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800380e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003818:	633b      	str	r3, [r7, #48]	; 0x30
 800381a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800381e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e6      	bne.n	80037fa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3308      	adds	r3, #8
 8003832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	e853 3f00 	ldrex	r3, [r3]
 800383a:	60fb      	str	r3, [r7, #12]
   return(result);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	64bb      	str	r3, [r7, #72]	; 0x48
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3308      	adds	r3, #8
 800384a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800384c:	61fa      	str	r2, [r7, #28]
 800384e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	69b9      	ldr	r1, [r7, #24]
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	e841 2300 	strex	r3, r2, [r1]
 8003858:	617b      	str	r3, [r7, #20]
   return(result);
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e5      	bne.n	800382c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e011      	b.n	8003898 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2220      	movs	r2, #32
 800387e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3758      	adds	r7, #88	; 0x58
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	4613      	mov	r3, r2
 80038ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b0:	e04f      	b.n	8003952 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b8:	d04b      	beq.n	8003952 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ba:	f7fd fcb1 	bl	8001220 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d302      	bcc.n	80038d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e04e      	b.n	8003972 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d037      	beq.n	8003952 <UART_WaitOnFlagUntilTimeout+0xb2>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b80      	cmp	r3, #128	; 0x80
 80038e6:	d034      	beq.n	8003952 <UART_WaitOnFlagUntilTimeout+0xb2>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b40      	cmp	r3, #64	; 0x40
 80038ec:	d031      	beq.n	8003952 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d110      	bne.n	800391e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2208      	movs	r2, #8
 8003902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f838 	bl	800397a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2208      	movs	r2, #8
 800390e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e029      	b.n	8003972 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800392c:	d111      	bne.n	8003952 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003936:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f81e 	bl	800397a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2220      	movs	r2, #32
 8003942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e00f      	b.n	8003972 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69da      	ldr	r2, [r3, #28]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4013      	ands	r3, r2
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	429a      	cmp	r2, r3
 8003960:	bf0c      	ite	eq
 8003962:	2301      	moveq	r3, #1
 8003964:	2300      	movne	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	429a      	cmp	r2, r3
 800396e:	d0a0      	beq.n	80038b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800397a:	b480      	push	{r7}
 800397c:	b095      	sub	sp, #84	; 0x54
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398a:	e853 3f00 	ldrex	r3, [r3]
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a0:	643b      	str	r3, [r7, #64]	; 0x40
 80039a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039a8:	e841 2300 	strex	r3, r2, [r1]
 80039ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e6      	bne.n	8003982 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3308      	adds	r3, #8
 80039ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3308      	adds	r3, #8
 80039d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e5      	bne.n	80039b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d118      	bne.n	8003a22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f023 0310 	bic.w	r3, r3, #16
 8003a04:	647b      	str	r3, [r7, #68]	; 0x44
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	6979      	ldr	r1, [r7, #20]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e6      	bne.n	80039f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a36:	bf00      	nop
 8003a38:	3754      	adds	r7, #84	; 0x54
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <malloc>:
 8003a44:	4b02      	ldr	r3, [pc, #8]	; (8003a50 <malloc+0xc>)
 8003a46:	4601      	mov	r1, r0
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	f000 b823 	b.w	8003a94 <_malloc_r>
 8003a4e:	bf00      	nop
 8003a50:	20000058 	.word	0x20000058

08003a54 <sbrk_aligned>:
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	4e0e      	ldr	r6, [pc, #56]	; (8003a90 <sbrk_aligned+0x3c>)
 8003a58:	460c      	mov	r4, r1
 8003a5a:	6831      	ldr	r1, [r6, #0]
 8003a5c:	4605      	mov	r5, r0
 8003a5e:	b911      	cbnz	r1, 8003a66 <sbrk_aligned+0x12>
 8003a60:	f000 f8e6 	bl	8003c30 <_sbrk_r>
 8003a64:	6030      	str	r0, [r6, #0]
 8003a66:	4621      	mov	r1, r4
 8003a68:	4628      	mov	r0, r5
 8003a6a:	f000 f8e1 	bl	8003c30 <_sbrk_r>
 8003a6e:	1c43      	adds	r3, r0, #1
 8003a70:	d00a      	beq.n	8003a88 <sbrk_aligned+0x34>
 8003a72:	1cc4      	adds	r4, r0, #3
 8003a74:	f024 0403 	bic.w	r4, r4, #3
 8003a78:	42a0      	cmp	r0, r4
 8003a7a:	d007      	beq.n	8003a8c <sbrk_aligned+0x38>
 8003a7c:	1a21      	subs	r1, r4, r0
 8003a7e:	4628      	mov	r0, r5
 8003a80:	f000 f8d6 	bl	8003c30 <_sbrk_r>
 8003a84:	3001      	adds	r0, #1
 8003a86:	d101      	bne.n	8003a8c <sbrk_aligned+0x38>
 8003a88:	f04f 34ff 	mov.w	r4, #4294967295
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	bd70      	pop	{r4, r5, r6, pc}
 8003a90:	2000011c 	.word	0x2000011c

08003a94 <_malloc_r>:
 8003a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a98:	1ccd      	adds	r5, r1, #3
 8003a9a:	f025 0503 	bic.w	r5, r5, #3
 8003a9e:	3508      	adds	r5, #8
 8003aa0:	2d0c      	cmp	r5, #12
 8003aa2:	bf38      	it	cc
 8003aa4:	250c      	movcc	r5, #12
 8003aa6:	2d00      	cmp	r5, #0
 8003aa8:	4607      	mov	r7, r0
 8003aaa:	db01      	blt.n	8003ab0 <_malloc_r+0x1c>
 8003aac:	42a9      	cmp	r1, r5
 8003aae:	d905      	bls.n	8003abc <_malloc_r+0x28>
 8003ab0:	230c      	movs	r3, #12
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	2600      	movs	r6, #0
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003abc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b90 <_malloc_r+0xfc>
 8003ac0:	f000 f868 	bl	8003b94 <__malloc_lock>
 8003ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ac8:	461c      	mov	r4, r3
 8003aca:	bb5c      	cbnz	r4, 8003b24 <_malloc_r+0x90>
 8003acc:	4629      	mov	r1, r5
 8003ace:	4638      	mov	r0, r7
 8003ad0:	f7ff ffc0 	bl	8003a54 <sbrk_aligned>
 8003ad4:	1c43      	adds	r3, r0, #1
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	d155      	bne.n	8003b86 <_malloc_r+0xf2>
 8003ada:	f8d8 4000 	ldr.w	r4, [r8]
 8003ade:	4626      	mov	r6, r4
 8003ae0:	2e00      	cmp	r6, #0
 8003ae2:	d145      	bne.n	8003b70 <_malloc_r+0xdc>
 8003ae4:	2c00      	cmp	r4, #0
 8003ae6:	d048      	beq.n	8003b7a <_malloc_r+0xe6>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	4631      	mov	r1, r6
 8003aec:	4638      	mov	r0, r7
 8003aee:	eb04 0903 	add.w	r9, r4, r3
 8003af2:	f000 f89d 	bl	8003c30 <_sbrk_r>
 8003af6:	4581      	cmp	r9, r0
 8003af8:	d13f      	bne.n	8003b7a <_malloc_r+0xe6>
 8003afa:	6821      	ldr	r1, [r4, #0]
 8003afc:	1a6d      	subs	r5, r5, r1
 8003afe:	4629      	mov	r1, r5
 8003b00:	4638      	mov	r0, r7
 8003b02:	f7ff ffa7 	bl	8003a54 <sbrk_aligned>
 8003b06:	3001      	adds	r0, #1
 8003b08:	d037      	beq.n	8003b7a <_malloc_r+0xe6>
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	442b      	add	r3, r5
 8003b0e:	6023      	str	r3, [r4, #0]
 8003b10:	f8d8 3000 	ldr.w	r3, [r8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d038      	beq.n	8003b8a <_malloc_r+0xf6>
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	42a2      	cmp	r2, r4
 8003b1c:	d12b      	bne.n	8003b76 <_malloc_r+0xe2>
 8003b1e:	2200      	movs	r2, #0
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	e00f      	b.n	8003b44 <_malloc_r+0xb0>
 8003b24:	6822      	ldr	r2, [r4, #0]
 8003b26:	1b52      	subs	r2, r2, r5
 8003b28:	d41f      	bmi.n	8003b6a <_malloc_r+0xd6>
 8003b2a:	2a0b      	cmp	r2, #11
 8003b2c:	d917      	bls.n	8003b5e <_malloc_r+0xca>
 8003b2e:	1961      	adds	r1, r4, r5
 8003b30:	42a3      	cmp	r3, r4
 8003b32:	6025      	str	r5, [r4, #0]
 8003b34:	bf18      	it	ne
 8003b36:	6059      	strne	r1, [r3, #4]
 8003b38:	6863      	ldr	r3, [r4, #4]
 8003b3a:	bf08      	it	eq
 8003b3c:	f8c8 1000 	streq.w	r1, [r8]
 8003b40:	5162      	str	r2, [r4, r5]
 8003b42:	604b      	str	r3, [r1, #4]
 8003b44:	4638      	mov	r0, r7
 8003b46:	f104 060b 	add.w	r6, r4, #11
 8003b4a:	f000 f829 	bl	8003ba0 <__malloc_unlock>
 8003b4e:	f026 0607 	bic.w	r6, r6, #7
 8003b52:	1d23      	adds	r3, r4, #4
 8003b54:	1af2      	subs	r2, r6, r3
 8003b56:	d0ae      	beq.n	8003ab6 <_malloc_r+0x22>
 8003b58:	1b9b      	subs	r3, r3, r6
 8003b5a:	50a3      	str	r3, [r4, r2]
 8003b5c:	e7ab      	b.n	8003ab6 <_malloc_r+0x22>
 8003b5e:	42a3      	cmp	r3, r4
 8003b60:	6862      	ldr	r2, [r4, #4]
 8003b62:	d1dd      	bne.n	8003b20 <_malloc_r+0x8c>
 8003b64:	f8c8 2000 	str.w	r2, [r8]
 8003b68:	e7ec      	b.n	8003b44 <_malloc_r+0xb0>
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	6864      	ldr	r4, [r4, #4]
 8003b6e:	e7ac      	b.n	8003aca <_malloc_r+0x36>
 8003b70:	4634      	mov	r4, r6
 8003b72:	6876      	ldr	r6, [r6, #4]
 8003b74:	e7b4      	b.n	8003ae0 <_malloc_r+0x4c>
 8003b76:	4613      	mov	r3, r2
 8003b78:	e7cc      	b.n	8003b14 <_malloc_r+0x80>
 8003b7a:	230c      	movs	r3, #12
 8003b7c:	603b      	str	r3, [r7, #0]
 8003b7e:	4638      	mov	r0, r7
 8003b80:	f000 f80e 	bl	8003ba0 <__malloc_unlock>
 8003b84:	e797      	b.n	8003ab6 <_malloc_r+0x22>
 8003b86:	6025      	str	r5, [r4, #0]
 8003b88:	e7dc      	b.n	8003b44 <_malloc_r+0xb0>
 8003b8a:	605b      	str	r3, [r3, #4]
 8003b8c:	deff      	udf	#255	; 0xff
 8003b8e:	bf00      	nop
 8003b90:	20000118 	.word	0x20000118

08003b94 <__malloc_lock>:
 8003b94:	4801      	ldr	r0, [pc, #4]	; (8003b9c <__malloc_lock+0x8>)
 8003b96:	f000 b885 	b.w	8003ca4 <__retarget_lock_acquire_recursive>
 8003b9a:	bf00      	nop
 8003b9c:	2000025c 	.word	0x2000025c

08003ba0 <__malloc_unlock>:
 8003ba0:	4801      	ldr	r0, [pc, #4]	; (8003ba8 <__malloc_unlock+0x8>)
 8003ba2:	f000 b880 	b.w	8003ca6 <__retarget_lock_release_recursive>
 8003ba6:	bf00      	nop
 8003ba8:	2000025c 	.word	0x2000025c

08003bac <_vsniprintf_r>:
 8003bac:	b530      	push	{r4, r5, lr}
 8003bae:	4614      	mov	r4, r2
 8003bb0:	2c00      	cmp	r4, #0
 8003bb2:	b09b      	sub	sp, #108	; 0x6c
 8003bb4:	4605      	mov	r5, r0
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	da05      	bge.n	8003bc6 <_vsniprintf_r+0x1a>
 8003bba:	238b      	movs	r3, #139	; 0x8b
 8003bbc:	6003      	str	r3, [r0, #0]
 8003bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc2:	b01b      	add	sp, #108	; 0x6c
 8003bc4:	bd30      	pop	{r4, r5, pc}
 8003bc6:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003bca:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003bce:	bf14      	ite	ne
 8003bd0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003bd4:	4623      	moveq	r3, r4
 8003bd6:	9302      	str	r3, [sp, #8]
 8003bd8:	9305      	str	r3, [sp, #20]
 8003bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bde:	9100      	str	r1, [sp, #0]
 8003be0:	9104      	str	r1, [sp, #16]
 8003be2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003be6:	4669      	mov	r1, sp
 8003be8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003bea:	f000 f903 	bl	8003df4 <_svfiprintf_r>
 8003bee:	1c43      	adds	r3, r0, #1
 8003bf0:	bfbc      	itt	lt
 8003bf2:	238b      	movlt	r3, #139	; 0x8b
 8003bf4:	602b      	strlt	r3, [r5, #0]
 8003bf6:	2c00      	cmp	r4, #0
 8003bf8:	d0e3      	beq.n	8003bc2 <_vsniprintf_r+0x16>
 8003bfa:	9b00      	ldr	r3, [sp, #0]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
 8003c00:	e7df      	b.n	8003bc2 <_vsniprintf_r+0x16>
	...

08003c04 <vsniprintf>:
 8003c04:	b507      	push	{r0, r1, r2, lr}
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	460a      	mov	r2, r1
 8003c0c:	4601      	mov	r1, r0
 8003c0e:	4803      	ldr	r0, [pc, #12]	; (8003c1c <vsniprintf+0x18>)
 8003c10:	6800      	ldr	r0, [r0, #0]
 8003c12:	f7ff ffcb 	bl	8003bac <_vsniprintf_r>
 8003c16:	b003      	add	sp, #12
 8003c18:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c1c:	20000058 	.word	0x20000058

08003c20 <memset>:
 8003c20:	4402      	add	r2, r0
 8003c22:	4603      	mov	r3, r0
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d100      	bne.n	8003c2a <memset+0xa>
 8003c28:	4770      	bx	lr
 8003c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c2e:	e7f9      	b.n	8003c24 <memset+0x4>

08003c30 <_sbrk_r>:
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	4d06      	ldr	r5, [pc, #24]	; (8003c4c <_sbrk_r+0x1c>)
 8003c34:	2300      	movs	r3, #0
 8003c36:	4604      	mov	r4, r0
 8003c38:	4608      	mov	r0, r1
 8003c3a:	602b      	str	r3, [r5, #0]
 8003c3c:	f7fd fa24 	bl	8001088 <_sbrk>
 8003c40:	1c43      	adds	r3, r0, #1
 8003c42:	d102      	bne.n	8003c4a <_sbrk_r+0x1a>
 8003c44:	682b      	ldr	r3, [r5, #0]
 8003c46:	b103      	cbz	r3, 8003c4a <_sbrk_r+0x1a>
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	bd38      	pop	{r3, r4, r5, pc}
 8003c4c:	20000258 	.word	0x20000258

08003c50 <__errno>:
 8003c50:	4b01      	ldr	r3, [pc, #4]	; (8003c58 <__errno+0x8>)
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	20000058 	.word	0x20000058

08003c5c <__libc_init_array>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4d0d      	ldr	r5, [pc, #52]	; (8003c94 <__libc_init_array+0x38>)
 8003c60:	4c0d      	ldr	r4, [pc, #52]	; (8003c98 <__libc_init_array+0x3c>)
 8003c62:	1b64      	subs	r4, r4, r5
 8003c64:	10a4      	asrs	r4, r4, #2
 8003c66:	2600      	movs	r6, #0
 8003c68:	42a6      	cmp	r6, r4
 8003c6a:	d109      	bne.n	8003c80 <__libc_init_array+0x24>
 8003c6c:	4d0b      	ldr	r5, [pc, #44]	; (8003c9c <__libc_init_array+0x40>)
 8003c6e:	4c0c      	ldr	r4, [pc, #48]	; (8003ca0 <__libc_init_array+0x44>)
 8003c70:	f000 fbae 	bl	80043d0 <_init>
 8003c74:	1b64      	subs	r4, r4, r5
 8003c76:	10a4      	asrs	r4, r4, #2
 8003c78:	2600      	movs	r6, #0
 8003c7a:	42a6      	cmp	r6, r4
 8003c7c:	d105      	bne.n	8003c8a <__libc_init_array+0x2e>
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c84:	4798      	blx	r3
 8003c86:	3601      	adds	r6, #1
 8003c88:	e7ee      	b.n	8003c68 <__libc_init_array+0xc>
 8003c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8e:	4798      	blx	r3
 8003c90:	3601      	adds	r6, #1
 8003c92:	e7f2      	b.n	8003c7a <__libc_init_array+0x1e>
 8003c94:	080044e4 	.word	0x080044e4
 8003c98:	080044e4 	.word	0x080044e4
 8003c9c:	080044e4 	.word	0x080044e4
 8003ca0:	080044e8 	.word	0x080044e8

08003ca4 <__retarget_lock_acquire_recursive>:
 8003ca4:	4770      	bx	lr

08003ca6 <__retarget_lock_release_recursive>:
 8003ca6:	4770      	bx	lr

08003ca8 <_free_r>:
 8003ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003caa:	2900      	cmp	r1, #0
 8003cac:	d044      	beq.n	8003d38 <_free_r+0x90>
 8003cae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cb2:	9001      	str	r0, [sp, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f1a1 0404 	sub.w	r4, r1, #4
 8003cba:	bfb8      	it	lt
 8003cbc:	18e4      	addlt	r4, r4, r3
 8003cbe:	f7ff ff69 	bl	8003b94 <__malloc_lock>
 8003cc2:	4a1e      	ldr	r2, [pc, #120]	; (8003d3c <_free_r+0x94>)
 8003cc4:	9801      	ldr	r0, [sp, #4]
 8003cc6:	6813      	ldr	r3, [r2, #0]
 8003cc8:	b933      	cbnz	r3, 8003cd8 <_free_r+0x30>
 8003cca:	6063      	str	r3, [r4, #4]
 8003ccc:	6014      	str	r4, [r2, #0]
 8003cce:	b003      	add	sp, #12
 8003cd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cd4:	f7ff bf64 	b.w	8003ba0 <__malloc_unlock>
 8003cd8:	42a3      	cmp	r3, r4
 8003cda:	d908      	bls.n	8003cee <_free_r+0x46>
 8003cdc:	6825      	ldr	r5, [r4, #0]
 8003cde:	1961      	adds	r1, r4, r5
 8003ce0:	428b      	cmp	r3, r1
 8003ce2:	bf01      	itttt	eq
 8003ce4:	6819      	ldreq	r1, [r3, #0]
 8003ce6:	685b      	ldreq	r3, [r3, #4]
 8003ce8:	1949      	addeq	r1, r1, r5
 8003cea:	6021      	streq	r1, [r4, #0]
 8003cec:	e7ed      	b.n	8003cca <_free_r+0x22>
 8003cee:	461a      	mov	r2, r3
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	b10b      	cbz	r3, 8003cf8 <_free_r+0x50>
 8003cf4:	42a3      	cmp	r3, r4
 8003cf6:	d9fa      	bls.n	8003cee <_free_r+0x46>
 8003cf8:	6811      	ldr	r1, [r2, #0]
 8003cfa:	1855      	adds	r5, r2, r1
 8003cfc:	42a5      	cmp	r5, r4
 8003cfe:	d10b      	bne.n	8003d18 <_free_r+0x70>
 8003d00:	6824      	ldr	r4, [r4, #0]
 8003d02:	4421      	add	r1, r4
 8003d04:	1854      	adds	r4, r2, r1
 8003d06:	42a3      	cmp	r3, r4
 8003d08:	6011      	str	r1, [r2, #0]
 8003d0a:	d1e0      	bne.n	8003cce <_free_r+0x26>
 8003d0c:	681c      	ldr	r4, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	6053      	str	r3, [r2, #4]
 8003d12:	440c      	add	r4, r1
 8003d14:	6014      	str	r4, [r2, #0]
 8003d16:	e7da      	b.n	8003cce <_free_r+0x26>
 8003d18:	d902      	bls.n	8003d20 <_free_r+0x78>
 8003d1a:	230c      	movs	r3, #12
 8003d1c:	6003      	str	r3, [r0, #0]
 8003d1e:	e7d6      	b.n	8003cce <_free_r+0x26>
 8003d20:	6825      	ldr	r5, [r4, #0]
 8003d22:	1961      	adds	r1, r4, r5
 8003d24:	428b      	cmp	r3, r1
 8003d26:	bf04      	itt	eq
 8003d28:	6819      	ldreq	r1, [r3, #0]
 8003d2a:	685b      	ldreq	r3, [r3, #4]
 8003d2c:	6063      	str	r3, [r4, #4]
 8003d2e:	bf04      	itt	eq
 8003d30:	1949      	addeq	r1, r1, r5
 8003d32:	6021      	streq	r1, [r4, #0]
 8003d34:	6054      	str	r4, [r2, #4]
 8003d36:	e7ca      	b.n	8003cce <_free_r+0x26>
 8003d38:	b003      	add	sp, #12
 8003d3a:	bd30      	pop	{r4, r5, pc}
 8003d3c:	20000118 	.word	0x20000118

08003d40 <__ssputs_r>:
 8003d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d44:	688e      	ldr	r6, [r1, #8]
 8003d46:	461f      	mov	r7, r3
 8003d48:	42be      	cmp	r6, r7
 8003d4a:	680b      	ldr	r3, [r1, #0]
 8003d4c:	4682      	mov	sl, r0
 8003d4e:	460c      	mov	r4, r1
 8003d50:	4690      	mov	r8, r2
 8003d52:	d82c      	bhi.n	8003dae <__ssputs_r+0x6e>
 8003d54:	898a      	ldrh	r2, [r1, #12]
 8003d56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d5a:	d026      	beq.n	8003daa <__ssputs_r+0x6a>
 8003d5c:	6965      	ldr	r5, [r4, #20]
 8003d5e:	6909      	ldr	r1, [r1, #16]
 8003d60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d64:	eba3 0901 	sub.w	r9, r3, r1
 8003d68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d6c:	1c7b      	adds	r3, r7, #1
 8003d6e:	444b      	add	r3, r9
 8003d70:	106d      	asrs	r5, r5, #1
 8003d72:	429d      	cmp	r5, r3
 8003d74:	bf38      	it	cc
 8003d76:	461d      	movcc	r5, r3
 8003d78:	0553      	lsls	r3, r2, #21
 8003d7a:	d527      	bpl.n	8003dcc <__ssputs_r+0x8c>
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	f7ff fe89 	bl	8003a94 <_malloc_r>
 8003d82:	4606      	mov	r6, r0
 8003d84:	b360      	cbz	r0, 8003de0 <__ssputs_r+0xa0>
 8003d86:	6921      	ldr	r1, [r4, #16]
 8003d88:	464a      	mov	r2, r9
 8003d8a:	f000 fadb 	bl	8004344 <memcpy>
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d98:	81a3      	strh	r3, [r4, #12]
 8003d9a:	6126      	str	r6, [r4, #16]
 8003d9c:	6165      	str	r5, [r4, #20]
 8003d9e:	444e      	add	r6, r9
 8003da0:	eba5 0509 	sub.w	r5, r5, r9
 8003da4:	6026      	str	r6, [r4, #0]
 8003da6:	60a5      	str	r5, [r4, #8]
 8003da8:	463e      	mov	r6, r7
 8003daa:	42be      	cmp	r6, r7
 8003dac:	d900      	bls.n	8003db0 <__ssputs_r+0x70>
 8003dae:	463e      	mov	r6, r7
 8003db0:	6820      	ldr	r0, [r4, #0]
 8003db2:	4632      	mov	r2, r6
 8003db4:	4641      	mov	r1, r8
 8003db6:	f000 faab 	bl	8004310 <memmove>
 8003dba:	68a3      	ldr	r3, [r4, #8]
 8003dbc:	1b9b      	subs	r3, r3, r6
 8003dbe:	60a3      	str	r3, [r4, #8]
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	4433      	add	r3, r6
 8003dc4:	6023      	str	r3, [r4, #0]
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dcc:	462a      	mov	r2, r5
 8003dce:	f000 fac7 	bl	8004360 <_realloc_r>
 8003dd2:	4606      	mov	r6, r0
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	d1e0      	bne.n	8003d9a <__ssputs_r+0x5a>
 8003dd8:	6921      	ldr	r1, [r4, #16]
 8003dda:	4650      	mov	r0, sl
 8003ddc:	f7ff ff64 	bl	8003ca8 <_free_r>
 8003de0:	230c      	movs	r3, #12
 8003de2:	f8ca 3000 	str.w	r3, [sl]
 8003de6:	89a3      	ldrh	r3, [r4, #12]
 8003de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dec:	81a3      	strh	r3, [r4, #12]
 8003dee:	f04f 30ff 	mov.w	r0, #4294967295
 8003df2:	e7e9      	b.n	8003dc8 <__ssputs_r+0x88>

08003df4 <_svfiprintf_r>:
 8003df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df8:	4698      	mov	r8, r3
 8003dfa:	898b      	ldrh	r3, [r1, #12]
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	b09d      	sub	sp, #116	; 0x74
 8003e00:	4607      	mov	r7, r0
 8003e02:	460d      	mov	r5, r1
 8003e04:	4614      	mov	r4, r2
 8003e06:	d50e      	bpl.n	8003e26 <_svfiprintf_r+0x32>
 8003e08:	690b      	ldr	r3, [r1, #16]
 8003e0a:	b963      	cbnz	r3, 8003e26 <_svfiprintf_r+0x32>
 8003e0c:	2140      	movs	r1, #64	; 0x40
 8003e0e:	f7ff fe41 	bl	8003a94 <_malloc_r>
 8003e12:	6028      	str	r0, [r5, #0]
 8003e14:	6128      	str	r0, [r5, #16]
 8003e16:	b920      	cbnz	r0, 8003e22 <_svfiprintf_r+0x2e>
 8003e18:	230c      	movs	r3, #12
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e20:	e0d0      	b.n	8003fc4 <_svfiprintf_r+0x1d0>
 8003e22:	2340      	movs	r3, #64	; 0x40
 8003e24:	616b      	str	r3, [r5, #20]
 8003e26:	2300      	movs	r3, #0
 8003e28:	9309      	str	r3, [sp, #36]	; 0x24
 8003e2a:	2320      	movs	r3, #32
 8003e2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e30:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e34:	2330      	movs	r3, #48	; 0x30
 8003e36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003fdc <_svfiprintf_r+0x1e8>
 8003e3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e3e:	f04f 0901 	mov.w	r9, #1
 8003e42:	4623      	mov	r3, r4
 8003e44:	469a      	mov	sl, r3
 8003e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e4a:	b10a      	cbz	r2, 8003e50 <_svfiprintf_r+0x5c>
 8003e4c:	2a25      	cmp	r2, #37	; 0x25
 8003e4e:	d1f9      	bne.n	8003e44 <_svfiprintf_r+0x50>
 8003e50:	ebba 0b04 	subs.w	fp, sl, r4
 8003e54:	d00b      	beq.n	8003e6e <_svfiprintf_r+0x7a>
 8003e56:	465b      	mov	r3, fp
 8003e58:	4622      	mov	r2, r4
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	4638      	mov	r0, r7
 8003e5e:	f7ff ff6f 	bl	8003d40 <__ssputs_r>
 8003e62:	3001      	adds	r0, #1
 8003e64:	f000 80a9 	beq.w	8003fba <_svfiprintf_r+0x1c6>
 8003e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e6a:	445a      	add	r2, fp
 8003e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8003e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80a1 	beq.w	8003fba <_svfiprintf_r+0x1c6>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e82:	f10a 0a01 	add.w	sl, sl, #1
 8003e86:	9304      	str	r3, [sp, #16]
 8003e88:	9307      	str	r3, [sp, #28]
 8003e8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e8e:	931a      	str	r3, [sp, #104]	; 0x68
 8003e90:	4654      	mov	r4, sl
 8003e92:	2205      	movs	r2, #5
 8003e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e98:	4850      	ldr	r0, [pc, #320]	; (8003fdc <_svfiprintf_r+0x1e8>)
 8003e9a:	f7fc f9a9 	bl	80001f0 <memchr>
 8003e9e:	9a04      	ldr	r2, [sp, #16]
 8003ea0:	b9d8      	cbnz	r0, 8003eda <_svfiprintf_r+0xe6>
 8003ea2:	06d0      	lsls	r0, r2, #27
 8003ea4:	bf44      	itt	mi
 8003ea6:	2320      	movmi	r3, #32
 8003ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eac:	0711      	lsls	r1, r2, #28
 8003eae:	bf44      	itt	mi
 8003eb0:	232b      	movmi	r3, #43	; 0x2b
 8003eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8003eba:	2b2a      	cmp	r3, #42	; 0x2a
 8003ebc:	d015      	beq.n	8003eea <_svfiprintf_r+0xf6>
 8003ebe:	9a07      	ldr	r2, [sp, #28]
 8003ec0:	4654      	mov	r4, sl
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	f04f 0c0a 	mov.w	ip, #10
 8003ec8:	4621      	mov	r1, r4
 8003eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ece:	3b30      	subs	r3, #48	; 0x30
 8003ed0:	2b09      	cmp	r3, #9
 8003ed2:	d94d      	bls.n	8003f70 <_svfiprintf_r+0x17c>
 8003ed4:	b1b0      	cbz	r0, 8003f04 <_svfiprintf_r+0x110>
 8003ed6:	9207      	str	r2, [sp, #28]
 8003ed8:	e014      	b.n	8003f04 <_svfiprintf_r+0x110>
 8003eda:	eba0 0308 	sub.w	r3, r0, r8
 8003ede:	fa09 f303 	lsl.w	r3, r9, r3
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	9304      	str	r3, [sp, #16]
 8003ee6:	46a2      	mov	sl, r4
 8003ee8:	e7d2      	b.n	8003e90 <_svfiprintf_r+0x9c>
 8003eea:	9b03      	ldr	r3, [sp, #12]
 8003eec:	1d19      	adds	r1, r3, #4
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	9103      	str	r1, [sp, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	bfbb      	ittet	lt
 8003ef6:	425b      	neglt	r3, r3
 8003ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8003efc:	9307      	strge	r3, [sp, #28]
 8003efe:	9307      	strlt	r3, [sp, #28]
 8003f00:	bfb8      	it	lt
 8003f02:	9204      	strlt	r2, [sp, #16]
 8003f04:	7823      	ldrb	r3, [r4, #0]
 8003f06:	2b2e      	cmp	r3, #46	; 0x2e
 8003f08:	d10c      	bne.n	8003f24 <_svfiprintf_r+0x130>
 8003f0a:	7863      	ldrb	r3, [r4, #1]
 8003f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f0e:	d134      	bne.n	8003f7a <_svfiprintf_r+0x186>
 8003f10:	9b03      	ldr	r3, [sp, #12]
 8003f12:	1d1a      	adds	r2, r3, #4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	9203      	str	r2, [sp, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bfb8      	it	lt
 8003f1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f20:	3402      	adds	r4, #2
 8003f22:	9305      	str	r3, [sp, #20]
 8003f24:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003fec <_svfiprintf_r+0x1f8>
 8003f28:	7821      	ldrb	r1, [r4, #0]
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	4650      	mov	r0, sl
 8003f2e:	f7fc f95f 	bl	80001f0 <memchr>
 8003f32:	b138      	cbz	r0, 8003f44 <_svfiprintf_r+0x150>
 8003f34:	9b04      	ldr	r3, [sp, #16]
 8003f36:	eba0 000a 	sub.w	r0, r0, sl
 8003f3a:	2240      	movs	r2, #64	; 0x40
 8003f3c:	4082      	lsls	r2, r0
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	3401      	adds	r4, #1
 8003f42:	9304      	str	r3, [sp, #16]
 8003f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f48:	4825      	ldr	r0, [pc, #148]	; (8003fe0 <_svfiprintf_r+0x1ec>)
 8003f4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f4e:	2206      	movs	r2, #6
 8003f50:	f7fc f94e 	bl	80001f0 <memchr>
 8003f54:	2800      	cmp	r0, #0
 8003f56:	d038      	beq.n	8003fca <_svfiprintf_r+0x1d6>
 8003f58:	4b22      	ldr	r3, [pc, #136]	; (8003fe4 <_svfiprintf_r+0x1f0>)
 8003f5a:	bb1b      	cbnz	r3, 8003fa4 <_svfiprintf_r+0x1b0>
 8003f5c:	9b03      	ldr	r3, [sp, #12]
 8003f5e:	3307      	adds	r3, #7
 8003f60:	f023 0307 	bic.w	r3, r3, #7
 8003f64:	3308      	adds	r3, #8
 8003f66:	9303      	str	r3, [sp, #12]
 8003f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f6a:	4433      	add	r3, r6
 8003f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f6e:	e768      	b.n	8003e42 <_svfiprintf_r+0x4e>
 8003f70:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f74:	460c      	mov	r4, r1
 8003f76:	2001      	movs	r0, #1
 8003f78:	e7a6      	b.n	8003ec8 <_svfiprintf_r+0xd4>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	3401      	adds	r4, #1
 8003f7e:	9305      	str	r3, [sp, #20]
 8003f80:	4619      	mov	r1, r3
 8003f82:	f04f 0c0a 	mov.w	ip, #10
 8003f86:	4620      	mov	r0, r4
 8003f88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f8c:	3a30      	subs	r2, #48	; 0x30
 8003f8e:	2a09      	cmp	r2, #9
 8003f90:	d903      	bls.n	8003f9a <_svfiprintf_r+0x1a6>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0c6      	beq.n	8003f24 <_svfiprintf_r+0x130>
 8003f96:	9105      	str	r1, [sp, #20]
 8003f98:	e7c4      	b.n	8003f24 <_svfiprintf_r+0x130>
 8003f9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e7f0      	b.n	8003f86 <_svfiprintf_r+0x192>
 8003fa4:	ab03      	add	r3, sp, #12
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	462a      	mov	r2, r5
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <_svfiprintf_r+0x1f4>)
 8003fac:	a904      	add	r1, sp, #16
 8003fae:	4638      	mov	r0, r7
 8003fb0:	f3af 8000 	nop.w
 8003fb4:	1c42      	adds	r2, r0, #1
 8003fb6:	4606      	mov	r6, r0
 8003fb8:	d1d6      	bne.n	8003f68 <_svfiprintf_r+0x174>
 8003fba:	89ab      	ldrh	r3, [r5, #12]
 8003fbc:	065b      	lsls	r3, r3, #25
 8003fbe:	f53f af2d 	bmi.w	8003e1c <_svfiprintf_r+0x28>
 8003fc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fc4:	b01d      	add	sp, #116	; 0x74
 8003fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fca:	ab03      	add	r3, sp, #12
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	462a      	mov	r2, r5
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <_svfiprintf_r+0x1f4>)
 8003fd2:	a904      	add	r1, sp, #16
 8003fd4:	4638      	mov	r0, r7
 8003fd6:	f000 f879 	bl	80040cc <_printf_i>
 8003fda:	e7eb      	b.n	8003fb4 <_svfiprintf_r+0x1c0>
 8003fdc:	080044b0 	.word	0x080044b0
 8003fe0:	080044ba 	.word	0x080044ba
 8003fe4:	00000000 	.word	0x00000000
 8003fe8:	08003d41 	.word	0x08003d41
 8003fec:	080044b6 	.word	0x080044b6

08003ff0 <_printf_common>:
 8003ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff4:	4616      	mov	r6, r2
 8003ff6:	4699      	mov	r9, r3
 8003ff8:	688a      	ldr	r2, [r1, #8]
 8003ffa:	690b      	ldr	r3, [r1, #16]
 8003ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004000:	4293      	cmp	r3, r2
 8004002:	bfb8      	it	lt
 8004004:	4613      	movlt	r3, r2
 8004006:	6033      	str	r3, [r6, #0]
 8004008:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800400c:	4607      	mov	r7, r0
 800400e:	460c      	mov	r4, r1
 8004010:	b10a      	cbz	r2, 8004016 <_printf_common+0x26>
 8004012:	3301      	adds	r3, #1
 8004014:	6033      	str	r3, [r6, #0]
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	0699      	lsls	r1, r3, #26
 800401a:	bf42      	ittt	mi
 800401c:	6833      	ldrmi	r3, [r6, #0]
 800401e:	3302      	addmi	r3, #2
 8004020:	6033      	strmi	r3, [r6, #0]
 8004022:	6825      	ldr	r5, [r4, #0]
 8004024:	f015 0506 	ands.w	r5, r5, #6
 8004028:	d106      	bne.n	8004038 <_printf_common+0x48>
 800402a:	f104 0a19 	add.w	sl, r4, #25
 800402e:	68e3      	ldr	r3, [r4, #12]
 8004030:	6832      	ldr	r2, [r6, #0]
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	42ab      	cmp	r3, r5
 8004036:	dc26      	bgt.n	8004086 <_printf_common+0x96>
 8004038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800403c:	1e13      	subs	r3, r2, #0
 800403e:	6822      	ldr	r2, [r4, #0]
 8004040:	bf18      	it	ne
 8004042:	2301      	movne	r3, #1
 8004044:	0692      	lsls	r2, r2, #26
 8004046:	d42b      	bmi.n	80040a0 <_printf_common+0xb0>
 8004048:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800404c:	4649      	mov	r1, r9
 800404e:	4638      	mov	r0, r7
 8004050:	47c0      	blx	r8
 8004052:	3001      	adds	r0, #1
 8004054:	d01e      	beq.n	8004094 <_printf_common+0xa4>
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	6922      	ldr	r2, [r4, #16]
 800405a:	f003 0306 	and.w	r3, r3, #6
 800405e:	2b04      	cmp	r3, #4
 8004060:	bf02      	ittt	eq
 8004062:	68e5      	ldreq	r5, [r4, #12]
 8004064:	6833      	ldreq	r3, [r6, #0]
 8004066:	1aed      	subeq	r5, r5, r3
 8004068:	68a3      	ldr	r3, [r4, #8]
 800406a:	bf0c      	ite	eq
 800406c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004070:	2500      	movne	r5, #0
 8004072:	4293      	cmp	r3, r2
 8004074:	bfc4      	itt	gt
 8004076:	1a9b      	subgt	r3, r3, r2
 8004078:	18ed      	addgt	r5, r5, r3
 800407a:	2600      	movs	r6, #0
 800407c:	341a      	adds	r4, #26
 800407e:	42b5      	cmp	r5, r6
 8004080:	d11a      	bne.n	80040b8 <_printf_common+0xc8>
 8004082:	2000      	movs	r0, #0
 8004084:	e008      	b.n	8004098 <_printf_common+0xa8>
 8004086:	2301      	movs	r3, #1
 8004088:	4652      	mov	r2, sl
 800408a:	4649      	mov	r1, r9
 800408c:	4638      	mov	r0, r7
 800408e:	47c0      	blx	r8
 8004090:	3001      	adds	r0, #1
 8004092:	d103      	bne.n	800409c <_printf_common+0xac>
 8004094:	f04f 30ff 	mov.w	r0, #4294967295
 8004098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800409c:	3501      	adds	r5, #1
 800409e:	e7c6      	b.n	800402e <_printf_common+0x3e>
 80040a0:	18e1      	adds	r1, r4, r3
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	2030      	movs	r0, #48	; 0x30
 80040a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040aa:	4422      	add	r2, r4
 80040ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040b4:	3302      	adds	r3, #2
 80040b6:	e7c7      	b.n	8004048 <_printf_common+0x58>
 80040b8:	2301      	movs	r3, #1
 80040ba:	4622      	mov	r2, r4
 80040bc:	4649      	mov	r1, r9
 80040be:	4638      	mov	r0, r7
 80040c0:	47c0      	blx	r8
 80040c2:	3001      	adds	r0, #1
 80040c4:	d0e6      	beq.n	8004094 <_printf_common+0xa4>
 80040c6:	3601      	adds	r6, #1
 80040c8:	e7d9      	b.n	800407e <_printf_common+0x8e>
	...

080040cc <_printf_i>:
 80040cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040d0:	7e0f      	ldrb	r7, [r1, #24]
 80040d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040d4:	2f78      	cmp	r7, #120	; 0x78
 80040d6:	4691      	mov	r9, r2
 80040d8:	4680      	mov	r8, r0
 80040da:	460c      	mov	r4, r1
 80040dc:	469a      	mov	sl, r3
 80040de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040e2:	d807      	bhi.n	80040f4 <_printf_i+0x28>
 80040e4:	2f62      	cmp	r7, #98	; 0x62
 80040e6:	d80a      	bhi.n	80040fe <_printf_i+0x32>
 80040e8:	2f00      	cmp	r7, #0
 80040ea:	f000 80d4 	beq.w	8004296 <_printf_i+0x1ca>
 80040ee:	2f58      	cmp	r7, #88	; 0x58
 80040f0:	f000 80c0 	beq.w	8004274 <_printf_i+0x1a8>
 80040f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040fc:	e03a      	b.n	8004174 <_printf_i+0xa8>
 80040fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004102:	2b15      	cmp	r3, #21
 8004104:	d8f6      	bhi.n	80040f4 <_printf_i+0x28>
 8004106:	a101      	add	r1, pc, #4	; (adr r1, 800410c <_printf_i+0x40>)
 8004108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800410c:	08004165 	.word	0x08004165
 8004110:	08004179 	.word	0x08004179
 8004114:	080040f5 	.word	0x080040f5
 8004118:	080040f5 	.word	0x080040f5
 800411c:	080040f5 	.word	0x080040f5
 8004120:	080040f5 	.word	0x080040f5
 8004124:	08004179 	.word	0x08004179
 8004128:	080040f5 	.word	0x080040f5
 800412c:	080040f5 	.word	0x080040f5
 8004130:	080040f5 	.word	0x080040f5
 8004134:	080040f5 	.word	0x080040f5
 8004138:	0800427d 	.word	0x0800427d
 800413c:	080041a5 	.word	0x080041a5
 8004140:	08004237 	.word	0x08004237
 8004144:	080040f5 	.word	0x080040f5
 8004148:	080040f5 	.word	0x080040f5
 800414c:	0800429f 	.word	0x0800429f
 8004150:	080040f5 	.word	0x080040f5
 8004154:	080041a5 	.word	0x080041a5
 8004158:	080040f5 	.word	0x080040f5
 800415c:	080040f5 	.word	0x080040f5
 8004160:	0800423f 	.word	0x0800423f
 8004164:	682b      	ldr	r3, [r5, #0]
 8004166:	1d1a      	adds	r2, r3, #4
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	602a      	str	r2, [r5, #0]
 800416c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004174:	2301      	movs	r3, #1
 8004176:	e09f      	b.n	80042b8 <_printf_i+0x1ec>
 8004178:	6820      	ldr	r0, [r4, #0]
 800417a:	682b      	ldr	r3, [r5, #0]
 800417c:	0607      	lsls	r7, r0, #24
 800417e:	f103 0104 	add.w	r1, r3, #4
 8004182:	6029      	str	r1, [r5, #0]
 8004184:	d501      	bpl.n	800418a <_printf_i+0xbe>
 8004186:	681e      	ldr	r6, [r3, #0]
 8004188:	e003      	b.n	8004192 <_printf_i+0xc6>
 800418a:	0646      	lsls	r6, r0, #25
 800418c:	d5fb      	bpl.n	8004186 <_printf_i+0xba>
 800418e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004192:	2e00      	cmp	r6, #0
 8004194:	da03      	bge.n	800419e <_printf_i+0xd2>
 8004196:	232d      	movs	r3, #45	; 0x2d
 8004198:	4276      	negs	r6, r6
 800419a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800419e:	485a      	ldr	r0, [pc, #360]	; (8004308 <_printf_i+0x23c>)
 80041a0:	230a      	movs	r3, #10
 80041a2:	e012      	b.n	80041ca <_printf_i+0xfe>
 80041a4:	682b      	ldr	r3, [r5, #0]
 80041a6:	6820      	ldr	r0, [r4, #0]
 80041a8:	1d19      	adds	r1, r3, #4
 80041aa:	6029      	str	r1, [r5, #0]
 80041ac:	0605      	lsls	r5, r0, #24
 80041ae:	d501      	bpl.n	80041b4 <_printf_i+0xe8>
 80041b0:	681e      	ldr	r6, [r3, #0]
 80041b2:	e002      	b.n	80041ba <_printf_i+0xee>
 80041b4:	0641      	lsls	r1, r0, #25
 80041b6:	d5fb      	bpl.n	80041b0 <_printf_i+0xe4>
 80041b8:	881e      	ldrh	r6, [r3, #0]
 80041ba:	4853      	ldr	r0, [pc, #332]	; (8004308 <_printf_i+0x23c>)
 80041bc:	2f6f      	cmp	r7, #111	; 0x6f
 80041be:	bf0c      	ite	eq
 80041c0:	2308      	moveq	r3, #8
 80041c2:	230a      	movne	r3, #10
 80041c4:	2100      	movs	r1, #0
 80041c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041ca:	6865      	ldr	r5, [r4, #4]
 80041cc:	60a5      	str	r5, [r4, #8]
 80041ce:	2d00      	cmp	r5, #0
 80041d0:	bfa2      	ittt	ge
 80041d2:	6821      	ldrge	r1, [r4, #0]
 80041d4:	f021 0104 	bicge.w	r1, r1, #4
 80041d8:	6021      	strge	r1, [r4, #0]
 80041da:	b90e      	cbnz	r6, 80041e0 <_printf_i+0x114>
 80041dc:	2d00      	cmp	r5, #0
 80041de:	d04b      	beq.n	8004278 <_printf_i+0x1ac>
 80041e0:	4615      	mov	r5, r2
 80041e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80041e6:	fb03 6711 	mls	r7, r3, r1, r6
 80041ea:	5dc7      	ldrb	r7, [r0, r7]
 80041ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041f0:	4637      	mov	r7, r6
 80041f2:	42bb      	cmp	r3, r7
 80041f4:	460e      	mov	r6, r1
 80041f6:	d9f4      	bls.n	80041e2 <_printf_i+0x116>
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d10b      	bne.n	8004214 <_printf_i+0x148>
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	07de      	lsls	r6, r3, #31
 8004200:	d508      	bpl.n	8004214 <_printf_i+0x148>
 8004202:	6923      	ldr	r3, [r4, #16]
 8004204:	6861      	ldr	r1, [r4, #4]
 8004206:	4299      	cmp	r1, r3
 8004208:	bfde      	ittt	le
 800420a:	2330      	movle	r3, #48	; 0x30
 800420c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004210:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004214:	1b52      	subs	r2, r2, r5
 8004216:	6122      	str	r2, [r4, #16]
 8004218:	f8cd a000 	str.w	sl, [sp]
 800421c:	464b      	mov	r3, r9
 800421e:	aa03      	add	r2, sp, #12
 8004220:	4621      	mov	r1, r4
 8004222:	4640      	mov	r0, r8
 8004224:	f7ff fee4 	bl	8003ff0 <_printf_common>
 8004228:	3001      	adds	r0, #1
 800422a:	d14a      	bne.n	80042c2 <_printf_i+0x1f6>
 800422c:	f04f 30ff 	mov.w	r0, #4294967295
 8004230:	b004      	add	sp, #16
 8004232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	f043 0320 	orr.w	r3, r3, #32
 800423c:	6023      	str	r3, [r4, #0]
 800423e:	4833      	ldr	r0, [pc, #204]	; (800430c <_printf_i+0x240>)
 8004240:	2778      	movs	r7, #120	; 0x78
 8004242:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	6829      	ldr	r1, [r5, #0]
 800424a:	061f      	lsls	r7, r3, #24
 800424c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004250:	d402      	bmi.n	8004258 <_printf_i+0x18c>
 8004252:	065f      	lsls	r7, r3, #25
 8004254:	bf48      	it	mi
 8004256:	b2b6      	uxthmi	r6, r6
 8004258:	07df      	lsls	r7, r3, #31
 800425a:	bf48      	it	mi
 800425c:	f043 0320 	orrmi.w	r3, r3, #32
 8004260:	6029      	str	r1, [r5, #0]
 8004262:	bf48      	it	mi
 8004264:	6023      	strmi	r3, [r4, #0]
 8004266:	b91e      	cbnz	r6, 8004270 <_printf_i+0x1a4>
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	f023 0320 	bic.w	r3, r3, #32
 800426e:	6023      	str	r3, [r4, #0]
 8004270:	2310      	movs	r3, #16
 8004272:	e7a7      	b.n	80041c4 <_printf_i+0xf8>
 8004274:	4824      	ldr	r0, [pc, #144]	; (8004308 <_printf_i+0x23c>)
 8004276:	e7e4      	b.n	8004242 <_printf_i+0x176>
 8004278:	4615      	mov	r5, r2
 800427a:	e7bd      	b.n	80041f8 <_printf_i+0x12c>
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	6826      	ldr	r6, [r4, #0]
 8004280:	6961      	ldr	r1, [r4, #20]
 8004282:	1d18      	adds	r0, r3, #4
 8004284:	6028      	str	r0, [r5, #0]
 8004286:	0635      	lsls	r5, r6, #24
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	d501      	bpl.n	8004290 <_printf_i+0x1c4>
 800428c:	6019      	str	r1, [r3, #0]
 800428e:	e002      	b.n	8004296 <_printf_i+0x1ca>
 8004290:	0670      	lsls	r0, r6, #25
 8004292:	d5fb      	bpl.n	800428c <_printf_i+0x1c0>
 8004294:	8019      	strh	r1, [r3, #0]
 8004296:	2300      	movs	r3, #0
 8004298:	6123      	str	r3, [r4, #16]
 800429a:	4615      	mov	r5, r2
 800429c:	e7bc      	b.n	8004218 <_printf_i+0x14c>
 800429e:	682b      	ldr	r3, [r5, #0]
 80042a0:	1d1a      	adds	r2, r3, #4
 80042a2:	602a      	str	r2, [r5, #0]
 80042a4:	681d      	ldr	r5, [r3, #0]
 80042a6:	6862      	ldr	r2, [r4, #4]
 80042a8:	2100      	movs	r1, #0
 80042aa:	4628      	mov	r0, r5
 80042ac:	f7fb ffa0 	bl	80001f0 <memchr>
 80042b0:	b108      	cbz	r0, 80042b6 <_printf_i+0x1ea>
 80042b2:	1b40      	subs	r0, r0, r5
 80042b4:	6060      	str	r0, [r4, #4]
 80042b6:	6863      	ldr	r3, [r4, #4]
 80042b8:	6123      	str	r3, [r4, #16]
 80042ba:	2300      	movs	r3, #0
 80042bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042c0:	e7aa      	b.n	8004218 <_printf_i+0x14c>
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	462a      	mov	r2, r5
 80042c6:	4649      	mov	r1, r9
 80042c8:	4640      	mov	r0, r8
 80042ca:	47d0      	blx	sl
 80042cc:	3001      	adds	r0, #1
 80042ce:	d0ad      	beq.n	800422c <_printf_i+0x160>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	079b      	lsls	r3, r3, #30
 80042d4:	d413      	bmi.n	80042fe <_printf_i+0x232>
 80042d6:	68e0      	ldr	r0, [r4, #12]
 80042d8:	9b03      	ldr	r3, [sp, #12]
 80042da:	4298      	cmp	r0, r3
 80042dc:	bfb8      	it	lt
 80042de:	4618      	movlt	r0, r3
 80042e0:	e7a6      	b.n	8004230 <_printf_i+0x164>
 80042e2:	2301      	movs	r3, #1
 80042e4:	4632      	mov	r2, r6
 80042e6:	4649      	mov	r1, r9
 80042e8:	4640      	mov	r0, r8
 80042ea:	47d0      	blx	sl
 80042ec:	3001      	adds	r0, #1
 80042ee:	d09d      	beq.n	800422c <_printf_i+0x160>
 80042f0:	3501      	adds	r5, #1
 80042f2:	68e3      	ldr	r3, [r4, #12]
 80042f4:	9903      	ldr	r1, [sp, #12]
 80042f6:	1a5b      	subs	r3, r3, r1
 80042f8:	42ab      	cmp	r3, r5
 80042fa:	dcf2      	bgt.n	80042e2 <_printf_i+0x216>
 80042fc:	e7eb      	b.n	80042d6 <_printf_i+0x20a>
 80042fe:	2500      	movs	r5, #0
 8004300:	f104 0619 	add.w	r6, r4, #25
 8004304:	e7f5      	b.n	80042f2 <_printf_i+0x226>
 8004306:	bf00      	nop
 8004308:	080044c1 	.word	0x080044c1
 800430c:	080044d2 	.word	0x080044d2

08004310 <memmove>:
 8004310:	4288      	cmp	r0, r1
 8004312:	b510      	push	{r4, lr}
 8004314:	eb01 0402 	add.w	r4, r1, r2
 8004318:	d902      	bls.n	8004320 <memmove+0x10>
 800431a:	4284      	cmp	r4, r0
 800431c:	4623      	mov	r3, r4
 800431e:	d807      	bhi.n	8004330 <memmove+0x20>
 8004320:	1e43      	subs	r3, r0, #1
 8004322:	42a1      	cmp	r1, r4
 8004324:	d008      	beq.n	8004338 <memmove+0x28>
 8004326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800432a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800432e:	e7f8      	b.n	8004322 <memmove+0x12>
 8004330:	4402      	add	r2, r0
 8004332:	4601      	mov	r1, r0
 8004334:	428a      	cmp	r2, r1
 8004336:	d100      	bne.n	800433a <memmove+0x2a>
 8004338:	bd10      	pop	{r4, pc}
 800433a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800433e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004342:	e7f7      	b.n	8004334 <memmove+0x24>

08004344 <memcpy>:
 8004344:	440a      	add	r2, r1
 8004346:	4291      	cmp	r1, r2
 8004348:	f100 33ff 	add.w	r3, r0, #4294967295
 800434c:	d100      	bne.n	8004350 <memcpy+0xc>
 800434e:	4770      	bx	lr
 8004350:	b510      	push	{r4, lr}
 8004352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800435a:	4291      	cmp	r1, r2
 800435c:	d1f9      	bne.n	8004352 <memcpy+0xe>
 800435e:	bd10      	pop	{r4, pc}

08004360 <_realloc_r>:
 8004360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004364:	4680      	mov	r8, r0
 8004366:	4614      	mov	r4, r2
 8004368:	460e      	mov	r6, r1
 800436a:	b921      	cbnz	r1, 8004376 <_realloc_r+0x16>
 800436c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004370:	4611      	mov	r1, r2
 8004372:	f7ff bb8f 	b.w	8003a94 <_malloc_r>
 8004376:	b92a      	cbnz	r2, 8004384 <_realloc_r+0x24>
 8004378:	f7ff fc96 	bl	8003ca8 <_free_r>
 800437c:	4625      	mov	r5, r4
 800437e:	4628      	mov	r0, r5
 8004380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004384:	f000 f81b 	bl	80043be <_malloc_usable_size_r>
 8004388:	4284      	cmp	r4, r0
 800438a:	4607      	mov	r7, r0
 800438c:	d802      	bhi.n	8004394 <_realloc_r+0x34>
 800438e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004392:	d812      	bhi.n	80043ba <_realloc_r+0x5a>
 8004394:	4621      	mov	r1, r4
 8004396:	4640      	mov	r0, r8
 8004398:	f7ff fb7c 	bl	8003a94 <_malloc_r>
 800439c:	4605      	mov	r5, r0
 800439e:	2800      	cmp	r0, #0
 80043a0:	d0ed      	beq.n	800437e <_realloc_r+0x1e>
 80043a2:	42bc      	cmp	r4, r7
 80043a4:	4622      	mov	r2, r4
 80043a6:	4631      	mov	r1, r6
 80043a8:	bf28      	it	cs
 80043aa:	463a      	movcs	r2, r7
 80043ac:	f7ff ffca 	bl	8004344 <memcpy>
 80043b0:	4631      	mov	r1, r6
 80043b2:	4640      	mov	r0, r8
 80043b4:	f7ff fc78 	bl	8003ca8 <_free_r>
 80043b8:	e7e1      	b.n	800437e <_realloc_r+0x1e>
 80043ba:	4635      	mov	r5, r6
 80043bc:	e7df      	b.n	800437e <_realloc_r+0x1e>

080043be <_malloc_usable_size_r>:
 80043be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043c2:	1f18      	subs	r0, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	bfbc      	itt	lt
 80043c8:	580b      	ldrlt	r3, [r1, r0]
 80043ca:	18c0      	addlt	r0, r0, r3
 80043cc:	4770      	bx	lr
	...

080043d0 <_init>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	bf00      	nop
 80043d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	469e      	mov	lr, r3
 80043da:	4770      	bx	lr

080043dc <_fini>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	bf00      	nop
 80043e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e2:	bc08      	pop	{r3}
 80043e4:	469e      	mov	lr, r3
 80043e6:	4770      	bx	lr
