
ElevatorProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000451c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080046bc  080046bc  000146bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004778  08004778  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08004778  08004778  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004778  08004778  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800477c  0800477c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000220  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000028c  2000028c  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000096e8  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001680  00000000  00000000  000297c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006c8  00000000  00000000  0002ae48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000530  00000000  00000000  0002b510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fd0e  00000000  00000000  0002ba40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009fb2  00000000  00000000  0004b74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c0ac3  00000000  00000000  00055700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002064  00000000  00000000  001161c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00118228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046a4 	.word	0x080046a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080046a4 	.word	0x080046a4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	2b00      	cmp	r3, #0
 800090c:	db0b      	blt.n	8000926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	f003 021f 	and.w	r2, r3, #31
 8000914:	4907      	ldr	r1, [pc, #28]	; (8000934 <__NVIC_EnableIRQ+0x38>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	095b      	lsrs	r3, r3, #5
 800091c:	2001      	movs	r0, #1
 800091e:	fa00 f202 	lsl.w	r2, r0, r2
 8000922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000e100 	.word	0xe000e100

08000938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	6039      	str	r1, [r7, #0]
 8000942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	2b00      	cmp	r3, #0
 800094a:	db0a      	blt.n	8000962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	490c      	ldr	r1, [pc, #48]	; (8000984 <__NVIC_SetPriority+0x4c>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	0112      	lsls	r2, r2, #4
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	440b      	add	r3, r1
 800095c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000960:	e00a      	b.n	8000978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4908      	ldr	r1, [pc, #32]	; (8000988 <__NVIC_SetPriority+0x50>)
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	3b04      	subs	r3, #4
 8000970:	0112      	lsls	r2, r2, #4
 8000972:	b2d2      	uxtb	r2, r2
 8000974:	440b      	add	r3, r1
 8000976:	761a      	strb	r2, [r3, #24]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000e100 	.word	0xe000e100
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <UART_print>:
/**
  * @brief UART transmission function to output a string to the serial monitor
  * @param string the string literal to transmit over UART
  * @author Wouter Swinkels
 */
void UART_print(const char *string) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    if (string != NULL) {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d00a      	beq.n	80009b0 <UART_print+0x24>
        HAL_UART_Transmit(&huart2, (uint8_t *)string, strlen(string), HAL_MAX_DELAY);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff fc20 	bl	80001e0 <strlen>
 80009a0:	4603      	mov	r3, r0
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295
 80009a8:	6879      	ldr	r1, [r7, #4]
 80009aa:	4803      	ldr	r0, [pc, #12]	; (80009b8 <UART_print+0x2c>)
 80009ac:	f002 fd44 	bl	8003438 <HAL_UART_Transmit>
    }
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000088 	.word	0x20000088

080009bc <UART_print_formatted>:
  * @brief UART transmission of a string with formatting (like in `sprintf()`).
  * @param string the string literal to transmit over UART, (e.g., "distance: %d")
  * @param ... any parameters to be formatted into the string (e.g., int distance)
  * @author Wouter Swinkels
 */
void UART_print_formatted(const char *format, ...) {
 80009bc:	b40f      	push	{r0, r1, r2, r3}
 80009be:	b580      	push	{r7, lr}
 80009c0:	b092      	sub	sp, #72	; 0x48
 80009c2:	af00      	add	r7, sp, #0
    char UARTString[64]; // TODO maybe move this buffer to a const definition

    va_list args;
    va_start(args, format);
 80009c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009c8:	607b      	str	r3, [r7, #4]
    vsnprintf(UARTString, sizeof(UARTString), format, args);
 80009ca:	f107 0008 	add.w	r0, r7, #8
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80009d2:	2140      	movs	r1, #64	; 0x40
 80009d4:	f003 f9d4 	bl	8003d80 <vsniprintf>
    va_end(args);
    UART_print(UARTString); // Use UART_print to transmit
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ffd5 	bl	800098c <UART_print>
}
 80009e2:	bf00      	nop
 80009e4:	3748      	adds	r7, #72	; 0x48
 80009e6:	46bd      	mov	sp, r7
 80009e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009ec:	b004      	add	sp, #16
 80009ee:	4770      	bx	lr

080009f0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

	// Rising or falling edge trigger:
	if (TIM4->SR & TIM_SR_CC1IF) {
 80009f4:	4b3c      	ldr	r3, [pc, #240]	; (8000ae8 <TIM4_IRQHandler+0xf8>)
 80009f6:	691b      	ldr	r3, [r3, #16]
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d04c      	beq.n	8000a9a <TIM4_IRQHandler+0xaa>
		TIM4->SR &= ~TIM_SR_CC1IF;
 8000a00:	4b39      	ldr	r3, [pc, #228]	; (8000ae8 <TIM4_IRQHandler+0xf8>)
 8000a02:	691b      	ldr	r3, [r3, #16]
 8000a04:	4a38      	ldr	r2, [pc, #224]	; (8000ae8 <TIM4_IRQHandler+0xf8>)
 8000a06:	f023 0302 	bic.w	r3, r3, #2
 8000a0a:	6113      	str	r3, [r2, #16]
		if (!capture_flag && !capture_done_flag) {		     // Rising edge
 8000a0c:	4b37      	ldr	r3, [pc, #220]	; (8000aec <TIM4_IRQHandler+0xfc>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	f083 0301 	eor.w	r3, r3, #1
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d01e      	beq.n	8000a5a <TIM4_IRQHandler+0x6a>
 8000a1c:	4b34      	ldr	r3, [pc, #208]	; (8000af0 <TIM4_IRQHandler+0x100>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	f083 0301 	eor.w	r3, r3, #1
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d016      	beq.n	8000a5a <TIM4_IRQHandler+0x6a>
			thigh = TIM4->CCR1;          // Store time of rising edge
 8000a2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <TIM4_IRQHandler+0xf8>)
 8000a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a30:	4a30      	ldr	r2, [pc, #192]	; (8000af4 <TIM4_IRQHandler+0x104>)
 8000a32:	6013      	str	r3, [r2, #0]
			TIM4->CCER ^= TIM_CCER_CC1P; // Switch to capturing falling edge
 8000a34:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <TIM4_IRQHandler+0xf8>)
 8000a36:	6a1b      	ldr	r3, [r3, #32]
 8000a38:	4a2b      	ldr	r2, [pc, #172]	; (8000ae8 <TIM4_IRQHandler+0xf8>)
 8000a3a:	f083 0302 	eor.w	r3, r3, #2
 8000a3e:	6213      	str	r3, [r2, #32]
			capture_flag = true;
 8000a40:	4b2a      	ldr	r3, [pc, #168]	; (8000aec <TIM4_IRQHandler+0xfc>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
			overflow_count = 0;          // Reset overflow, as this is a new time capture
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <TIM4_IRQHandler+0x108>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
			capture_done_flag = false;
 8000a4c:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <TIM4_IRQHandler+0x100>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
			capture_flag = true;
 8000a52:	4b26      	ldr	r3, [pc, #152]	; (8000aec <TIM4_IRQHandler+0xfc>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]
 8000a58:	e01f      	b.n	8000a9a <TIM4_IRQHandler+0xaa>
		} else if (capture_flag && !capture_done_flag) { // Falling edge
 8000a5a:	4b24      	ldr	r3, [pc, #144]	; (8000aec <TIM4_IRQHandler+0xfc>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d01a      	beq.n	8000a9a <TIM4_IRQHandler+0xaa>
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <TIM4_IRQHandler+0x100>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	f083 0301 	eor.w	r3, r3, #1
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d012      	beq.n	8000a9a <TIM4_IRQHandler+0xaa>
			tlow = TIM4->CCR1;           // Store time of the falling edge using CCR
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <TIM4_IRQHandler+0xf8>)
 8000a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a78:	4a20      	ldr	r2, [pc, #128]	; (8000afc <TIM4_IRQHandler+0x10c>)
 8000a7a:	6013      	str	r3, [r2, #0]
			capture_flag = false;
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <TIM4_IRQHandler+0xfc>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
			capture_done_flag = true;
 8000a82:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <TIM4_IRQHandler+0x100>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
			TIM4->CCER ^= TIM_CCER_CC1P; // Switch back to capture the rising edge
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <TIM4_IRQHandler+0xf8>)
 8000a8a:	6a1b      	ldr	r3, [r3, #32]
 8000a8c:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <TIM4_IRQHandler+0xf8>)
 8000a8e:	f083 0302 	eor.w	r3, r3, #2
 8000a92:	6213      	str	r3, [r2, #32]
			capture_done_flag = true; // should be set false in other task handler.
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <TIM4_IRQHandler+0x100>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
		}
	}

  // Overflow of TIM4, increment the overflow count
  // to ensure proper calculation of time duration.
	if (TIM4->SR & TIM_SR_UIF) {
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <TIM4_IRQHandler+0xf8>)
 8000a9c:	691b      	ldr	r3, [r3, #16]
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d01a      	beq.n	8000adc <TIM4_IRQHandler+0xec>
		TIM4->SR &= ~TIM_SR_UIF;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <TIM4_IRQHandler+0xf8>)
 8000aa8:	691b      	ldr	r3, [r3, #16]
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <TIM4_IRQHandler+0xf8>)
 8000aac:	f023 0301 	bic.w	r3, r3, #1
 8000ab0:	6113      	str	r3, [r2, #16]
		if (capture_flag && !capture_done_flag) {
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <TIM4_IRQHandler+0xfc>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00f      	beq.n	8000adc <TIM4_IRQHandler+0xec>
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <TIM4_IRQHandler+0x100>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f083 0301 	eor.w	r3, r3, #1
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d007      	beq.n	8000adc <TIM4_IRQHandler+0xec>
			overflow_flag = true;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <TIM4_IRQHandler+0x110>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
			overflow_count++;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <TIM4_IRQHandler+0x108>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <TIM4_IRQHandler+0x108>)
 8000ada:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40000800 	.word	0x40000800
 8000aec:	20000110 	.word	0x20000110
 8000af0:	20000111 	.word	0x20000111
 8000af4:	20000114 	.word	0x20000114
 8000af8:	2000011c 	.word	0x2000011c
 8000afc:	20000118 	.word	0x20000118
 8000b00:	20000112 	.word	0x20000112

08000b04 <TIM3_Configuration>:

void TIM3_Configuration(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000b08:	4b29      	ldr	r3, [pc, #164]	; (8000bb0 <TIM3_Configuration+0xac>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	4a28      	ldr	r2, [pc, #160]	; (8000bb0 <TIM3_Configuration+0xac>)
 8000b0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b12:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000b14:	4b26      	ldr	r3, [pc, #152]	; (8000bb0 <TIM3_Configuration+0xac>)
 8000b16:	69db      	ldr	r3, [r3, #28]
 8000b18:	4a25      	ldr	r2, [pc, #148]	; (8000bb0 <TIM3_Configuration+0xac>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	61d3      	str	r3, [r2, #28]

    GPIOB->MODER &= ~(GPIO_MODER_MODER5);
 8000b20:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <TIM3_Configuration+0xb0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a23      	ldr	r2, [pc, #140]	; (8000bb4 <TIM3_Configuration+0xb0>)
 8000b26:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000b2a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODER5_1;
 8000b2c:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <TIM3_Configuration+0xb0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a20      	ldr	r2, [pc, #128]	; (8000bb4 <TIM3_Configuration+0xb0>)
 8000b32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b36:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[0] &= ~GPIO_AFRL_AFRL5;
 8000b38:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <TIM3_Configuration+0xb0>)
 8000b3a:	6a1b      	ldr	r3, [r3, #32]
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <TIM3_Configuration+0xb0>)
 8000b3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000b42:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (0b0010 << GPIO_AFRL_AFRL5_Pos);
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <TIM3_Configuration+0xb0>)
 8000b46:	6a1b      	ldr	r3, [r3, #32]
 8000b48:	4a1a      	ldr	r2, [pc, #104]	; (8000bb4 <TIM3_Configuration+0xb0>)
 8000b4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b4e:	6213      	str	r3, [r2, #32]

    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <TIM3_Configuration+0xac>)
 8000b52:	69db      	ldr	r3, [r3, #28]
 8000b54:	4a16      	ldr	r2, [pc, #88]	; (8000bb0 <TIM3_Configuration+0xac>)
 8000b56:	f043 0302 	orr.w	r3, r3, #2
 8000b5a:	61d3      	str	r3, [r2, #28]
    TIM3->PSC = 71;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <TIM3_Configuration+0xb4>)
 8000b5e:	2247      	movs	r2, #71	; 0x47
 8000b60:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 19999;         // Set auto-reload value (period of PWM signal)
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <TIM3_Configuration+0xb4>)
 8000b64:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000b68:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->CCMR1 &= ~(TIM_CCMR1_OC2M);
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <TIM3_Configuration+0xb4>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <TIM3_Configuration+0xb4>)
 8000b70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000b78:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= (TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2);
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <TIM3_Configuration+0xb4>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <TIM3_Configuration+0xb4>)
 8000b80:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000b84:	6193      	str	r3, [r2, #24]
    TIM3->CCER |= TIM_CCER_CC2E;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <TIM3_Configuration+0xb4>)
 8000b88:	6a1b      	ldr	r3, [r3, #32]
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <TIM3_Configuration+0xb4>)
 8000b8c:	f043 0310 	orr.w	r3, r3, #16
 8000b90:	6213      	str	r3, [r2, #32]
    TIM3->CR1 |= TIM_CR1_CEN;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <TIM3_Configuration+0xb4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <TIM3_Configuration+0xb4>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6013      	str	r3, [r2, #0]

    TIM3->CCR1 = 1500; // should set the signal to spec. 1.5ms over 20ms total
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <TIM3_Configuration+0xb4>)
 8000ba0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000ba4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	48000400 	.word	0x48000400
 8000bb8:	40000400 	.word	0x40000400

08000bbc <Timer4_Init>:
  * @details
  * @param None
  * @retval None
  */

void Timer4_Init(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0

    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;	// Enable clock for GPIOB
 8000bc0:	4b3d      	ldr	r3, [pc, #244]	; (8000cb8 <Timer4_Init+0xfc>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	4a3c      	ldr	r2, [pc, #240]	; (8000cb8 <Timer4_Init+0xfc>)
 8000bc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bca:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN; // Enable APB clock for TIM4
 8000bcc:	4b3a      	ldr	r3, [pc, #232]	; (8000cb8 <Timer4_Init+0xfc>)
 8000bce:	69db      	ldr	r3, [r3, #28]
 8000bd0:	4a39      	ldr	r2, [pc, #228]	; (8000cb8 <Timer4_Init+0xfc>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	61d3      	str	r3, [r2, #28]


    GPIOB->MODER &= ~(GPIO_MODER_MODER6); // Configure PB6 to AF mode
 8000bd8:	4b38      	ldr	r3, [pc, #224]	; (8000cbc <Timer4_Init+0x100>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a37      	ldr	r2, [pc, #220]	; (8000cbc <Timer4_Init+0x100>)
 8000bde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000be2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODER6_1;
 8000be4:	4b35      	ldr	r3, [pc, #212]	; (8000cbc <Timer4_Init+0x100>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a34      	ldr	r2, [pc, #208]	; (8000cbc <Timer4_Init+0x100>)
 8000bea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bee:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] &= ~(0xFU << (4U * 6U)); // Configure AF mapping to PB6
 8000bf0:	4b32      	ldr	r3, [pc, #200]	; (8000cbc <Timer4_Init+0x100>)
 8000bf2:	6a1b      	ldr	r3, [r3, #32]
 8000bf4:	4a31      	ldr	r2, [pc, #196]	; (8000cbc <Timer4_Init+0x100>)
 8000bf6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000bfa:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (2U << (4U * 6U));
 8000bfc:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <Timer4_Init+0x100>)
 8000bfe:	6a1b      	ldr	r3, [r3, #32]
 8000c00:	4a2e      	ldr	r2, [pc, #184]	; (8000cbc <Timer4_Init+0x100>)
 8000c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c06:	6213      	str	r3, [r2, #32]


	TIM4->PSC = 71; // Configure PSC for 1MHz clock (72MHZ/72=1MHz)
 8000c08:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <Timer4_Init+0x104>)
 8000c0a:	2247      	movs	r2, #71	; 0x47
 8000c0c:	629a      	str	r2, [r3, #40]	; 0x28

	// Set TIM4 to Capture Compare input (see CCCER and CCMR entries in datasheet)
	TIM4->CCMR1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_IC1PSC | TIM_CCMR1_IC1F);
 8000c0e:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <Timer4_Init+0x104>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	4a2b      	ldr	r2, [pc, #172]	; (8000cc0 <Timer4_Init+0x104>)
 8000c14:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c18:	6193      	str	r3, [r2, #24]
	TIM4->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000c1a:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <Timer4_Init+0x104>)
 8000c1c:	6a1b      	ldr	r3, [r3, #32]
 8000c1e:	4a28      	ldr	r2, [pc, #160]	; (8000cc0 <Timer4_Init+0x104>)
 8000c20:	f023 030b 	bic.w	r3, r3, #11
 8000c24:	6213      	str	r3, [r2, #32]
	TIM4->CCMR1 &= ~(TIM_CCMR1_CC1S);
 8000c26:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <Timer4_Init+0x104>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	4a25      	ldr	r2, [pc, #148]	; (8000cc0 <Timer4_Init+0x104>)
 8000c2c:	f023 0303 	bic.w	r3, r3, #3
 8000c30:	6193      	str	r3, [r2, #24]

	TIM4->CCMR1 |= TIM_CCMR1_CC1S_0; // Set to input mode
 8000c32:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <Timer4_Init+0x104>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	4a22      	ldr	r2, [pc, #136]	; (8000cc0 <Timer4_Init+0x104>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6193      	str	r3, [r2, #24]

	TIM4->CCER |= TIM_CCER_CC1E;	// Enable capture compare
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <Timer4_Init+0x104>)
 8000c40:	6a1b      	ldr	r3, [r3, #32]
 8000c42:	4a1f      	ldr	r2, [pc, #124]	; (8000cc0 <Timer4_Init+0x104>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~TIM_CCER_CC1NP;  // Set to capture both rising and falling
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <Timer4_Init+0x104>)
 8000c4c:	6a1b      	ldr	r3, [r3, #32]
 8000c4e:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <Timer4_Init+0x104>)
 8000c50:	f023 0308 	bic.w	r3, r3, #8
 8000c54:	6213      	str	r3, [r2, #32]

	TIM4->DIER &= ~(TIM_DIER_CC1IE | TIM_DIER_CC1DE);
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <Timer4_Init+0x104>)
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <Timer4_Init+0x104>)
 8000c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c60:	f023 0302 	bic.w	r3, r3, #2
 8000c64:	60d3      	str	r3, [r2, #12]
	TIM4->DIER |= TIM_DIER_CC1IE;	// Enable interrupt for capture channel 1
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <Timer4_Init+0x104>)
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	4a15      	ldr	r2, [pc, #84]	; (8000cc0 <Timer4_Init+0x104>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	60d3      	str	r3, [r2, #12]
	TIM4->DIER |= TIM_DIER_UIE;		// Enable update interrupt for overflow capture
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <Timer4_Init+0x104>)
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <Timer4_Init+0x104>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	60d3      	str	r3, [r2, #12]

	// Enable TIM4 for channel 1 (by setting Control Register 1 values):
	TIM4->CR1 &= ~(TIM_CR1_CEN | TIM_CR1_OPM | TIM_CR1_URS | TIM_CR1_UDIS |
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <Timer4_Init+0x104>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <Timer4_Init+0x104>)
 8000c84:	f423 630e 	bic.w	r3, r3, #2272	; 0x8e0
 8000c88:	f023 030f 	bic.w	r3, r3, #15
 8000c8c:	6013      	str	r3, [r2, #0]
				   TIM_CR1_CMS | TIM_CR1_ARPE | TIM_CR1_UIFREMAP);
	TIM4->CR1 &= ~TIM_CR1_DIR;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <Timer4_Init+0x104>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <Timer4_Init+0x104>)
 8000c94:	f023 0310 	bic.w	r3, r3, #16
 8000c98:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |= TIM_CR1_CEN;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <Timer4_Init+0x104>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <Timer4_Init+0x104>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6013      	str	r3, [r2, #0]

	// Enabe the interrupt service routine for TIm4:
	NVIC_EnableIRQ(TIM4_IRQn);
 8000ca6:	201e      	movs	r0, #30
 8000ca8:	f7ff fe28 	bl	80008fc <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM4_IRQn, 0);
 8000cac:	2100      	movs	r1, #0
 8000cae:	201e      	movs	r0, #30
 8000cb0:	f7ff fe42 	bl	8000938 <__NVIC_SetPriority>
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	48000400 	.word	0x48000400
 8000cc0:	40000800 	.word	0x40000800

08000cc4 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cca:	f000 fbc3 	bl	8001454 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8000cce:	f000 f9c5 	bl	800105c <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd2:	f000 fa51 	bl	8001178 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cd6:	f000 fa1f 	bl	8001118 <MX_USART2_UART_Init>

  Timer4_Init(); // Initialise TIM4 with input capture on PB6
 8000cda:	f7ff ff6f 	bl	8000bbc <Timer4_Init>
  TIM3_Configuration();
 8000cde:	f7ff ff11 	bl	8000b04 <TIM3_Configuration>


  /* USER CODE END 2 */

  static int incrementer = 0;
  turns = 2; // Number of turns before reaching the final angle (negative for reverse direction)
 8000ce2:	4b8a      	ldr	r3, [pc, #552]	; (8000f0c <main+0x248>)
 8000ce4:	2202      	movs	r2, #2
 8000ce6:	601a      	str	r2, [r3, #0]
  float finalAngle = targetAngle; // Final target angle
 8000ce8:	4b89      	ldr	r3, [pc, #548]	; (8000f10 <main+0x24c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	ee07 3a90 	vmov	s15, r3
 8000cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf4:	edc7 7a03 	vstr	s15, [r7, #12]
  totalTargetAngle = turns * UNITS_FULL_CIRCLE + finalAngle; // Total target angle including turns
 8000cf8:	4b84      	ldr	r3, [pc, #528]	; (8000f0c <main+0x248>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000d00:	fb02 f303 	mul.w	r3, r2, r3
 8000d04:	ee07 3a90 	vmov	s15, r3
 8000d08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d14:	4b7f      	ldr	r3, [pc, #508]	; (8000f14 <main+0x250>)
 8000d16:	edc3 7a00 	vstr	s15, [r3]


  while (1) {
	  //UART_print_formatted("test string %d", incrementer);
	  incrementer++;
 8000d1a:	4b7f      	ldr	r3, [pc, #508]	; (8000f18 <main+0x254>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	4a7d      	ldr	r2, [pc, #500]	; (8000f18 <main+0x254>)
 8000d22:	6013      	str	r3, [r2, #0]
	  HAL_Delay(100);
 8000d24:	2064      	movs	r0, #100	; 0x64
 8000d26:	f000 fbfb 	bl	8001520 <HAL_Delay>
	  powerOutput = myPD(totalTargetAngle);
 8000d2a:	4b7a      	ldr	r3, [pc, #488]	; (8000f14 <main+0x250>)
 8000d2c:	edd3 7a00 	vldr	s15, [r3]
 8000d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d34:	ee17 0a90 	vmov	r0, s15
 8000d38:	f000 f922 	bl	8000f80 <myPD>
 8000d3c:	eef0 7a40 	vmov.f32	s15, s0
 8000d40:	4b76      	ldr	r3, [pc, #472]	; (8000f1c <main+0x258>)
 8000d42:	edc3 7a00 	vstr	s15, [r3]

	  // Step 1. Remeasure the current angle of the servo motor
	  if (capture_done_flag) {
 8000d46:	4b76      	ldr	r3, [pc, #472]	; (8000f20 <main+0x25c>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d05c      	beq.n	8000e0a <main+0x146>
		  UART_print("Capture done! ");
 8000d50:	4874      	ldr	r0, [pc, #464]	; (8000f24 <main+0x260>)
 8000d52:	f7ff fe1b 	bl	800098c <UART_print>
		  uint32_t ticks = ((tlow-thigh) + (overflow_count* (TIMER_MAX_VALUE + 1))) % (TIMER_MAX_VALUE + 1);
 8000d56:	4b74      	ldr	r3, [pc, #464]	; (8000f28 <main+0x264>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4b74      	ldr	r3, [pc, #464]	; (8000f2c <main+0x268>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	1ad1      	subs	r1, r2, r3
 8000d60:	4b73      	ldr	r3, [pc, #460]	; (8000f30 <main+0x26c>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4613      	mov	r3, r2
 8000d66:	041b      	lsls	r3, r3, #16
 8000d68:	4413      	add	r3, r2
 8000d6a:	18ca      	adds	r2, r1, r3
 8000d6c:	4b71      	ldr	r3, [pc, #452]	; (8000f34 <main+0x270>)
 8000d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d72:	0c19      	lsrs	r1, r3, #16
 8000d74:	460b      	mov	r3, r1
 8000d76:	041b      	lsls	r3, r3, #16
 8000d78:	440b      	add	r3, r1
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	60bb      	str	r3, [r7, #8]
		  UART_print_formatted("ticks = %d\n", ticks);
 8000d7e:	68b9      	ldr	r1, [r7, #8]
 8000d80:	486d      	ldr	r0, [pc, #436]	; (8000f38 <main+0x274>)
 8000d82:	f7ff fe1b 	bl	80009bc <UART_print_formatted>

		  float PWM_duty_cycle = ((ticks) / (1100.0f)) * 100.0f;
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	ee07 3a90 	vmov	s15, r3
 8000d8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d90:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8000f3c <main+0x278>
 8000d94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d98:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8000f40 <main+0x27c>
 8000d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000da0:	edc7 7a01 	vstr	s15, [r7, #4]
		  UART_print_formatted("dc = %d\n", (int)PWM_duty_cycle);
 8000da4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dac:	ee17 1a90 	vmov	r1, s15
 8000db0:	4864      	ldr	r0, [pc, #400]	; (8000f44 <main+0x280>)
 8000db2:	f7ff fe03 	bl	80009bc <UART_print_formatted>
		  newTheta = (UNITS_FULL_CIRCLE - 1) - ((PWM_duty_cycle - dcMin) * UNITS_FULL_CIRCLE) / (dcMax - dcMin + 1);
 8000db6:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8000f48 <main+0x284>
 8000dba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000dc2:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8000f4c <main+0x288>
 8000dc6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000dca:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8000f40 <main+0x27c>
 8000dce:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8000f48 <main+0x284>
 8000dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000dda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000de2:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8000f50 <main+0x28c>
 8000de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dea:	4b5a      	ldr	r3, [pc, #360]	; (8000f54 <main+0x290>)
 8000dec:	edc3 7a00 	vstr	s15, [r3]
		  UART_print_formatted("theta = %d\n", (int)newTheta);
 8000df0:	4b58      	ldr	r3, [pc, #352]	; (8000f54 <main+0x290>)
 8000df2:	edd3 7a00 	vldr	s15, [r3]
 8000df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dfa:	ee17 1a90 	vmov	r1, s15
 8000dfe:	4856      	ldr	r0, [pc, #344]	; (8000f58 <main+0x294>)
 8000e00:	f7ff fddc 	bl	80009bc <UART_print_formatted>
		  capture_done_flag = false;
 8000e04:	4b46      	ldr	r3, [pc, #280]	; (8000f20 <main+0x25c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
	  }

	  // Step 2. Move the elevator accordingly towards the desired angle
	  // 		 by setting the the power, and PID check the angle difference
	  //	     as in the step deviation.
	  HAL_Delay(20);
 8000e0a:	2014      	movs	r0, #20
 8000e0c:	f000 fb88 	bl	8001520 <HAL_Delay>
	  if (false) continue;
	  if (up) {
 8000e10:	4b52      	ldr	r3, [pc, #328]	; (8000f5c <main+0x298>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d03b      	beq.n	8000e90 <main+0x1cc>
	        errorAngle = totalTargetAngle - ((turns * UNITS_FULL_CIRCLE) + newTheta);
 8000e18:	4b3e      	ldr	r3, [pc, #248]	; (8000f14 <main+0x250>)
 8000e1a:	ed93 7a00 	vldr	s14, [r3]
 8000e1e:	4b3b      	ldr	r3, [pc, #236]	; (8000f0c <main+0x248>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000e26:	fb02 f303 	mul.w	r3, r2, r3
 8000e2a:	ee07 3a90 	vmov	s15, r3
 8000e2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e32:	4b48      	ldr	r3, [pc, #288]	; (8000f54 <main+0x290>)
 8000e34:	edd3 7a00 	vldr	s15, [r3]
 8000e38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e40:	4b47      	ldr	r3, [pc, #284]	; (8000f60 <main+0x29c>)
 8000e42:	edc3 7a00 	vstr	s15, [r3]
	        UART_print_formatted("Current error angle is: %d", (int)errorAngle);
 8000e46:	4b46      	ldr	r3, [pc, #280]	; (8000f60 <main+0x29c>)
 8000e48:	edd3 7a00 	vldr	s15, [r3]
 8000e4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e50:	ee17 1a90 	vmov	r1, s15
 8000e54:	4843      	ldr	r0, [pc, #268]	; (8000f64 <main+0x2a0>)
 8000e56:	f7ff fdb1 	bl	80009bc <UART_print_formatted>
	        if (errorAngle > 0) {
 8000e5a:	4b41      	ldr	r3, [pc, #260]	; (8000f60 <main+0x29c>)
 8000e5c:	edd3 7a00 	vldr	s15, [r3]
 8000e60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e68:	dd3e      	ble.n	8000ee8 <main+0x224>
				  if (powerOutput > 4) {
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <main+0x258>)
 8000e6c:	edd3 7a00 	vldr	s15, [r3]
 8000e70:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7c:	dd03      	ble.n	8000e86 <main+0x1c2>
					  offset = 30;
 8000e7e:	4b3a      	ldr	r3, [pc, #232]	; (8000f68 <main+0x2a4>)
 8000e80:	4a3a      	ldr	r2, [pc, #232]	; (8000f6c <main+0x2a8>)
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	e030      	b.n	8000ee8 <main+0x224>
				  } else {
					  offset = 0;
 8000e86:	4b38      	ldr	r3, [pc, #224]	; (8000f68 <main+0x2a4>)
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	e02b      	b.n	8000ee8 <main+0x224>
				  }
	        }

	      } else {
	        errorAngle = (targetAngle % UNITS_FULL_CIRCLE) - newTheta;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <main+0x24c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a36      	ldr	r2, [pc, #216]	; (8000f70 <main+0x2ac>)
 8000e96:	fb82 1203 	smull	r1, r2, r2, r3
 8000e9a:	441a      	add	r2, r3
 8000e9c:	1211      	asrs	r1, r2, #8
 8000e9e:	17da      	asrs	r2, r3, #31
 8000ea0:	1a8a      	subs	r2, r1, r2
 8000ea2:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000ea6:	fb01 f202 	mul.w	r2, r1, r2
 8000eaa:	1a9a      	subs	r2, r3, r2
 8000eac:	ee07 2a90 	vmov	s15, r2
 8000eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <main+0x290>)
 8000eb6:	edd3 7a00 	vldr	s15, [r3]
 8000eba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ebe:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <main+0x29c>)
 8000ec0:	edc3 7a00 	vstr	s15, [r3]
	        if (powerOutput > 4) {
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <main+0x258>)
 8000ec6:	edd3 7a00 	vldr	s15, [r3]
 8000eca:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed6:	dd03      	ble.n	8000ee0 <main+0x21c>
	        	offset = -40;
 8000ed8:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <main+0x2a4>)
 8000eda:	4a26      	ldr	r2, [pc, #152]	; (8000f74 <main+0x2b0>)
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	e003      	b.n	8000ee8 <main+0x224>
	        } else {
	        	offset = 0;
 8000ee0:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <main+0x2a4>)
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
	        }
	      }

	      TIM3->CCR2 = 1500 + offset; // Apply turning speed elevator servo
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <main+0x2a4>)
 8000eea:	edd3 7a00 	vldr	s15, [r3]
 8000eee:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000f78 <main+0x2b4>
 8000ef2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <main+0x2b8>)
 8000ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000efc:	ee17 2a90 	vmov	r2, s15
 8000f00:	639a      	str	r2, [r3, #56]	; 0x38
	      HAL_Delay(20);
 8000f02:	2014      	movs	r0, #20
 8000f04:	f000 fb0c 	bl	8001520 <HAL_Delay>
	  incrementer++;
 8000f08:	e707      	b.n	8000d1a <main+0x56>
 8000f0a:	bf00      	nop
 8000f0c:	20000124 	.word	0x20000124
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000004 	.word	0x20000004
 8000f18:	20000138 	.word	0x20000138
 8000f1c:	20000128 	.word	0x20000128
 8000f20:	20000111 	.word	0x20000111
 8000f24:	080046bc 	.word	0x080046bc
 8000f28:	20000118 	.word	0x20000118
 8000f2c:	20000114 	.word	0x20000114
 8000f30:	2000011c 	.word	0x2000011c
 8000f34:	ffff0001 	.word	0xffff0001
 8000f38:	080046cc 	.word	0x080046cc
 8000f3c:	44898000 	.word	0x44898000
 8000f40:	42c80000 	.word	0x42c80000
 8000f44:	080046d8 	.word	0x080046d8
 8000f48:	00000000 	.word	0x00000000
 8000f4c:	43b40000 	.word	0x43b40000
 8000f50:	43b38000 	.word	0x43b38000
 8000f54:	20000130 	.word	0x20000130
 8000f58:	080046e4 	.word	0x080046e4
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000120 	.word	0x20000120
 8000f64:	080046f0 	.word	0x080046f0
 8000f68:	2000012c 	.word	0x2000012c
 8000f6c:	41f00000 	.word	0x41f00000
 8000f70:	b60b60b7 	.word	0xb60b60b7
 8000f74:	c2200000 	.word	0xc2200000
 8000f78:	44bb8000 	.word	0x44bb8000
 8000f7c:	40000400 	.word	0x40000400

08000f80 <myPD>:


  }
}
float myPD(uint32_t totalTargetAngle) {
 8000f80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8000f8a:	f000 fabd 	bl	8001508 <HAL_GetTick>
 8000f8e:	6178      	str	r0, [r7, #20]
   // dt = currentTime - previousTime;
   // previousTime = currentTime;

    currentAngle = (fabs(turns) * UNITS_FULL_CIRCLE) + newTheta;
 8000f90:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <myPD+0xc8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fbf7 	bl	8000788 <__aeabi_i2d>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4690      	mov	r8, r2
 8000fa0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	4b28      	ldr	r3, [pc, #160]	; (800104c <myPD+0xcc>)
 8000faa:	4640      	mov	r0, r8
 8000fac:	4649      	mov	r1, r9
 8000fae:	f7ff f96f 	bl	8000290 <__aeabi_dmul>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4690      	mov	r8, r2
 8000fb8:	4699      	mov	r9, r3
 8000fba:	4b25      	ldr	r3, [pc, #148]	; (8001050 <myPD+0xd0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fbf4 	bl	80007ac <__aeabi_f2d>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4640      	mov	r0, r8
 8000fca:	4649      	mov	r1, r9
 8000fcc:	f7ff fa90 	bl	80004f0 <__adddf3>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f7ff fc40 	bl	800085c <__aeabi_d2f>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4a1d      	ldr	r2, [pc, #116]	; (8001054 <myPD+0xd4>)
 8000fe0:	6013      	str	r3, [r2, #0]
    int error = totalTargetAngle - currentAngle;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <myPD+0xd4>)
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ffa:	ee17 3a90 	vmov	r3, s15
 8000ffe:	613b      	str	r3, [r7, #16]
    //float derivative = error - prevError; // Calculate the derivative term
    //prevError = error;

    float power = fabs(error) * KP; // Add the derivative term
 8001000:	6938      	ldr	r0, [r7, #16]
 8001002:	f7ff fbc1 	bl	8000788 <__aeabi_i2d>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4614      	mov	r4, r2
 800100c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <myPD+0xd8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fbb7 	bl	8000788 <__aeabi_i2d>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4620      	mov	r0, r4
 8001020:	4629      	mov	r1, r5
 8001022:	f7ff f935 	bl	8000290 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4610      	mov	r0, r2
 800102c:	4619      	mov	r1, r3
 800102e:	f7ff fc15 	bl	800085c <__aeabi_d2f>
 8001032:	4603      	mov	r3, r0
 8001034:	60fb      	str	r3, [r7, #12]
    return power;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	ee07 3a90 	vmov	s15, r3
}
 800103c:	eeb0 0a67 	vmov.f32	s0, s15
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001048:	20000124 	.word	0x20000124
 800104c:	40768000 	.word	0x40768000
 8001050:	20000130 	.word	0x20000130
 8001054:	20000134 	.word	0x20000134
 8001058:	2000000c 	.word	0x2000000c

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b0a6      	sub	sp, #152	; 0x98
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001066:	2228      	movs	r2, #40	; 0x28
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f002 fe96 	bl	8003d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2258      	movs	r2, #88	; 0x58
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f002 fe88 	bl	8003d9c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800108c:	2302      	movs	r3, #2
 800108e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001090:	2301      	movs	r3, #1
 8001092:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001094:	2310      	movs	r3, #16
 8001096:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109a:	2302      	movs	r3, #2
 800109c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fcdc 	bl	8001a78 <HAL_RCC_OscConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010c6:	f000 f8bd 	bl	8001244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	230f      	movs	r3, #15
 80010cc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ce:	2302      	movs	r3, #2
 80010d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010e4:	2102      	movs	r1, #2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fd1a 	bl	8002b20 <HAL_RCC_ClockConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010f2:	f000 f8a7 	bl	8001244 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010f6:	2302      	movs	r3, #2
 80010f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4618      	mov	r0, r3
 8001102:	f001 ff2d 	bl	8002f60 <HAL_RCCEx_PeriphCLKConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800110c:	f000 f89a 	bl	8001244 <Error_Handler>
  }
}
 8001110:	bf00      	nop
 8001112:	3798      	adds	r7, #152	; 0x98
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800111e:	4a15      	ldr	r2, [pc, #84]	; (8001174 <MX_USART2_UART_Init+0x5c>)
 8001120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001124:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800113e:	220c      	movs	r2, #12
 8001140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800115c:	f002 f91e 	bl	800339c <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001166:	f000 f86d 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000088 	.word	0x20000088
 8001174:	40004400 	.word	0x40004400

08001178 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	4b2b      	ldr	r3, [pc, #172]	; (800123c <MX_GPIO_Init+0xc4>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	4a2a      	ldr	r2, [pc, #168]	; (800123c <MX_GPIO_Init+0xc4>)
 8001194:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001198:	6153      	str	r3, [r2, #20]
 800119a:	4b28      	ldr	r3, [pc, #160]	; (800123c <MX_GPIO_Init+0xc4>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a6:	4b25      	ldr	r3, [pc, #148]	; (800123c <MX_GPIO_Init+0xc4>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	4a24      	ldr	r2, [pc, #144]	; (800123c <MX_GPIO_Init+0xc4>)
 80011ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011b0:	6153      	str	r3, [r2, #20]
 80011b2:	4b22      	ldr	r3, [pc, #136]	; (800123c <MX_GPIO_Init+0xc4>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_GPIO_Init+0xc4>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	4a1e      	ldr	r2, [pc, #120]	; (800123c <MX_GPIO_Init+0xc4>)
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	6153      	str	r3, [r2, #20]
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_GPIO_Init+0xc4>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_GPIO_Init+0xc4>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	4a18      	ldr	r2, [pc, #96]	; (800123c <MX_GPIO_Init+0xc4>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e0:	6153      	str	r3, [r2, #20]
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_GPIO_Init+0xc4>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2120      	movs	r1, #32
 80011f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f6:	f000 fc27 	bl	8001a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001200:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	480b      	ldr	r0, [pc, #44]	; (8001240 <MX_GPIO_Init+0xc8>)
 8001212:	f000 fa8f 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001216:	2320      	movs	r3, #32
 8001218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001230:	f000 fa80 	bl	8001734 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40021000 	.word	0x40021000
 8001240:	48000800 	.word	0x48000800

08001244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001248:	b672      	cpsid	i
}
 800124a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800124c:	e7fe      	b.n	800124c <Error_Handler+0x8>
	...

08001250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <HAL_MspInit+0x44>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <HAL_MspInit+0x44>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6193      	str	r3, [r2, #24]
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <HAL_MspInit+0x44>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_MspInit+0x44>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a08      	ldr	r2, [pc, #32]	; (8001294 <HAL_MspInit+0x44>)
 8001274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001278:	61d3      	str	r3, [r2, #28]
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_MspInit+0x44>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001286:	2007      	movs	r0, #7
 8001288:	f000 fa20 	bl	80016cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021000 	.word	0x40021000

08001298 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a17      	ldr	r2, [pc, #92]	; (8001314 <HAL_UART_MspInit+0x7c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d128      	bne.n	800130c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_UART_MspInit+0x80>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4a16      	ldr	r2, [pc, #88]	; (8001318 <HAL_UART_MspInit+0x80>)
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c4:	61d3      	str	r3, [r2, #28]
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_UART_MspInit+0x80>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <HAL_UART_MspInit+0x80>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	4a10      	ldr	r2, [pc, #64]	; (8001318 <HAL_UART_MspInit+0x80>)
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012dc:	6153      	str	r3, [r2, #20]
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <HAL_UART_MspInit+0x80>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012ea:	230c      	movs	r3, #12
 80012ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012fa:	2307      	movs	r3, #7
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001308:	f000 fa14 	bl	8001734 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40004400 	.word	0x40004400
 8001318:	40021000 	.word	0x40021000

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <NMI_Handler+0x4>

08001322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <MemManage_Handler+0x4>

0800132e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <UsageFault_Handler+0x4>

0800133a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001368:	f000 f8ba 	bl	80014e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}

08001370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <_sbrk+0x5c>)
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <_sbrk+0x60>)
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <_sbrk+0x64>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <_sbrk+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	429a      	cmp	r2, r3
 800139e:	d207      	bcs.n	80013b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a0:	f002 fd04 	bl	8003dac <__errno>
 80013a4:	4603      	mov	r3, r0
 80013a6:	220c      	movs	r2, #12
 80013a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	e009      	b.n	80013c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <_sbrk+0x64>)
 80013c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20010000 	.word	0x20010000
 80013d0:	00000400 	.word	0x00000400
 80013d4:	2000013c 	.word	0x2000013c
 80013d8:	20000290 	.word	0x20000290

080013dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <SystemInit+0x20>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <SystemInit+0x20>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001438 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001404:	f7ff ffea 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <LoopForever+0x6>)
  ldr r1, =_edata
 800140a:	490d      	ldr	r1, [pc, #52]	; (8001440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <LoopForever+0xe>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001420:	4c0a      	ldr	r4, [pc, #40]	; (800144c <LoopForever+0x16>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800142e:	f002 fcc3 	bl	8003db8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001432:	f7ff fc47 	bl	8000cc4 <main>

08001436 <LoopForever>:

LoopForever:
    b LoopForever
 8001436:	e7fe      	b.n	8001436 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001438:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001440:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001444:	08004780 	.word	0x08004780
  ldr r2, =_sbss
 8001448:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800144c:	2000028c 	.word	0x2000028c

08001450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC1_2_IRQHandler>
	...

08001454 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_Init+0x28>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a07      	ldr	r2, [pc, #28]	; (800147c <HAL_Init+0x28>)
 800145e:	f043 0310 	orr.w	r3, r3, #16
 8001462:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001464:	2003      	movs	r0, #3
 8001466:	f000 f931 	bl	80016cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800146a:	2000      	movs	r0, #0
 800146c:	f000 f808 	bl	8001480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001470:	f7ff feee 	bl	8001250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40022000 	.word	0x40022000

08001480 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_InitTick+0x54>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_InitTick+0x58>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001496:	fbb3 f3f1 	udiv	r3, r3, r1
 800149a:	fbb2 f3f3 	udiv	r3, r2, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f93b 	bl	800171a <HAL_SYSTICK_Config>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00e      	b.n	80014cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b0f      	cmp	r3, #15
 80014b2:	d80a      	bhi.n	80014ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b4:	2200      	movs	r2, #0
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	f000 f911 	bl	80016e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c0:	4a06      	ldr	r2, [pc, #24]	; (80014dc <HAL_InitTick+0x5c>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e000      	b.n	80014cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000010 	.word	0x20000010
 80014d8:	20000018 	.word	0x20000018
 80014dc:	20000014 	.word	0x20000014

080014e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_IncTick+0x20>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_IncTick+0x24>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <HAL_IncTick+0x24>)
 80014f2:	6013      	str	r3, [r2, #0]
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000018 	.word	0x20000018
 8001504:	20000140 	.word	0x20000140

08001508 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return uwTick;  
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <HAL_GetTick+0x14>)
 800150e:	681b      	ldr	r3, [r3, #0]
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000140 	.word	0x20000140

08001520 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001528:	f7ff ffee 	bl	8001508 <HAL_GetTick>
 800152c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001538:	d005      	beq.n	8001546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_Delay+0x44>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4413      	add	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001546:	bf00      	nop
 8001548:	f7ff ffde 	bl	8001508 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	429a      	cmp	r2, r3
 8001556:	d8f7      	bhi.n	8001548 <HAL_Delay+0x28>
  {
  }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000018 	.word	0x20000018

08001568 <__NVIC_SetPriorityGrouping>:
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001584:	4013      	ands	r3, r2
 8001586:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_GetPriorityGrouping>:
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <__NVIC_GetPriorityGrouping+0x18>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 0307 	and.w	r3, r3, #7
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_SetPriority>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db0a      	blt.n	80015f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	490c      	ldr	r1, [pc, #48]	; (8001618 <__NVIC_SetPriority+0x4c>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	0112      	lsls	r2, r2, #4
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	440b      	add	r3, r1
 80015f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015f4:	e00a      	b.n	800160c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4908      	ldr	r1, [pc, #32]	; (800161c <__NVIC_SetPriority+0x50>)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	3b04      	subs	r3, #4
 8001604:	0112      	lsls	r2, r2, #4
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	440b      	add	r3, r1
 800160a:	761a      	strb	r2, [r3, #24]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000e100 	.word	0xe000e100
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f1c3 0307 	rsb	r3, r3, #7
 800163a:	2b04      	cmp	r3, #4
 800163c:	bf28      	it	cs
 800163e:	2304      	movcs	r3, #4
 8001640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3304      	adds	r3, #4
 8001646:	2b06      	cmp	r3, #6
 8001648:	d902      	bls.n	8001650 <NVIC_EncodePriority+0x30>
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3b03      	subs	r3, #3
 800164e:	e000      	b.n	8001652 <NVIC_EncodePriority+0x32>
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	f04f 32ff 	mov.w	r2, #4294967295
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	401a      	ands	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001668:	f04f 31ff 	mov.w	r1, #4294967295
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43d9      	mvns	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	4313      	orrs	r3, r2
         );
}
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001698:	d301      	bcc.n	800169e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169a:	2301      	movs	r3, #1
 800169c:	e00f      	b.n	80016be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <SysTick_Config+0x40>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a6:	210f      	movs	r1, #15
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f7ff ff8e 	bl	80015cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <SysTick_Config+0x40>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SysTick_Config+0x40>)
 80016b8:	2207      	movs	r2, #7
 80016ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff47 	bl	8001568 <__NVIC_SetPriorityGrouping>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f4:	f7ff ff5c 	bl	80015b0 <__NVIC_GetPriorityGrouping>
 80016f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	6978      	ldr	r0, [r7, #20]
 8001700:	f7ff ff8e 	bl	8001620 <NVIC_EncodePriority>
 8001704:	4602      	mov	r2, r0
 8001706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff5d 	bl	80015cc <__NVIC_SetPriority>
}
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ffb0 	bl	8001688 <SysTick_Config>
 8001728:	4603      	mov	r3, r0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001734:	b480      	push	{r7}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001742:	e160      	b.n	8001a06 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2101      	movs	r1, #1
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	4013      	ands	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 8152 	beq.w	8001a00 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d005      	beq.n	8001774 <HAL_GPIO_Init+0x40>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d130      	bne.n	80017d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017aa:	2201      	movs	r2, #1
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	f003 0201 	and.w	r2, r3, #1
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d017      	beq.n	8001812 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	2203      	movs	r2, #3
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d123      	bne.n	8001866 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	08da      	lsrs	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3208      	adds	r2, #8
 8001826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	220f      	movs	r2, #15
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	08da      	lsrs	r2, r3, #3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3208      	adds	r2, #8
 8001860:	6939      	ldr	r1, [r7, #16]
 8001862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	2203      	movs	r2, #3
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0203 	and.w	r2, r3, #3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 80ac 	beq.w	8001a00 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a8:	4b5e      	ldr	r3, [pc, #376]	; (8001a24 <HAL_GPIO_Init+0x2f0>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a5d      	ldr	r2, [pc, #372]	; (8001a24 <HAL_GPIO_Init+0x2f0>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b5b      	ldr	r3, [pc, #364]	; (8001a24 <HAL_GPIO_Init+0x2f0>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018c0:	4a59      	ldr	r2, [pc, #356]	; (8001a28 <HAL_GPIO_Init+0x2f4>)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	3302      	adds	r3, #2
 80018c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	220f      	movs	r2, #15
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018ea:	d025      	beq.n	8001938 <HAL_GPIO_Init+0x204>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a4f      	ldr	r2, [pc, #316]	; (8001a2c <HAL_GPIO_Init+0x2f8>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d01f      	beq.n	8001934 <HAL_GPIO_Init+0x200>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a4e      	ldr	r2, [pc, #312]	; (8001a30 <HAL_GPIO_Init+0x2fc>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d019      	beq.n	8001930 <HAL_GPIO_Init+0x1fc>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a4d      	ldr	r2, [pc, #308]	; (8001a34 <HAL_GPIO_Init+0x300>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d013      	beq.n	800192c <HAL_GPIO_Init+0x1f8>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a4c      	ldr	r2, [pc, #304]	; (8001a38 <HAL_GPIO_Init+0x304>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d00d      	beq.n	8001928 <HAL_GPIO_Init+0x1f4>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a4b      	ldr	r2, [pc, #300]	; (8001a3c <HAL_GPIO_Init+0x308>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d007      	beq.n	8001924 <HAL_GPIO_Init+0x1f0>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a4a      	ldr	r2, [pc, #296]	; (8001a40 <HAL_GPIO_Init+0x30c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d101      	bne.n	8001920 <HAL_GPIO_Init+0x1ec>
 800191c:	2306      	movs	r3, #6
 800191e:	e00c      	b.n	800193a <HAL_GPIO_Init+0x206>
 8001920:	2307      	movs	r3, #7
 8001922:	e00a      	b.n	800193a <HAL_GPIO_Init+0x206>
 8001924:	2305      	movs	r3, #5
 8001926:	e008      	b.n	800193a <HAL_GPIO_Init+0x206>
 8001928:	2304      	movs	r3, #4
 800192a:	e006      	b.n	800193a <HAL_GPIO_Init+0x206>
 800192c:	2303      	movs	r3, #3
 800192e:	e004      	b.n	800193a <HAL_GPIO_Init+0x206>
 8001930:	2302      	movs	r3, #2
 8001932:	e002      	b.n	800193a <HAL_GPIO_Init+0x206>
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <HAL_GPIO_Init+0x206>
 8001938:	2300      	movs	r3, #0
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	f002 0203 	and.w	r2, r2, #3
 8001940:	0092      	lsls	r2, r2, #2
 8001942:	4093      	lsls	r3, r2
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800194a:	4937      	ldr	r1, [pc, #220]	; (8001a28 <HAL_GPIO_Init+0x2f4>)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001958:	4b3a      	ldr	r3, [pc, #232]	; (8001a44 <HAL_GPIO_Init+0x310>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800197c:	4a31      	ldr	r2, [pc, #196]	; (8001a44 <HAL_GPIO_Init+0x310>)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001982:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_GPIO_Init+0x310>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019a6:	4a27      	ldr	r2, [pc, #156]	; (8001a44 <HAL_GPIO_Init+0x310>)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <HAL_GPIO_Init+0x310>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019d0:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <HAL_GPIO_Init+0x310>)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_GPIO_Init+0x310>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <HAL_GPIO_Init+0x310>)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3301      	adds	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f47f ae97 	bne.w	8001744 <HAL_GPIO_Init+0x10>
  }
}
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
 8001a1a:	371c      	adds	r7, #28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010000 	.word	0x40010000
 8001a2c:	48000400 	.word	0x48000400
 8001a30:	48000800 	.word	0x48000800
 8001a34:	48000c00 	.word	0x48000c00
 8001a38:	48001000 	.word	0x48001000
 8001a3c:	48001400 	.word	0x48001400
 8001a40:	48001800 	.word	0x48001800
 8001a44:	40010400 	.word	0x40010400

08001a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
 8001a54:	4613      	mov	r3, r2
 8001a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a58:	787b      	ldrb	r3, [r7, #1]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a64:	e002      	b.n	8001a6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a88:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d102      	bne.n	8001a9e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	f001 b83a 	b.w	8002b12 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 816f 	beq.w	8001d92 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ab4:	4bb5      	ldr	r3, [pc, #724]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d00c      	beq.n	8001ada <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ac0:	4bb2      	ldr	r3, [pc, #712]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d15c      	bne.n	8001b86 <HAL_RCC_OscConfig+0x10e>
 8001acc:	4baf      	ldr	r3, [pc, #700]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad8:	d155      	bne.n	8001b86 <HAL_RCC_OscConfig+0x10e>
 8001ada:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ade:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ae6:	fa93 f3a3 	rbit	r3, r3
 8001aea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001aee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	095b      	lsrs	r3, r3, #5
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d102      	bne.n	8001b0c <HAL_RCC_OscConfig+0x94>
 8001b06:	4ba1      	ldr	r3, [pc, #644]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	e015      	b.n	8001b38 <HAL_RCC_OscConfig+0xc0>
 8001b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b10:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b24:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b28:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001b2c:	fa93 f3a3 	rbit	r3, r3
 8001b30:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b34:	4b95      	ldr	r3, [pc, #596]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b3c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001b40:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001b44:	fa92 f2a2 	rbit	r2, r2
 8001b48:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001b4c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b50:	fab2 f282 	clz	r2, r2
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	f042 0220 	orr.w	r2, r2, #32
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	f002 021f 	and.w	r2, r2, #31
 8001b60:	2101      	movs	r1, #1
 8001b62:	fa01 f202 	lsl.w	r2, r1, r2
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 8111 	beq.w	8001d90 <HAL_RCC_OscConfig+0x318>
 8001b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 8108 	bne.w	8001d90 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f000 bfc6 	b.w	8002b12 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x12e>
 8001b98:	4b7c      	ldr	r3, [pc, #496]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a7b      	ldr	r2, [pc, #492]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e036      	b.n	8001c14 <HAL_RCC_OscConfig+0x19c>
 8001ba6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001baa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x158>
 8001bb6:	4b75      	ldr	r3, [pc, #468]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a74      	ldr	r2, [pc, #464]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b72      	ldr	r3, [pc, #456]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a71      	ldr	r2, [pc, #452]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001bc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e021      	b.n	8001c14 <HAL_RCC_OscConfig+0x19c>
 8001bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x184>
 8001be2:	4b6a      	ldr	r3, [pc, #424]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a69      	ldr	r2, [pc, #420]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b67      	ldr	r3, [pc, #412]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a66      	ldr	r2, [pc, #408]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e00b      	b.n	8001c14 <HAL_RCC_OscConfig+0x19c>
 8001bfc:	4b63      	ldr	r3, [pc, #396]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a62      	ldr	r2, [pc, #392]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b60      	ldr	r3, [pc, #384]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a5f      	ldr	r2, [pc, #380]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c12:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d059      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fc70 	bl	8001508 <HAL_GetTick>
 8001c28:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c2e:	f7ff fc6b 	bl	8001508 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d902      	bls.n	8001c44 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	f000 bf67 	b.w	8002b12 <HAL_RCC_OscConfig+0x109a>
 8001c44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c48:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001c50:	fa93 f3a3 	rbit	r3, r3
 8001c54:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001c58:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	095b      	lsrs	r3, r3, #5
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d102      	bne.n	8001c76 <HAL_RCC_OscConfig+0x1fe>
 8001c70:	4b46      	ldr	r3, [pc, #280]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	e015      	b.n	8001ca2 <HAL_RCC_OscConfig+0x22a>
 8001c76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c7a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001c8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c8e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c92:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c9e:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ca6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001caa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001cae:	fa92 f2a2 	rbit	r2, r2
 8001cb2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001cb6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001cba:	fab2 f282 	clz	r2, r2
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	f042 0220 	orr.w	r2, r2, #32
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	f002 021f 	and.w	r2, r2, #31
 8001cca:	2101      	movs	r1, #1
 8001ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0ab      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1b6>
 8001cd6:	e05c      	b.n	8001d92 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fc16 	bl	8001508 <HAL_GetTick>
 8001cdc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce2:	f7ff fc11 	bl	8001508 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	; 0x64
 8001cf0:	d902      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	f000 bf0d 	b.w	8002b12 <HAL_RCC_OscConfig+0x109a>
 8001cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cfc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001d0c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d102      	bne.n	8001d2a <HAL_RCC_OscConfig+0x2b2>
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	e015      	b.n	8001d56 <HAL_RCC_OscConfig+0x2de>
 8001d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001d3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d46:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_RCC_OscConfig+0x314>)
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d5a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001d5e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001d62:	fa92 f2a2 	rbit	r2, r2
 8001d66:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001d6a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d6e:	fab2 f282 	clz	r2, r2
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	f042 0220 	orr.w	r2, r2, #32
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	f002 021f 	and.w	r2, r2, #31
 8001d7e:	2101      	movs	r1, #1
 8001d80:	fa01 f202 	lsl.w	r2, r1, r2
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1ab      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x26a>
 8001d8a:	e002      	b.n	8001d92 <HAL_RCC_OscConfig+0x31a>
 8001d8c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 817f 	beq.w	80020a6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001da8:	4ba7      	ldr	r3, [pc, #668]	; (8002048 <HAL_RCC_OscConfig+0x5d0>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00c      	beq.n	8001dce <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001db4:	4ba4      	ldr	r3, [pc, #656]	; (8002048 <HAL_RCC_OscConfig+0x5d0>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d173      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x430>
 8001dc0:	4ba1      	ldr	r3, [pc, #644]	; (8002048 <HAL_RCC_OscConfig+0x5d0>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dcc:	d16c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x430>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001de0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d102      	bne.n	8001dfe <HAL_RCC_OscConfig+0x386>
 8001df8:	4b93      	ldr	r3, [pc, #588]	; (8002048 <HAL_RCC_OscConfig+0x5d0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	e013      	b.n	8001e26 <HAL_RCC_OscConfig+0x3ae>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001e10:	2302      	movs	r3, #2
 8001e12:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e16:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e22:	4b89      	ldr	r3, [pc, #548]	; (8002048 <HAL_RCC_OscConfig+0x5d0>)
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	2202      	movs	r2, #2
 8001e28:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001e2c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001e30:	fa92 f2a2 	rbit	r2, r2
 8001e34:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001e38:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e3c:	fab2 f282 	clz	r2, r2
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	f042 0220 	orr.w	r2, r2, #32
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	f002 021f 	and.w	r2, r2, #31
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00a      	beq.n	8001e6e <HAL_RCC_OscConfig+0x3f6>
 8001e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d002      	beq.n	8001e6e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	f000 be52 	b.w	8002b12 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b76      	ldr	r3, [pc, #472]	; (8002048 <HAL_RCC_OscConfig+0x5d0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	21f8      	movs	r1, #248	; 0xf8
 8001e84:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001e8c:	fa91 f1a1 	rbit	r1, r1
 8001e90:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001e94:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e98:	fab1 f181 	clz	r1, r1
 8001e9c:	b2c9      	uxtb	r1, r1
 8001e9e:	408b      	lsls	r3, r1
 8001ea0:	4969      	ldr	r1, [pc, #420]	; (8002048 <HAL_RCC_OscConfig+0x5d0>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea6:	e0fe      	b.n	80020a6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 8088 	beq.w	8001fca <HAL_RCC_OscConfig+0x552>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001ecc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7ff fb0f 	bl	8001508 <HAL_GetTick>
 8001eea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef0:	f7ff fb0a 	bl	8001508 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d902      	bls.n	8001f06 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	f000 be06 	b.w	8002b12 <HAL_RCC_OscConfig+0x109a>
 8001f06:	2302      	movs	r3, #2
 8001f08:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001f18:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d102      	bne.n	8001f36 <HAL_RCC_OscConfig+0x4be>
 8001f30:	4b45      	ldr	r3, [pc, #276]	; (8002048 <HAL_RCC_OscConfig+0x5d0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	e013      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e6>
 8001f36:	2302      	movs	r3, #2
 8001f38:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001f40:	fa93 f3a3 	rbit	r3, r3
 8001f44:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001f48:	2302      	movs	r3, #2
 8001f4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f4e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f5a:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <HAL_RCC_OscConfig+0x5d0>)
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001f64:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001f68:	fa92 f2a2 	rbit	r2, r2
 8001f6c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001f70:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f74:	fab2 f282 	clz	r2, r2
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	f042 0220 	orr.w	r2, r2, #32
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	f002 021f 	and.w	r2, r2, #31
 8001f84:	2101      	movs	r1, #1
 8001f86:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0af      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f90:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <HAL_RCC_OscConfig+0x5d0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	21f8      	movs	r1, #248	; 0xf8
 8001fa6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001fae:	fa91 f1a1 	rbit	r1, r1
 8001fb2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001fb6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001fba:	fab1 f181 	clz	r1, r1
 8001fbe:	b2c9      	uxtb	r1, r1
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	4921      	ldr	r1, [pc, #132]	; (8002048 <HAL_RCC_OscConfig+0x5d0>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]
 8001fc8:	e06d      	b.n	80020a6 <HAL_RCC_OscConfig+0x62e>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001fd4:	fa93 f3a3 	rbit	r3, r3
 8001fd8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001fdc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe0:	fab3 f383 	clz	r3, r3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff6:	f7ff fa87 	bl	8001508 <HAL_GetTick>
 8001ffa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002000:	f7ff fa82 	bl	8001508 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d902      	bls.n	8002016 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	f000 bd7e 	b.w	8002b12 <HAL_RCC_OscConfig+0x109a>
 8002016:	2302      	movs	r3, #2
 8002018:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002028:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	b2db      	uxtb	r3, r3
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b01      	cmp	r3, #1
 800203e:	d105      	bne.n	800204c <HAL_RCC_OscConfig+0x5d4>
 8002040:	4b01      	ldr	r3, [pc, #4]	; (8002048 <HAL_RCC_OscConfig+0x5d0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	e016      	b.n	8002074 <HAL_RCC_OscConfig+0x5fc>
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	2302      	movs	r3, #2
 800204e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800205e:	2302      	movs	r3, #2
 8002060:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002064:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002070:	4bbf      	ldr	r3, [pc, #764]	; (8002370 <HAL_RCC_OscConfig+0x8f8>)
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	2202      	movs	r2, #2
 8002076:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800207a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800207e:	fa92 f2a2 	rbit	r2, r2
 8002082:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002086:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800208a:	fab2 f282 	clz	r2, r2
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	f042 0220 	orr.w	r2, r2, #32
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f002 021f 	and.w	r2, r2, #31
 800209a:	2101      	movs	r1, #1
 800209c:	fa01 f202 	lsl.w	r2, r1, r2
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1ac      	bne.n	8002000 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8113 	beq.w	80022e2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d07c      	beq.n	80021c6 <HAL_RCC_OscConfig+0x74e>
 80020cc:	2301      	movs	r3, #1
 80020ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80020de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	4ba2      	ldr	r3, [pc, #648]	; (8002374 <HAL_RCC_OscConfig+0x8fc>)
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	461a      	mov	r2, r3
 80020f2:	2301      	movs	r3, #1
 80020f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f6:	f7ff fa07 	bl	8001508 <HAL_GetTick>
 80020fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002100:	f7ff fa02 	bl	8001508 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d902      	bls.n	8002116 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	f000 bcfe 	b.w	8002b12 <HAL_RCC_OscConfig+0x109a>
 8002116:	2302      	movs	r3, #2
 8002118:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002120:	fa93 f2a3 	rbit	r2, r3
 8002124:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002128:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002132:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002136:	2202      	movs	r2, #2
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800213e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	fa93 f2a3 	rbit	r2, r3
 8002148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800214c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002156:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800215a:	2202      	movs	r2, #2
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002162:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	fa93 f2a3 	rbit	r2, r3
 800216c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002170:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002174:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002176:	4b7e      	ldr	r3, [pc, #504]	; (8002370 <HAL_RCC_OscConfig+0x8f8>)
 8002178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800217a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002182:	2102      	movs	r1, #2
 8002184:	6019      	str	r1, [r3, #0]
 8002186:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800218a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	fa93 f1a3 	rbit	r1, r3
 8002194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002198:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800219c:	6019      	str	r1, [r3, #0]
  return result;
 800219e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	2101      	movs	r1, #1
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d09d      	beq.n	8002100 <HAL_RCC_OscConfig+0x688>
 80021c4:	e08d      	b.n	80022e2 <HAL_RCC_OscConfig+0x86a>
 80021c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	fa93 f2a3 	rbit	r2, r3
 80021e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021e8:	601a      	str	r2, [r3, #0]
  return result;
 80021ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021f2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b5d      	ldr	r3, [pc, #372]	; (8002374 <HAL_RCC_OscConfig+0x8fc>)
 80021fe:	4413      	add	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	461a      	mov	r2, r3
 8002204:	2300      	movs	r3, #0
 8002206:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002208:	f7ff f97e 	bl	8001508 <HAL_GetTick>
 800220c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002212:	f7ff f979 	bl	8001508 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d902      	bls.n	8002228 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	f000 bc75 	b.w	8002b12 <HAL_RCC_OscConfig+0x109a>
 8002228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800222c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002230:	2202      	movs	r2, #2
 8002232:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002238:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	fa93 f2a3 	rbit	r2, r3
 8002242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002246:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002250:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002254:	2202      	movs	r2, #2
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800225c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	fa93 f2a3 	rbit	r2, r3
 8002266:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800226a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002274:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002278:	2202      	movs	r2, #2
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002280:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	fa93 f2a3 	rbit	r2, r3
 800228a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002292:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002294:	4b36      	ldr	r3, [pc, #216]	; (8002370 <HAL_RCC_OscConfig+0x8f8>)
 8002296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80022a0:	2102      	movs	r1, #2
 80022a2:	6019      	str	r1, [r3, #0]
 80022a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	fa93 f1a3 	rbit	r1, r3
 80022b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80022ba:	6019      	str	r1, [r3, #0]
  return result;
 80022bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	4013      	ands	r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d197      	bne.n	8002212 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 81a5 	beq.w	8002642 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fe:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <HAL_RCC_OscConfig+0x8f8>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d116      	bne.n	8002338 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	4b19      	ldr	r3, [pc, #100]	; (8002370 <HAL_RCC_OscConfig+0x8f8>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4a18      	ldr	r2, [pc, #96]	; (8002370 <HAL_RCC_OscConfig+0x8f8>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002314:	61d3      	str	r3, [r2, #28]
 8002316:	4b16      	ldr	r3, [pc, #88]	; (8002370 <HAL_RCC_OscConfig+0x8f8>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800231e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002322:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002330:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002332:	2301      	movs	r3, #1
 8002334:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <HAL_RCC_OscConfig+0x900>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d121      	bne.n	8002388 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <HAL_RCC_OscConfig+0x900>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <HAL_RCC_OscConfig+0x900>)
 800234a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002350:	f7ff f8da 	bl	8001508 <HAL_GetTick>
 8002354:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002358:	e010      	b.n	800237c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235a:	f7ff f8d5 	bl	8001508 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d908      	bls.n	800237c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e3d1      	b.n	8002b12 <HAL_RCC_OscConfig+0x109a>
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	10908120 	.word	0x10908120
 8002378:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	4b8d      	ldr	r3, [pc, #564]	; (80025b4 <HAL_RCC_OscConfig+0xb3c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0e8      	beq.n	800235a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d106      	bne.n	80023a6 <HAL_RCC_OscConfig+0x92e>
 8002398:	4b87      	ldr	r3, [pc, #540]	; (80025b8 <HAL_RCC_OscConfig+0xb40>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a86      	ldr	r2, [pc, #536]	; (80025b8 <HAL_RCC_OscConfig+0xb40>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6213      	str	r3, [r2, #32]
 80023a4:	e035      	b.n	8002412 <HAL_RCC_OscConfig+0x99a>
 80023a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x958>
 80023b6:	4b80      	ldr	r3, [pc, #512]	; (80025b8 <HAL_RCC_OscConfig+0xb40>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4a7f      	ldr	r2, [pc, #508]	; (80025b8 <HAL_RCC_OscConfig+0xb40>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	6213      	str	r3, [r2, #32]
 80023c2:	4b7d      	ldr	r3, [pc, #500]	; (80025b8 <HAL_RCC_OscConfig+0xb40>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4a7c      	ldr	r2, [pc, #496]	; (80025b8 <HAL_RCC_OscConfig+0xb40>)
 80023c8:	f023 0304 	bic.w	r3, r3, #4
 80023cc:	6213      	str	r3, [r2, #32]
 80023ce:	e020      	b.n	8002412 <HAL_RCC_OscConfig+0x99a>
 80023d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d10c      	bne.n	80023fa <HAL_RCC_OscConfig+0x982>
 80023e0:	4b75      	ldr	r3, [pc, #468]	; (80025b8 <HAL_RCC_OscConfig+0xb40>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4a74      	ldr	r2, [pc, #464]	; (80025b8 <HAL_RCC_OscConfig+0xb40>)
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	6213      	str	r3, [r2, #32]
 80023ec:	4b72      	ldr	r3, [pc, #456]	; (80025b8 <HAL_RCC_OscConfig+0xb40>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4a71      	ldr	r2, [pc, #452]	; (80025b8 <HAL_RCC_OscConfig+0xb40>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6213      	str	r3, [r2, #32]
 80023f8:	e00b      	b.n	8002412 <HAL_RCC_OscConfig+0x99a>
 80023fa:	4b6f      	ldr	r3, [pc, #444]	; (80025b8 <HAL_RCC_OscConfig+0xb40>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4a6e      	ldr	r2, [pc, #440]	; (80025b8 <HAL_RCC_OscConfig+0xb40>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6213      	str	r3, [r2, #32]
 8002406:	4b6c      	ldr	r3, [pc, #432]	; (80025b8 <HAL_RCC_OscConfig+0xb40>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a6b      	ldr	r2, [pc, #428]	; (80025b8 <HAL_RCC_OscConfig+0xb40>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002416:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 8081 	beq.w	8002526 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002424:	f7ff f870 	bl	8001508 <HAL_GetTick>
 8002428:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242c:	e00b      	b.n	8002446 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7ff f86b 	bl	8001508 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e365      	b.n	8002b12 <HAL_RCC_OscConfig+0x109a>
 8002446:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800244a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800244e:	2202      	movs	r2, #2
 8002450:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002456:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	fa93 f2a3 	rbit	r2, r3
 8002460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002464:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800246e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002472:	2202      	movs	r2, #2
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800247a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	fa93 f2a3 	rbit	r2, r3
 8002484:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002488:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800248c:	601a      	str	r2, [r3, #0]
  return result;
 800248e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002492:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002496:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f043 0302 	orr.w	r3, r3, #2
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d102      	bne.n	80024b2 <HAL_RCC_OscConfig+0xa3a>
 80024ac:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <HAL_RCC_OscConfig+0xb40>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	e013      	b.n	80024da <HAL_RCC_OscConfig+0xa62>
 80024b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80024ba:	2202      	movs	r2, #2
 80024bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	fa93 f2a3 	rbit	r2, r3
 80024cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	4b38      	ldr	r3, [pc, #224]	; (80025b8 <HAL_RCC_OscConfig+0xb40>)
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024de:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024e2:	2102      	movs	r1, #2
 80024e4:	6011      	str	r1, [r2, #0]
 80024e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024ea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	fa92 f1a2 	rbit	r1, r2
 80024f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024f8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80024fc:	6011      	str	r1, [r2, #0]
  return result;
 80024fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002502:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	fab2 f282 	clz	r2, r2
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	f002 021f 	and.w	r2, r2, #31
 8002518:	2101      	movs	r1, #1
 800251a:	fa01 f202 	lsl.w	r2, r1, r2
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d084      	beq.n	800242e <HAL_RCC_OscConfig+0x9b6>
 8002524:	e083      	b.n	800262e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002526:	f7fe ffef 	bl	8001508 <HAL_GetTick>
 800252a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252e:	e00b      	b.n	8002548 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002530:	f7fe ffea 	bl	8001508 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e2e4      	b.n	8002b12 <HAL_RCC_OscConfig+0x109a>
 8002548:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800254c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002550:	2202      	movs	r2, #2
 8002552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002558:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	fa93 f2a3 	rbit	r2, r3
 8002562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002566:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002570:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002574:	2202      	movs	r2, #2
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800257c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	fa93 f2a3 	rbit	r2, r3
 8002586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800258a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800258e:	601a      	str	r2, [r3, #0]
  return result;
 8002590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002594:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002598:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d106      	bne.n	80025bc <HAL_RCC_OscConfig+0xb44>
 80025ae:	4b02      	ldr	r3, [pc, #8]	; (80025b8 <HAL_RCC_OscConfig+0xb40>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	e017      	b.n	80025e4 <HAL_RCC_OscConfig+0xb6c>
 80025b4:	40007000 	.word	0x40007000
 80025b8:	40021000 	.word	0x40021000
 80025bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80025c4:	2202      	movs	r2, #2
 80025c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025cc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	fa93 f2a3 	rbit	r2, r3
 80025d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025da:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	4bb3      	ldr	r3, [pc, #716]	; (80028b0 <HAL_RCC_OscConfig+0xe38>)
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025e8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025ec:	2102      	movs	r1, #2
 80025ee:	6011      	str	r1, [r2, #0]
 80025f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025f4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	fa92 f1a2 	rbit	r1, r2
 80025fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002602:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002606:	6011      	str	r1, [r2, #0]
  return result;
 8002608:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800260c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	fab2 f282 	clz	r2, r2
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	f002 021f 	and.w	r2, r2, #31
 8002622:	2101      	movs	r1, #1
 8002624:	fa01 f202 	lsl.w	r2, r1, r2
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d180      	bne.n	8002530 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800262e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002632:	2b01      	cmp	r3, #1
 8002634:	d105      	bne.n	8002642 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002636:	4b9e      	ldr	r3, [pc, #632]	; (80028b0 <HAL_RCC_OscConfig+0xe38>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	4a9d      	ldr	r2, [pc, #628]	; (80028b0 <HAL_RCC_OscConfig+0xe38>)
 800263c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002640:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002646:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 825e 	beq.w	8002b10 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002654:	4b96      	ldr	r3, [pc, #600]	; (80028b0 <HAL_RCC_OscConfig+0xe38>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b08      	cmp	r3, #8
 800265e:	f000 821f 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002666:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b02      	cmp	r3, #2
 8002670:	f040 8170 	bne.w	8002954 <HAL_RCC_OscConfig+0xedc>
 8002674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002678:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800267c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002686:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	fa93 f2a3 	rbit	r2, r3
 8002690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002694:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002698:	601a      	str	r2, [r3, #0]
  return result;
 800269a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800269e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026a2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a4:	fab3 f383 	clz	r3, r3
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	461a      	mov	r2, r3
 80026b6:	2300      	movs	r3, #0
 80026b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ba:	f7fe ff25 	bl	8001508 <HAL_GetTick>
 80026be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c2:	e009      	b.n	80026d8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c4:	f7fe ff20 	bl	8001508 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e21c      	b.n	8002b12 <HAL_RCC_OscConfig+0x109a>
 80026d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026dc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	fa93 f2a3 	rbit	r2, r3
 80026f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026fc:	601a      	str	r2, [r3, #0]
  return result;
 80026fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002702:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002706:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	b2db      	uxtb	r3, r3
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d102      	bne.n	8002722 <HAL_RCC_OscConfig+0xcaa>
 800271c:	4b64      	ldr	r3, [pc, #400]	; (80028b0 <HAL_RCC_OscConfig+0xe38>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	e027      	b.n	8002772 <HAL_RCC_OscConfig+0xcfa>
 8002722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002726:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800272a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800272e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002734:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	fa93 f2a3 	rbit	r2, r3
 800273e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002742:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800274c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002750:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800275a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	fa93 f2a3 	rbit	r2, r3
 8002764:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002768:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	4b50      	ldr	r3, [pc, #320]	; (80028b0 <HAL_RCC_OscConfig+0xe38>)
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002776:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800277a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800277e:	6011      	str	r1, [r2, #0]
 8002780:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002784:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	fa92 f1a2 	rbit	r1, r2
 800278e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002792:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002796:	6011      	str	r1, [r2, #0]
  return result;
 8002798:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800279c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80027a0:	6812      	ldr	r2, [r2, #0]
 80027a2:	fab2 f282 	clz	r2, r2
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	f042 0220 	orr.w	r2, r2, #32
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	f002 021f 	and.w	r2, r2, #31
 80027b2:	2101      	movs	r1, #1
 80027b4:	fa01 f202 	lsl.w	r2, r1, r2
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d182      	bne.n	80026c4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027be:	4b3c      	ldr	r3, [pc, #240]	; (80028b0 <HAL_RCC_OscConfig+0xe38>)
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	f023 020f 	bic.w	r2, r3, #15
 80027c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	4937      	ldr	r1, [pc, #220]	; (80028b0 <HAL_RCC_OscConfig+0xe38>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80027d8:	4b35      	ldr	r3, [pc, #212]	; (80028b0 <HAL_RCC_OscConfig+0xe38>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80027e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6a19      	ldr	r1, [r3, #32]
 80027ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	430b      	orrs	r3, r1
 80027fa:	492d      	ldr	r1, [pc, #180]	; (80028b0 <HAL_RCC_OscConfig+0xe38>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
 8002800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002804:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002808:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800280c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002812:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	fa93 f2a3 	rbit	r2, r3
 800281c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002820:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002824:	601a      	str	r2, [r3, #0]
  return result;
 8002826:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800282a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800282e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002830:	fab3 f383 	clz	r3, r3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800283a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	461a      	mov	r2, r3
 8002842:	2301      	movs	r3, #1
 8002844:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002846:	f7fe fe5f 	bl	8001508 <HAL_GetTick>
 800284a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800284e:	e009      	b.n	8002864 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002850:	f7fe fe5a 	bl	8001508 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e156      	b.n	8002b12 <HAL_RCC_OscConfig+0x109a>
 8002864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002868:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800286c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002870:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002876:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	fa93 f2a3 	rbit	r2, r3
 8002880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002884:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002888:	601a      	str	r2, [r3, #0]
  return result;
 800288a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800288e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002892:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	b2db      	uxtb	r3, r3
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d105      	bne.n	80028b4 <HAL_RCC_OscConfig+0xe3c>
 80028a8:	4b01      	ldr	r3, [pc, #4]	; (80028b0 <HAL_RCC_OscConfig+0xe38>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	e02a      	b.n	8002904 <HAL_RCC_OscConfig+0xe8c>
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
 80028b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80028bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	fa93 f2a3 	rbit	r2, r3
 80028d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028d4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028de:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80028e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ec:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	fa93 f2a3 	rbit	r2, r3
 80028f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028fa:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	4b86      	ldr	r3, [pc, #536]	; (8002b1c <HAL_RCC_OscConfig+0x10a4>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002908:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800290c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002910:	6011      	str	r1, [r2, #0]
 8002912:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002916:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	fa92 f1a2 	rbit	r1, r2
 8002920:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002924:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002928:	6011      	str	r1, [r2, #0]
  return result;
 800292a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800292e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	fab2 f282 	clz	r2, r2
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	f042 0220 	orr.w	r2, r2, #32
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	f002 021f 	and.w	r2, r2, #31
 8002944:	2101      	movs	r1, #1
 8002946:	fa01 f202 	lsl.w	r2, r1, r2
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	f43f af7f 	beq.w	8002850 <HAL_RCC_OscConfig+0xdd8>
 8002952:	e0dd      	b.n	8002b10 <HAL_RCC_OscConfig+0x1098>
 8002954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002958:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800295c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002960:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002966:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	fa93 f2a3 	rbit	r2, r3
 8002970:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002974:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002978:	601a      	str	r2, [r3, #0]
  return result;
 800297a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800297e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002982:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002984:	fab3 f383 	clz	r3, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800298e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	461a      	mov	r2, r3
 8002996:	2300      	movs	r3, #0
 8002998:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299a:	f7fe fdb5 	bl	8001508 <HAL_GetTick>
 800299e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a2:	e009      	b.n	80029b8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a4:	f7fe fdb0 	bl	8001508 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e0ac      	b.n	8002b12 <HAL_RCC_OscConfig+0x109a>
 80029b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80029c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	fa93 f2a3 	rbit	r2, r3
 80029d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029dc:	601a      	str	r2, [r3, #0]
  return result;
 80029de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e8:	fab3 f383 	clz	r3, r3
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d102      	bne.n	8002a02 <HAL_RCC_OscConfig+0xf8a>
 80029fc:	4b47      	ldr	r3, [pc, #284]	; (8002b1c <HAL_RCC_OscConfig+0x10a4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	e027      	b.n	8002a52 <HAL_RCC_OscConfig+0xfda>
 8002a02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a06:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a14:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	fa93 f2a3 	rbit	r2, r3
 8002a1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a22:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a2c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a3a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	fa93 f2a3 	rbit	r2, r3
 8002a44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a48:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	4b33      	ldr	r3, [pc, #204]	; (8002b1c <HAL_RCC_OscConfig+0x10a4>)
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a56:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a5a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a5e:	6011      	str	r1, [r2, #0]
 8002a60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a64:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	fa92 f1a2 	rbit	r1, r2
 8002a6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a72:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002a76:	6011      	str	r1, [r2, #0]
  return result;
 8002a78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a7c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	fab2 f282 	clz	r2, r2
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	f042 0220 	orr.w	r2, r2, #32
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	f002 021f 	and.w	r2, r2, #31
 8002a92:	2101      	movs	r1, #1
 8002a94:	fa01 f202 	lsl.w	r2, r1, r2
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d182      	bne.n	80029a4 <HAL_RCC_OscConfig+0xf2c>
 8002a9e:	e037      	b.n	8002b10 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e02e      	b.n	8002b12 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_RCC_OscConfig+0x10a4>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002abc:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_RCC_OscConfig+0x10a4>)
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ac4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002ac8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002acc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ad0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d117      	bne.n	8002b0c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002adc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002ae0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d10b      	bne.n	8002b0c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002af4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af8:	f003 020f 	and.w	r2, r3, #15
 8002afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40021000 	.word	0x40021000

08002b20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b09e      	sub	sp, #120	; 0x78
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e162      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b38:	4b90      	ldr	r3, [pc, #576]	; (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d910      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b8d      	ldr	r3, [pc, #564]	; (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 0207 	bic.w	r2, r3, #7
 8002b4e:	498b      	ldr	r1, [pc, #556]	; (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b89      	ldr	r3, [pc, #548]	; (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e14a      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b74:	4b82      	ldr	r3, [pc, #520]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	497f      	ldr	r1, [pc, #508]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 80dc 	beq.w	8002d4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d13c      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xf6>
 8002b9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ba0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d102      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xa6>
 8002bc0:	4b6f      	ldr	r3, [pc, #444]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	e00f      	b.n	8002be6 <HAL_RCC_ClockConfig+0xc6>
 8002bc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	667b      	str	r3, [r7, #100]	; 0x64
 8002bd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd8:	663b      	str	r3, [r7, #96]	; 0x60
 8002bda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002be2:	4b67      	ldr	r3, [pc, #412]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bea:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bee:	fa92 f2a2 	rbit	r2, r2
 8002bf2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002bf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bf6:	fab2 f282 	clz	r2, r2
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	f042 0220 	orr.w	r2, r2, #32
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	f002 021f 	and.w	r2, r2, #31
 8002c06:	2101      	movs	r1, #1
 8002c08:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d17b      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0f3      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d13c      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x178>
 8002c1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d102      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x128>
 8002c42:	4b4f      	ldr	r3, [pc, #316]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	e00f      	b.n	8002c68 <HAL_RCC_ClockConfig+0x148>
 8002c48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	647b      	str	r3, [r7, #68]	; 0x44
 8002c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c64:	4b46      	ldr	r3, [pc, #280]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c6c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c70:	fa92 f2a2 	rbit	r2, r2
 8002c74:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c78:	fab2 f282 	clz	r2, r2
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	f042 0220 	orr.w	r2, r2, #32
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	f002 021f 	and.w	r2, r2, #31
 8002c88:	2101      	movs	r1, #1
 8002c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d13a      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0b2      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x1a0>
 8002cba:	4b31      	ldr	r3, [pc, #196]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	e00d      	b.n	8002cdc <HAL_RCC_ClockConfig+0x1bc>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ccc:	2302      	movs	r3, #2
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	4b29      	ldr	r3, [pc, #164]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	2202      	movs	r2, #2
 8002cde:	61ba      	str	r2, [r7, #24]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	fa92 f2a2 	rbit	r2, r2
 8002ce6:	617a      	str	r2, [r7, #20]
  return result;
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	fab2 f282 	clz	r2, r2
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	f042 0220 	orr.w	r2, r2, #32
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	f002 021f 	and.w	r2, r2, #31
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e079      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d0a:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f023 0203 	bic.w	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	491a      	ldr	r1, [pc, #104]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d1c:	f7fe fbf4 	bl	8001508 <HAL_GetTick>
 8002d20:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d24:	f7fe fbf0 	bl	8001508 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e061      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 020c 	and.w	r2, r3, #12
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d1eb      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d214      	bcs.n	8002d84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 0207 	bic.w	r2, r3, #7
 8002d62:	4906      	ldr	r1, [pc, #24]	; (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e040      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
 8002d7c:	40022000 	.word	0x40022000
 8002d80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d90:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	491a      	ldr	r1, [pc, #104]	; (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dae:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4912      	ldr	r1, [pc, #72]	; (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002dc2:	f000 f829 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8002dc6:	4601      	mov	r1, r0
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd0:	22f0      	movs	r2, #240	; 0xf0
 8002dd2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	fa92 f2a2 	rbit	r2, r2
 8002dda:	60fa      	str	r2, [r7, #12]
  return result;
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	fab2 f282 	clz	r2, r2
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	40d3      	lsrs	r3, r2
 8002de6:	4a09      	ldr	r2, [pc, #36]	; (8002e0c <HAL_RCC_ClockConfig+0x2ec>)
 8002de8:	5cd3      	ldrb	r3, [r2, r3]
 8002dea:	fa21 f303 	lsr.w	r3, r1, r3
 8002dee:	4a08      	ldr	r2, [pc, #32]	; (8002e10 <HAL_RCC_ClockConfig+0x2f0>)
 8002df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002df2:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <HAL_RCC_ClockConfig+0x2f4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe fb42 	bl	8001480 <HAL_InitTick>
  
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3778      	adds	r7, #120	; 0x78
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	0800470c 	.word	0x0800470c
 8002e10:	20000010 	.word	0x20000010
 8002e14:	20000014 	.word	0x20000014

08002e18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002e32:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d002      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x30>
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d003      	beq.n	8002e4e <HAL_RCC_GetSysClockFreq+0x36>
 8002e46:	e029      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e48:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e4a:	613b      	str	r3, [r7, #16]
      break;
 8002e4c:	e029      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	0c9b      	lsrs	r3, r3, #18
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	4a18      	ldr	r2, [pc, #96]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e58:	5cd3      	ldrb	r3, [r2, r3]
 8002e5a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	4a15      	ldr	r2, [pc, #84]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e66:	5cd3      	ldrb	r3, [r2, r3]
 8002e68:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e74:	4a0f      	ldr	r2, [pc, #60]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	e007      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e86:	4a0b      	ldr	r2, [pc, #44]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	fb02 f303 	mul.w	r3, r2, r3
 8002e94:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	613b      	str	r3, [r7, #16]
      break;
 8002e9a:	e002      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e9e:	613b      	str	r3, [r7, #16]
      break;
 8002ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea2:	693b      	ldr	r3, [r7, #16]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	007a1200 	.word	0x007a1200
 8002eb8:	08004724 	.word	0x08004724
 8002ebc:	08004734 	.word	0x08004734

08002ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000010 	.word	0x20000010

08002ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ede:	f7ff ffef 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002ee2:	4601      	mov	r1, r0
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002eec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ef0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	fa92 f2a2 	rbit	r2, r2
 8002ef8:	603a      	str	r2, [r7, #0]
  return result;
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	fab2 f282 	clz	r2, r2
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	40d3      	lsrs	r3, r2
 8002f04:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f06:	5cd3      	ldrb	r3, [r2, r3]
 8002f08:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000
 8002f18:	0800471c 	.word	0x0800471c

08002f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f22:	f7ff ffcd 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002f26:	4601      	mov	r1, r0
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002f30:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	fa92 f2a2 	rbit	r2, r2
 8002f3c:	603a      	str	r2, [r7, #0]
  return result;
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	fab2 f282 	clz	r2, r2
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	40d3      	lsrs	r3, r2
 8002f48:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f4a:	5cd3      	ldrb	r3, [r2, r3]
 8002f4c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	0800471c 	.word	0x0800471c

08002f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b092      	sub	sp, #72	; 0x48
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80d4 	beq.w	800312c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f84:	4b4e      	ldr	r3, [pc, #312]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10e      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f90:	4b4b      	ldr	r3, [pc, #300]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	4a4a      	ldr	r2, [pc, #296]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	61d3      	str	r3, [r2, #28]
 8002f9c:	4b48      	ldr	r3, [pc, #288]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fae:	4b45      	ldr	r3, [pc, #276]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d118      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fba:	4b42      	ldr	r3, [pc, #264]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a41      	ldr	r2, [pc, #260]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc6:	f7fe fa9f 	bl	8001508 <HAL_GetTick>
 8002fca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fce:	f7fe fa9b 	bl	8001508 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b64      	cmp	r3, #100	; 0x64
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e1d6      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe0:	4b38      	ldr	r3, [pc, #224]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fec:	4b34      	ldr	r3, [pc, #208]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8084 	beq.w	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003006:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003008:	429a      	cmp	r2, r3
 800300a:	d07c      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800300c:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800301a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	4b26      	ldr	r3, [pc, #152]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	461a      	mov	r2, r3
 8003036:	2301      	movs	r3, #1
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800303e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	461a      	mov	r2, r3
 800305a:	2300      	movs	r3, #0
 800305c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800305e:	4a18      	ldr	r2, [pc, #96]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003062:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d04b      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7fe fa4b 	bl	8001508 <HAL_GetTick>
 8003072:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003074:	e00a      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003076:	f7fe fa47 	bl	8001508 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f241 3288 	movw	r2, #5000	; 0x1388
 8003084:	4293      	cmp	r3, r2
 8003086:	d901      	bls.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e180      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800308c:	2302      	movs	r3, #2
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
 8003098:	2302      	movs	r3, #2
 800309a:	623b      	str	r3, [r7, #32]
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	61fb      	str	r3, [r7, #28]
  return result;
 80030a4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a6:	fab3 f383 	clz	r3, r3
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f043 0302 	orr.w	r3, r3, #2
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d108      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80030ba:	4b01      	ldr	r3, [pc, #4]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	e00d      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40007000 	.word	0x40007000
 80030c8:	10908100 	.word	0x10908100
 80030cc:	2302      	movs	r3, #2
 80030ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	fa93 f3a3 	rbit	r3, r3
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	4b9a      	ldr	r3, [pc, #616]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	2202      	movs	r2, #2
 80030de:	613a      	str	r2, [r7, #16]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	fa92 f2a2 	rbit	r2, r2
 80030e6:	60fa      	str	r2, [r7, #12]
  return result;
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	fab2 f282 	clz	r2, r2
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	f002 021f 	and.w	r2, r2, #31
 80030fa:	2101      	movs	r1, #1
 80030fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003100:	4013      	ands	r3, r2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0b7      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003106:	4b8f      	ldr	r3, [pc, #572]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	498c      	ldr	r1, [pc, #560]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003114:	4313      	orrs	r3, r2
 8003116:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003118:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800311c:	2b01      	cmp	r3, #1
 800311e:	d105      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003120:	4b88      	ldr	r3, [pc, #544]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	4a87      	ldr	r2, [pc, #540]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003138:	4b82      	ldr	r3, [pc, #520]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	f023 0203 	bic.w	r2, r3, #3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	497f      	ldr	r1, [pc, #508]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003146:	4313      	orrs	r3, r2
 8003148:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003156:	4b7b      	ldr	r3, [pc, #492]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	4978      	ldr	r1, [pc, #480]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003164:	4313      	orrs	r3, r2
 8003166:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003174:	4b73      	ldr	r3, [pc, #460]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	4970      	ldr	r1, [pc, #448]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003182:	4313      	orrs	r3, r2
 8003184:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b00      	cmp	r3, #0
 8003190:	d008      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003192:	4b6c      	ldr	r3, [pc, #432]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f023 0210 	bic.w	r2, r3, #16
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	4969      	ldr	r1, [pc, #420]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80031b0:	4b64      	ldr	r3, [pc, #400]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031bc:	4961      	ldr	r1, [pc, #388]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d008      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031ce:	4b5d      	ldr	r3, [pc, #372]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	f023 0220 	bic.w	r2, r3, #32
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	495a      	ldr	r1, [pc, #360]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d008      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031ec:	4b55      	ldr	r3, [pc, #340]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	4952      	ldr	r1, [pc, #328]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d008      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800320a:	4b4e      	ldr	r3, [pc, #312]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	494b      	ldr	r1, [pc, #300]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003218:	4313      	orrs	r3, r2
 800321a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003228:	4b46      	ldr	r3, [pc, #280]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	4943      	ldr	r1, [pc, #268]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003236:	4313      	orrs	r3, r2
 8003238:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003242:	2b00      	cmp	r3, #0
 8003244:	d008      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003246:	4b3f      	ldr	r3, [pc, #252]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	493c      	ldr	r1, [pc, #240]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003254:	4313      	orrs	r3, r2
 8003256:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003264:	4b37      	ldr	r3, [pc, #220]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	4934      	ldr	r1, [pc, #208]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003272:	4313      	orrs	r3, r2
 8003274:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d008      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003282:	4b30      	ldr	r3, [pc, #192]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	492d      	ldr	r1, [pc, #180]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003290:	4313      	orrs	r3, r2
 8003292:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032a0:	4b28      	ldr	r3, [pc, #160]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ac:	4925      	ldr	r1, [pc, #148]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80032be:	4b21      	ldr	r3, [pc, #132]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	491e      	ldr	r1, [pc, #120]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80032dc:	4b19      	ldr	r3, [pc, #100]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	4916      	ldr	r1, [pc, #88]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003306:	490f      	ldr	r1, [pc, #60]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003308:	4313      	orrs	r3, r2
 800330a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003318:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003324:	4907      	ldr	r1, [pc, #28]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00c      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003336:	4b03      	ldr	r3, [pc, #12]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	e002      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000
 8003348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800334a:	4913      	ldr	r1, [pc, #76]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800334c:	4313      	orrs	r3, r2
 800334e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800335c:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003368:	490b      	ldr	r1, [pc, #44]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800336a:	4313      	orrs	r3, r2
 800336c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800337a:	4b07      	ldr	r3, [pc, #28]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003386:	4904      	ldr	r1, [pc, #16]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003388:	4313      	orrs	r3, r2
 800338a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3748      	adds	r7, #72	; 0x48
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000

0800339c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e040      	b.n	8003430 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd ff6a 	bl	8001298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2224      	movs	r2, #36	; 0x24
 80033c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0201 	bic.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fa86 	bl	80038f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f8af 	bl	800354c <UART_SetConfig>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e01b      	b.n	8003430 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003406:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003416:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fb05 	bl	8003a38 <UART_CheckIdleState>
 800342e:	4603      	mov	r3, r0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	4613      	mov	r3, r2
 8003446:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800344c:	2b20      	cmp	r3, #32
 800344e:	d178      	bne.n	8003542 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_UART_Transmit+0x24>
 8003456:	88fb      	ldrh	r3, [r7, #6]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e071      	b.n	8003544 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2221      	movs	r2, #33	; 0x21
 800346c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800346e:	f7fe f84b 	bl	8001508 <HAL_GetTick>
 8003472:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	88fa      	ldrh	r2, [r7, #6]
 8003478:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	88fa      	ldrh	r2, [r7, #6]
 8003480:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348c:	d108      	bne.n	80034a0 <HAL_UART_Transmit+0x68>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d104      	bne.n	80034a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	e003      	b.n	80034a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034a8:	e030      	b.n	800350c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2200      	movs	r2, #0
 80034b2:	2180      	movs	r1, #128	; 0x80
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 fb67 	bl	8003b88 <UART_WaitOnFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d004      	beq.n	80034ca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e03c      	b.n	8003544 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10b      	bne.n	80034e8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	881a      	ldrh	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034dc:	b292      	uxth	r2, r2
 80034de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	3302      	adds	r3, #2
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	e008      	b.n	80034fa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	781a      	ldrb	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	b292      	uxth	r2, r2
 80034f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	3301      	adds	r3, #1
 80034f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1c8      	bne.n	80034aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2200      	movs	r2, #0
 8003520:	2140      	movs	r1, #64	; 0x40
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fb30 	bl	8003b88 <UART_WaitOnFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d004      	beq.n	8003538 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e005      	b.n	8003544 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	e000      	b.n	8003544 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003542:	2302      	movs	r3, #2
  }
}
 8003544:	4618      	mov	r0, r3
 8003546:	3720      	adds	r7, #32
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	4b92      	ldr	r3, [pc, #584]	; (80037c0 <UART_SetConfig+0x274>)
 8003578:	4013      	ands	r3, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	6979      	ldr	r1, [r7, #20]
 8003580:	430b      	orrs	r3, r1
 8003582:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a80      	ldr	r2, [pc, #512]	; (80037c4 <UART_SetConfig+0x278>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d120      	bne.n	800360a <UART_SetConfig+0xbe>
 80035c8:	4b7f      	ldr	r3, [pc, #508]	; (80037c8 <UART_SetConfig+0x27c>)
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d817      	bhi.n	8003604 <UART_SetConfig+0xb8>
 80035d4:	a201      	add	r2, pc, #4	; (adr r2, 80035dc <UART_SetConfig+0x90>)
 80035d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035da:	bf00      	nop
 80035dc:	080035ed 	.word	0x080035ed
 80035e0:	080035f9 	.word	0x080035f9
 80035e4:	080035ff 	.word	0x080035ff
 80035e8:	080035f3 	.word	0x080035f3
 80035ec:	2301      	movs	r3, #1
 80035ee:	77fb      	strb	r3, [r7, #31]
 80035f0:	e0b5      	b.n	800375e <UART_SetConfig+0x212>
 80035f2:	2302      	movs	r3, #2
 80035f4:	77fb      	strb	r3, [r7, #31]
 80035f6:	e0b2      	b.n	800375e <UART_SetConfig+0x212>
 80035f8:	2304      	movs	r3, #4
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e0af      	b.n	800375e <UART_SetConfig+0x212>
 80035fe:	2308      	movs	r3, #8
 8003600:	77fb      	strb	r3, [r7, #31]
 8003602:	e0ac      	b.n	800375e <UART_SetConfig+0x212>
 8003604:	2310      	movs	r3, #16
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	e0a9      	b.n	800375e <UART_SetConfig+0x212>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a6f      	ldr	r2, [pc, #444]	; (80037cc <UART_SetConfig+0x280>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d124      	bne.n	800365e <UART_SetConfig+0x112>
 8003614:	4b6c      	ldr	r3, [pc, #432]	; (80037c8 <UART_SetConfig+0x27c>)
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800361c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003620:	d011      	beq.n	8003646 <UART_SetConfig+0xfa>
 8003622:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003626:	d817      	bhi.n	8003658 <UART_SetConfig+0x10c>
 8003628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800362c:	d011      	beq.n	8003652 <UART_SetConfig+0x106>
 800362e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003632:	d811      	bhi.n	8003658 <UART_SetConfig+0x10c>
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <UART_SetConfig+0xf4>
 8003638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363c:	d006      	beq.n	800364c <UART_SetConfig+0x100>
 800363e:	e00b      	b.n	8003658 <UART_SetConfig+0x10c>
 8003640:	2300      	movs	r3, #0
 8003642:	77fb      	strb	r3, [r7, #31]
 8003644:	e08b      	b.n	800375e <UART_SetConfig+0x212>
 8003646:	2302      	movs	r3, #2
 8003648:	77fb      	strb	r3, [r7, #31]
 800364a:	e088      	b.n	800375e <UART_SetConfig+0x212>
 800364c:	2304      	movs	r3, #4
 800364e:	77fb      	strb	r3, [r7, #31]
 8003650:	e085      	b.n	800375e <UART_SetConfig+0x212>
 8003652:	2308      	movs	r3, #8
 8003654:	77fb      	strb	r3, [r7, #31]
 8003656:	e082      	b.n	800375e <UART_SetConfig+0x212>
 8003658:	2310      	movs	r3, #16
 800365a:	77fb      	strb	r3, [r7, #31]
 800365c:	e07f      	b.n	800375e <UART_SetConfig+0x212>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a5b      	ldr	r2, [pc, #364]	; (80037d0 <UART_SetConfig+0x284>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d124      	bne.n	80036b2 <UART_SetConfig+0x166>
 8003668:	4b57      	ldr	r3, [pc, #348]	; (80037c8 <UART_SetConfig+0x27c>)
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003670:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003674:	d011      	beq.n	800369a <UART_SetConfig+0x14e>
 8003676:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800367a:	d817      	bhi.n	80036ac <UART_SetConfig+0x160>
 800367c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003680:	d011      	beq.n	80036a6 <UART_SetConfig+0x15a>
 8003682:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003686:	d811      	bhi.n	80036ac <UART_SetConfig+0x160>
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <UART_SetConfig+0x148>
 800368c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003690:	d006      	beq.n	80036a0 <UART_SetConfig+0x154>
 8003692:	e00b      	b.n	80036ac <UART_SetConfig+0x160>
 8003694:	2300      	movs	r3, #0
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	e061      	b.n	800375e <UART_SetConfig+0x212>
 800369a:	2302      	movs	r3, #2
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e05e      	b.n	800375e <UART_SetConfig+0x212>
 80036a0:	2304      	movs	r3, #4
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e05b      	b.n	800375e <UART_SetConfig+0x212>
 80036a6:	2308      	movs	r3, #8
 80036a8:	77fb      	strb	r3, [r7, #31]
 80036aa:	e058      	b.n	800375e <UART_SetConfig+0x212>
 80036ac:	2310      	movs	r3, #16
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e055      	b.n	800375e <UART_SetConfig+0x212>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a47      	ldr	r2, [pc, #284]	; (80037d4 <UART_SetConfig+0x288>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d124      	bne.n	8003706 <UART_SetConfig+0x1ba>
 80036bc:	4b42      	ldr	r3, [pc, #264]	; (80037c8 <UART_SetConfig+0x27c>)
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80036c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036c8:	d011      	beq.n	80036ee <UART_SetConfig+0x1a2>
 80036ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036ce:	d817      	bhi.n	8003700 <UART_SetConfig+0x1b4>
 80036d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036d4:	d011      	beq.n	80036fa <UART_SetConfig+0x1ae>
 80036d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036da:	d811      	bhi.n	8003700 <UART_SetConfig+0x1b4>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <UART_SetConfig+0x19c>
 80036e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036e4:	d006      	beq.n	80036f4 <UART_SetConfig+0x1a8>
 80036e6:	e00b      	b.n	8003700 <UART_SetConfig+0x1b4>
 80036e8:	2300      	movs	r3, #0
 80036ea:	77fb      	strb	r3, [r7, #31]
 80036ec:	e037      	b.n	800375e <UART_SetConfig+0x212>
 80036ee:	2302      	movs	r3, #2
 80036f0:	77fb      	strb	r3, [r7, #31]
 80036f2:	e034      	b.n	800375e <UART_SetConfig+0x212>
 80036f4:	2304      	movs	r3, #4
 80036f6:	77fb      	strb	r3, [r7, #31]
 80036f8:	e031      	b.n	800375e <UART_SetConfig+0x212>
 80036fa:	2308      	movs	r3, #8
 80036fc:	77fb      	strb	r3, [r7, #31]
 80036fe:	e02e      	b.n	800375e <UART_SetConfig+0x212>
 8003700:	2310      	movs	r3, #16
 8003702:	77fb      	strb	r3, [r7, #31]
 8003704:	e02b      	b.n	800375e <UART_SetConfig+0x212>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a33      	ldr	r2, [pc, #204]	; (80037d8 <UART_SetConfig+0x28c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d124      	bne.n	800375a <UART_SetConfig+0x20e>
 8003710:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <UART_SetConfig+0x27c>)
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003718:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800371c:	d011      	beq.n	8003742 <UART_SetConfig+0x1f6>
 800371e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003722:	d817      	bhi.n	8003754 <UART_SetConfig+0x208>
 8003724:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003728:	d011      	beq.n	800374e <UART_SetConfig+0x202>
 800372a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800372e:	d811      	bhi.n	8003754 <UART_SetConfig+0x208>
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <UART_SetConfig+0x1f0>
 8003734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003738:	d006      	beq.n	8003748 <UART_SetConfig+0x1fc>
 800373a:	e00b      	b.n	8003754 <UART_SetConfig+0x208>
 800373c:	2300      	movs	r3, #0
 800373e:	77fb      	strb	r3, [r7, #31]
 8003740:	e00d      	b.n	800375e <UART_SetConfig+0x212>
 8003742:	2302      	movs	r3, #2
 8003744:	77fb      	strb	r3, [r7, #31]
 8003746:	e00a      	b.n	800375e <UART_SetConfig+0x212>
 8003748:	2304      	movs	r3, #4
 800374a:	77fb      	strb	r3, [r7, #31]
 800374c:	e007      	b.n	800375e <UART_SetConfig+0x212>
 800374e:	2308      	movs	r3, #8
 8003750:	77fb      	strb	r3, [r7, #31]
 8003752:	e004      	b.n	800375e <UART_SetConfig+0x212>
 8003754:	2310      	movs	r3, #16
 8003756:	77fb      	strb	r3, [r7, #31]
 8003758:	e001      	b.n	800375e <UART_SetConfig+0x212>
 800375a:	2310      	movs	r3, #16
 800375c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003766:	d16b      	bne.n	8003840 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003768:	7ffb      	ldrb	r3, [r7, #31]
 800376a:	2b08      	cmp	r3, #8
 800376c:	d838      	bhi.n	80037e0 <UART_SetConfig+0x294>
 800376e:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <UART_SetConfig+0x228>)
 8003770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003774:	08003799 	.word	0x08003799
 8003778:	080037a1 	.word	0x080037a1
 800377c:	080037a9 	.word	0x080037a9
 8003780:	080037e1 	.word	0x080037e1
 8003784:	080037af 	.word	0x080037af
 8003788:	080037e1 	.word	0x080037e1
 800378c:	080037e1 	.word	0x080037e1
 8003790:	080037e1 	.word	0x080037e1
 8003794:	080037b7 	.word	0x080037b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003798:	f7ff fb9e 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 800379c:	61b8      	str	r0, [r7, #24]
        break;
 800379e:	e024      	b.n	80037ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037a0:	f7ff fbbc 	bl	8002f1c <HAL_RCC_GetPCLK2Freq>
 80037a4:	61b8      	str	r0, [r7, #24]
        break;
 80037a6:	e020      	b.n	80037ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a8:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <UART_SetConfig+0x290>)
 80037aa:	61bb      	str	r3, [r7, #24]
        break;
 80037ac:	e01d      	b.n	80037ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ae:	f7ff fb33 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 80037b2:	61b8      	str	r0, [r7, #24]
        break;
 80037b4:	e019      	b.n	80037ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ba:	61bb      	str	r3, [r7, #24]
        break;
 80037bc:	e015      	b.n	80037ea <UART_SetConfig+0x29e>
 80037be:	bf00      	nop
 80037c0:	efff69f3 	.word	0xefff69f3
 80037c4:	40013800 	.word	0x40013800
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40004400 	.word	0x40004400
 80037d0:	40004800 	.word	0x40004800
 80037d4:	40004c00 	.word	0x40004c00
 80037d8:	40005000 	.word	0x40005000
 80037dc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	77bb      	strb	r3, [r7, #30]
        break;
 80037e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d073      	beq.n	80038d8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	005a      	lsls	r2, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	085b      	lsrs	r3, r3, #1
 80037fa:	441a      	add	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	fbb2 f3f3 	udiv	r3, r2, r3
 8003804:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b0f      	cmp	r3, #15
 800380a:	d916      	bls.n	800383a <UART_SetConfig+0x2ee>
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003812:	d212      	bcs.n	800383a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	b29b      	uxth	r3, r3
 8003818:	f023 030f 	bic.w	r3, r3, #15
 800381c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	b29b      	uxth	r3, r3
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	b29a      	uxth	r2, r3
 800382a:	89fb      	ldrh	r3, [r7, #14]
 800382c:	4313      	orrs	r3, r2
 800382e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	89fa      	ldrh	r2, [r7, #14]
 8003836:	60da      	str	r2, [r3, #12]
 8003838:	e04e      	b.n	80038d8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	77bb      	strb	r3, [r7, #30]
 800383e:	e04b      	b.n	80038d8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003840:	7ffb      	ldrb	r3, [r7, #31]
 8003842:	2b08      	cmp	r3, #8
 8003844:	d827      	bhi.n	8003896 <UART_SetConfig+0x34a>
 8003846:	a201      	add	r2, pc, #4	; (adr r2, 800384c <UART_SetConfig+0x300>)
 8003848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384c:	08003871 	.word	0x08003871
 8003850:	08003879 	.word	0x08003879
 8003854:	08003881 	.word	0x08003881
 8003858:	08003897 	.word	0x08003897
 800385c:	08003887 	.word	0x08003887
 8003860:	08003897 	.word	0x08003897
 8003864:	08003897 	.word	0x08003897
 8003868:	08003897 	.word	0x08003897
 800386c:	0800388f 	.word	0x0800388f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003870:	f7ff fb32 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 8003874:	61b8      	str	r0, [r7, #24]
        break;
 8003876:	e013      	b.n	80038a0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003878:	f7ff fb50 	bl	8002f1c <HAL_RCC_GetPCLK2Freq>
 800387c:	61b8      	str	r0, [r7, #24]
        break;
 800387e:	e00f      	b.n	80038a0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003880:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <UART_SetConfig+0x3a4>)
 8003882:	61bb      	str	r3, [r7, #24]
        break;
 8003884:	e00c      	b.n	80038a0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003886:	f7ff fac7 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 800388a:	61b8      	str	r0, [r7, #24]
        break;
 800388c:	e008      	b.n	80038a0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800388e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003892:	61bb      	str	r3, [r7, #24]
        break;
 8003894:	e004      	b.n	80038a0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	77bb      	strb	r3, [r7, #30]
        break;
 800389e:	bf00      	nop
    }

    if (pclk != 0U)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d018      	beq.n	80038d8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	085a      	lsrs	r2, r3, #1
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	441a      	add	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b0f      	cmp	r3, #15
 80038be:	d909      	bls.n	80038d4 <UART_SetConfig+0x388>
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c6:	d205      	bcs.n	80038d4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60da      	str	r2, [r3, #12]
 80038d2:	e001      	b.n	80038d8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80038e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	007a1200 	.word	0x007a1200

080038f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d01a      	beq.n	8003a0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039f2:	d10a      	bne.n	8003a0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	605a      	str	r2, [r3, #4]
  }
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b098      	sub	sp, #96	; 0x60
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a48:	f7fd fd5e 	bl	8001508 <HAL_GetTick>
 8003a4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d12e      	bne.n	8003aba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a64:	2200      	movs	r2, #0
 8003a66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f88c 	bl	8003b88 <UART_WaitOnFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d021      	beq.n	8003aba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a8a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a94:	647b      	str	r3, [r7, #68]	; 0x44
 8003a96:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e6      	bne.n	8003a76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e062      	b.n	8003b80 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d149      	bne.n	8003b5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f856 	bl	8003b88 <UART_WaitOnFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d03c      	beq.n	8003b5c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	623b      	str	r3, [r7, #32]
   return(result);
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b00:	633b      	str	r3, [r7, #48]	; 0x30
 8003b02:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e6      	bne.n	8003ae2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3308      	adds	r3, #8
 8003b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3308      	adds	r3, #8
 8003b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b34:	61fa      	str	r2, [r7, #28]
 8003b36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	69b9      	ldr	r1, [r7, #24]
 8003b3a:	69fa      	ldr	r2, [r7, #28]
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	617b      	str	r3, [r7, #20]
   return(result);
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e5      	bne.n	8003b14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e011      	b.n	8003b80 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3758      	adds	r7, #88	; 0x58
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	4613      	mov	r3, r2
 8003b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b98:	e04f      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba0:	d04b      	beq.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba2:	f7fd fcb1 	bl	8001508 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d302      	bcc.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e04e      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d037      	beq.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b80      	cmp	r3, #128	; 0x80
 8003bce:	d034      	beq.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b40      	cmp	r3, #64	; 0x40
 8003bd4:	d031      	beq.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d110      	bne.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2208      	movs	r2, #8
 8003bea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f838 	bl	8003c62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2208      	movs	r2, #8
 8003bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e029      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c14:	d111      	bne.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f81e 	bl	8003c62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e00f      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69da      	ldr	r2, [r3, #28]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4013      	ands	r3, r2
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d0a0      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b095      	sub	sp, #84	; 0x54
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c88:	643b      	str	r3, [r7, #64]	; 0x40
 8003c8a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e6      	bne.n	8003c6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3308      	adds	r3, #8
 8003cba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e5      	bne.n	8003c9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d118      	bne.n	8003d0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f023 0310 	bic.w	r3, r3, #16
 8003cec:	647b      	str	r3, [r7, #68]	; 0x44
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	6979      	ldr	r1, [r7, #20]
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	613b      	str	r3, [r7, #16]
   return(result);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e6      	bne.n	8003cd8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d1e:	bf00      	nop
 8003d20:	3754      	adds	r7, #84	; 0x54
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <_vsniprintf_r>:
 8003d2a:	b530      	push	{r4, r5, lr}
 8003d2c:	4614      	mov	r4, r2
 8003d2e:	2c00      	cmp	r4, #0
 8003d30:	b09b      	sub	sp, #108	; 0x6c
 8003d32:	4605      	mov	r5, r0
 8003d34:	461a      	mov	r2, r3
 8003d36:	da05      	bge.n	8003d44 <_vsniprintf_r+0x1a>
 8003d38:	238b      	movs	r3, #139	; 0x8b
 8003d3a:	6003      	str	r3, [r0, #0]
 8003d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d40:	b01b      	add	sp, #108	; 0x6c
 8003d42:	bd30      	pop	{r4, r5, pc}
 8003d44:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003d48:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003d4c:	bf14      	ite	ne
 8003d4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003d52:	4623      	moveq	r3, r4
 8003d54:	9302      	str	r3, [sp, #8]
 8003d56:	9305      	str	r3, [sp, #20]
 8003d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d5c:	9100      	str	r1, [sp, #0]
 8003d5e:	9104      	str	r1, [sp, #16]
 8003d60:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003d64:	4669      	mov	r1, sp
 8003d66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003d68:	f000 f99e 	bl	80040a8 <_svfiprintf_r>
 8003d6c:	1c43      	adds	r3, r0, #1
 8003d6e:	bfbc      	itt	lt
 8003d70:	238b      	movlt	r3, #139	; 0x8b
 8003d72:	602b      	strlt	r3, [r5, #0]
 8003d74:	2c00      	cmp	r4, #0
 8003d76:	d0e3      	beq.n	8003d40 <_vsniprintf_r+0x16>
 8003d78:	9b00      	ldr	r3, [sp, #0]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	e7df      	b.n	8003d40 <_vsniprintf_r+0x16>

08003d80 <vsniprintf>:
 8003d80:	b507      	push	{r0, r1, r2, lr}
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	460a      	mov	r2, r1
 8003d88:	4601      	mov	r1, r0
 8003d8a:	4803      	ldr	r0, [pc, #12]	; (8003d98 <vsniprintf+0x18>)
 8003d8c:	6800      	ldr	r0, [r0, #0]
 8003d8e:	f7ff ffcc 	bl	8003d2a <_vsniprintf_r>
 8003d92:	b003      	add	sp, #12
 8003d94:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d98:	20000068 	.word	0x20000068

08003d9c <memset>:
 8003d9c:	4402      	add	r2, r0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d100      	bne.n	8003da6 <memset+0xa>
 8003da4:	4770      	bx	lr
 8003da6:	f803 1b01 	strb.w	r1, [r3], #1
 8003daa:	e7f9      	b.n	8003da0 <memset+0x4>

08003dac <__errno>:
 8003dac:	4b01      	ldr	r3, [pc, #4]	; (8003db4 <__errno+0x8>)
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000068 	.word	0x20000068

08003db8 <__libc_init_array>:
 8003db8:	b570      	push	{r4, r5, r6, lr}
 8003dba:	4d0d      	ldr	r5, [pc, #52]	; (8003df0 <__libc_init_array+0x38>)
 8003dbc:	4c0d      	ldr	r4, [pc, #52]	; (8003df4 <__libc_init_array+0x3c>)
 8003dbe:	1b64      	subs	r4, r4, r5
 8003dc0:	10a4      	asrs	r4, r4, #2
 8003dc2:	2600      	movs	r6, #0
 8003dc4:	42a6      	cmp	r6, r4
 8003dc6:	d109      	bne.n	8003ddc <__libc_init_array+0x24>
 8003dc8:	4d0b      	ldr	r5, [pc, #44]	; (8003df8 <__libc_init_array+0x40>)
 8003dca:	4c0c      	ldr	r4, [pc, #48]	; (8003dfc <__libc_init_array+0x44>)
 8003dcc:	f000 fc6a 	bl	80046a4 <_init>
 8003dd0:	1b64      	subs	r4, r4, r5
 8003dd2:	10a4      	asrs	r4, r4, #2
 8003dd4:	2600      	movs	r6, #0
 8003dd6:	42a6      	cmp	r6, r4
 8003dd8:	d105      	bne.n	8003de6 <__libc_init_array+0x2e>
 8003dda:	bd70      	pop	{r4, r5, r6, pc}
 8003ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de0:	4798      	blx	r3
 8003de2:	3601      	adds	r6, #1
 8003de4:	e7ee      	b.n	8003dc4 <__libc_init_array+0xc>
 8003de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dea:	4798      	blx	r3
 8003dec:	3601      	adds	r6, #1
 8003dee:	e7f2      	b.n	8003dd6 <__libc_init_array+0x1e>
 8003df0:	08004778 	.word	0x08004778
 8003df4:	08004778 	.word	0x08004778
 8003df8:	08004778 	.word	0x08004778
 8003dfc:	0800477c 	.word	0x0800477c

08003e00 <__retarget_lock_acquire_recursive>:
 8003e00:	4770      	bx	lr

08003e02 <__retarget_lock_release_recursive>:
 8003e02:	4770      	bx	lr

08003e04 <_free_r>:
 8003e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e06:	2900      	cmp	r1, #0
 8003e08:	d044      	beq.n	8003e94 <_free_r+0x90>
 8003e0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e0e:	9001      	str	r0, [sp, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f1a1 0404 	sub.w	r4, r1, #4
 8003e16:	bfb8      	it	lt
 8003e18:	18e4      	addlt	r4, r4, r3
 8003e1a:	f000 f8df 	bl	8003fdc <__malloc_lock>
 8003e1e:	4a1e      	ldr	r2, [pc, #120]	; (8003e98 <_free_r+0x94>)
 8003e20:	9801      	ldr	r0, [sp, #4]
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	b933      	cbnz	r3, 8003e34 <_free_r+0x30>
 8003e26:	6063      	str	r3, [r4, #4]
 8003e28:	6014      	str	r4, [r2, #0]
 8003e2a:	b003      	add	sp, #12
 8003e2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e30:	f000 b8da 	b.w	8003fe8 <__malloc_unlock>
 8003e34:	42a3      	cmp	r3, r4
 8003e36:	d908      	bls.n	8003e4a <_free_r+0x46>
 8003e38:	6825      	ldr	r5, [r4, #0]
 8003e3a:	1961      	adds	r1, r4, r5
 8003e3c:	428b      	cmp	r3, r1
 8003e3e:	bf01      	itttt	eq
 8003e40:	6819      	ldreq	r1, [r3, #0]
 8003e42:	685b      	ldreq	r3, [r3, #4]
 8003e44:	1949      	addeq	r1, r1, r5
 8003e46:	6021      	streq	r1, [r4, #0]
 8003e48:	e7ed      	b.n	8003e26 <_free_r+0x22>
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	b10b      	cbz	r3, 8003e54 <_free_r+0x50>
 8003e50:	42a3      	cmp	r3, r4
 8003e52:	d9fa      	bls.n	8003e4a <_free_r+0x46>
 8003e54:	6811      	ldr	r1, [r2, #0]
 8003e56:	1855      	adds	r5, r2, r1
 8003e58:	42a5      	cmp	r5, r4
 8003e5a:	d10b      	bne.n	8003e74 <_free_r+0x70>
 8003e5c:	6824      	ldr	r4, [r4, #0]
 8003e5e:	4421      	add	r1, r4
 8003e60:	1854      	adds	r4, r2, r1
 8003e62:	42a3      	cmp	r3, r4
 8003e64:	6011      	str	r1, [r2, #0]
 8003e66:	d1e0      	bne.n	8003e2a <_free_r+0x26>
 8003e68:	681c      	ldr	r4, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	6053      	str	r3, [r2, #4]
 8003e6e:	440c      	add	r4, r1
 8003e70:	6014      	str	r4, [r2, #0]
 8003e72:	e7da      	b.n	8003e2a <_free_r+0x26>
 8003e74:	d902      	bls.n	8003e7c <_free_r+0x78>
 8003e76:	230c      	movs	r3, #12
 8003e78:	6003      	str	r3, [r0, #0]
 8003e7a:	e7d6      	b.n	8003e2a <_free_r+0x26>
 8003e7c:	6825      	ldr	r5, [r4, #0]
 8003e7e:	1961      	adds	r1, r4, r5
 8003e80:	428b      	cmp	r3, r1
 8003e82:	bf04      	itt	eq
 8003e84:	6819      	ldreq	r1, [r3, #0]
 8003e86:	685b      	ldreq	r3, [r3, #4]
 8003e88:	6063      	str	r3, [r4, #4]
 8003e8a:	bf04      	itt	eq
 8003e8c:	1949      	addeq	r1, r1, r5
 8003e8e:	6021      	streq	r1, [r4, #0]
 8003e90:	6054      	str	r4, [r2, #4]
 8003e92:	e7ca      	b.n	8003e2a <_free_r+0x26>
 8003e94:	b003      	add	sp, #12
 8003e96:	bd30      	pop	{r4, r5, pc}
 8003e98:	20000284 	.word	0x20000284

08003e9c <sbrk_aligned>:
 8003e9c:	b570      	push	{r4, r5, r6, lr}
 8003e9e:	4e0e      	ldr	r6, [pc, #56]	; (8003ed8 <sbrk_aligned+0x3c>)
 8003ea0:	460c      	mov	r4, r1
 8003ea2:	6831      	ldr	r1, [r6, #0]
 8003ea4:	4605      	mov	r5, r0
 8003ea6:	b911      	cbnz	r1, 8003eae <sbrk_aligned+0x12>
 8003ea8:	f000 fba6 	bl	80045f8 <_sbrk_r>
 8003eac:	6030      	str	r0, [r6, #0]
 8003eae:	4621      	mov	r1, r4
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	f000 fba1 	bl	80045f8 <_sbrk_r>
 8003eb6:	1c43      	adds	r3, r0, #1
 8003eb8:	d00a      	beq.n	8003ed0 <sbrk_aligned+0x34>
 8003eba:	1cc4      	adds	r4, r0, #3
 8003ebc:	f024 0403 	bic.w	r4, r4, #3
 8003ec0:	42a0      	cmp	r0, r4
 8003ec2:	d007      	beq.n	8003ed4 <sbrk_aligned+0x38>
 8003ec4:	1a21      	subs	r1, r4, r0
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	f000 fb96 	bl	80045f8 <_sbrk_r>
 8003ecc:	3001      	adds	r0, #1
 8003ece:	d101      	bne.n	8003ed4 <sbrk_aligned+0x38>
 8003ed0:	f04f 34ff 	mov.w	r4, #4294967295
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	bd70      	pop	{r4, r5, r6, pc}
 8003ed8:	20000288 	.word	0x20000288

08003edc <_malloc_r>:
 8003edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ee0:	1ccd      	adds	r5, r1, #3
 8003ee2:	f025 0503 	bic.w	r5, r5, #3
 8003ee6:	3508      	adds	r5, #8
 8003ee8:	2d0c      	cmp	r5, #12
 8003eea:	bf38      	it	cc
 8003eec:	250c      	movcc	r5, #12
 8003eee:	2d00      	cmp	r5, #0
 8003ef0:	4607      	mov	r7, r0
 8003ef2:	db01      	blt.n	8003ef8 <_malloc_r+0x1c>
 8003ef4:	42a9      	cmp	r1, r5
 8003ef6:	d905      	bls.n	8003f04 <_malloc_r+0x28>
 8003ef8:	230c      	movs	r3, #12
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	2600      	movs	r6, #0
 8003efe:	4630      	mov	r0, r6
 8003f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003fd8 <_malloc_r+0xfc>
 8003f08:	f000 f868 	bl	8003fdc <__malloc_lock>
 8003f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8003f10:	461c      	mov	r4, r3
 8003f12:	bb5c      	cbnz	r4, 8003f6c <_malloc_r+0x90>
 8003f14:	4629      	mov	r1, r5
 8003f16:	4638      	mov	r0, r7
 8003f18:	f7ff ffc0 	bl	8003e9c <sbrk_aligned>
 8003f1c:	1c43      	adds	r3, r0, #1
 8003f1e:	4604      	mov	r4, r0
 8003f20:	d155      	bne.n	8003fce <_malloc_r+0xf2>
 8003f22:	f8d8 4000 	ldr.w	r4, [r8]
 8003f26:	4626      	mov	r6, r4
 8003f28:	2e00      	cmp	r6, #0
 8003f2a:	d145      	bne.n	8003fb8 <_malloc_r+0xdc>
 8003f2c:	2c00      	cmp	r4, #0
 8003f2e:	d048      	beq.n	8003fc2 <_malloc_r+0xe6>
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	4631      	mov	r1, r6
 8003f34:	4638      	mov	r0, r7
 8003f36:	eb04 0903 	add.w	r9, r4, r3
 8003f3a:	f000 fb5d 	bl	80045f8 <_sbrk_r>
 8003f3e:	4581      	cmp	r9, r0
 8003f40:	d13f      	bne.n	8003fc2 <_malloc_r+0xe6>
 8003f42:	6821      	ldr	r1, [r4, #0]
 8003f44:	1a6d      	subs	r5, r5, r1
 8003f46:	4629      	mov	r1, r5
 8003f48:	4638      	mov	r0, r7
 8003f4a:	f7ff ffa7 	bl	8003e9c <sbrk_aligned>
 8003f4e:	3001      	adds	r0, #1
 8003f50:	d037      	beq.n	8003fc2 <_malloc_r+0xe6>
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	442b      	add	r3, r5
 8003f56:	6023      	str	r3, [r4, #0]
 8003f58:	f8d8 3000 	ldr.w	r3, [r8]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d038      	beq.n	8003fd2 <_malloc_r+0xf6>
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	42a2      	cmp	r2, r4
 8003f64:	d12b      	bne.n	8003fbe <_malloc_r+0xe2>
 8003f66:	2200      	movs	r2, #0
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	e00f      	b.n	8003f8c <_malloc_r+0xb0>
 8003f6c:	6822      	ldr	r2, [r4, #0]
 8003f6e:	1b52      	subs	r2, r2, r5
 8003f70:	d41f      	bmi.n	8003fb2 <_malloc_r+0xd6>
 8003f72:	2a0b      	cmp	r2, #11
 8003f74:	d917      	bls.n	8003fa6 <_malloc_r+0xca>
 8003f76:	1961      	adds	r1, r4, r5
 8003f78:	42a3      	cmp	r3, r4
 8003f7a:	6025      	str	r5, [r4, #0]
 8003f7c:	bf18      	it	ne
 8003f7e:	6059      	strne	r1, [r3, #4]
 8003f80:	6863      	ldr	r3, [r4, #4]
 8003f82:	bf08      	it	eq
 8003f84:	f8c8 1000 	streq.w	r1, [r8]
 8003f88:	5162      	str	r2, [r4, r5]
 8003f8a:	604b      	str	r3, [r1, #4]
 8003f8c:	4638      	mov	r0, r7
 8003f8e:	f104 060b 	add.w	r6, r4, #11
 8003f92:	f000 f829 	bl	8003fe8 <__malloc_unlock>
 8003f96:	f026 0607 	bic.w	r6, r6, #7
 8003f9a:	1d23      	adds	r3, r4, #4
 8003f9c:	1af2      	subs	r2, r6, r3
 8003f9e:	d0ae      	beq.n	8003efe <_malloc_r+0x22>
 8003fa0:	1b9b      	subs	r3, r3, r6
 8003fa2:	50a3      	str	r3, [r4, r2]
 8003fa4:	e7ab      	b.n	8003efe <_malloc_r+0x22>
 8003fa6:	42a3      	cmp	r3, r4
 8003fa8:	6862      	ldr	r2, [r4, #4]
 8003faa:	d1dd      	bne.n	8003f68 <_malloc_r+0x8c>
 8003fac:	f8c8 2000 	str.w	r2, [r8]
 8003fb0:	e7ec      	b.n	8003f8c <_malloc_r+0xb0>
 8003fb2:	4623      	mov	r3, r4
 8003fb4:	6864      	ldr	r4, [r4, #4]
 8003fb6:	e7ac      	b.n	8003f12 <_malloc_r+0x36>
 8003fb8:	4634      	mov	r4, r6
 8003fba:	6876      	ldr	r6, [r6, #4]
 8003fbc:	e7b4      	b.n	8003f28 <_malloc_r+0x4c>
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	e7cc      	b.n	8003f5c <_malloc_r+0x80>
 8003fc2:	230c      	movs	r3, #12
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	4638      	mov	r0, r7
 8003fc8:	f000 f80e 	bl	8003fe8 <__malloc_unlock>
 8003fcc:	e797      	b.n	8003efe <_malloc_r+0x22>
 8003fce:	6025      	str	r5, [r4, #0]
 8003fd0:	e7dc      	b.n	8003f8c <_malloc_r+0xb0>
 8003fd2:	605b      	str	r3, [r3, #4]
 8003fd4:	deff      	udf	#255	; 0xff
 8003fd6:	bf00      	nop
 8003fd8:	20000284 	.word	0x20000284

08003fdc <__malloc_lock>:
 8003fdc:	4801      	ldr	r0, [pc, #4]	; (8003fe4 <__malloc_lock+0x8>)
 8003fde:	f7ff bf0f 	b.w	8003e00 <__retarget_lock_acquire_recursive>
 8003fe2:	bf00      	nop
 8003fe4:	20000280 	.word	0x20000280

08003fe8 <__malloc_unlock>:
 8003fe8:	4801      	ldr	r0, [pc, #4]	; (8003ff0 <__malloc_unlock+0x8>)
 8003fea:	f7ff bf0a 	b.w	8003e02 <__retarget_lock_release_recursive>
 8003fee:	bf00      	nop
 8003ff0:	20000280 	.word	0x20000280

08003ff4 <__ssputs_r>:
 8003ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff8:	688e      	ldr	r6, [r1, #8]
 8003ffa:	461f      	mov	r7, r3
 8003ffc:	42be      	cmp	r6, r7
 8003ffe:	680b      	ldr	r3, [r1, #0]
 8004000:	4682      	mov	sl, r0
 8004002:	460c      	mov	r4, r1
 8004004:	4690      	mov	r8, r2
 8004006:	d82c      	bhi.n	8004062 <__ssputs_r+0x6e>
 8004008:	898a      	ldrh	r2, [r1, #12]
 800400a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800400e:	d026      	beq.n	800405e <__ssputs_r+0x6a>
 8004010:	6965      	ldr	r5, [r4, #20]
 8004012:	6909      	ldr	r1, [r1, #16]
 8004014:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004018:	eba3 0901 	sub.w	r9, r3, r1
 800401c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004020:	1c7b      	adds	r3, r7, #1
 8004022:	444b      	add	r3, r9
 8004024:	106d      	asrs	r5, r5, #1
 8004026:	429d      	cmp	r5, r3
 8004028:	bf38      	it	cc
 800402a:	461d      	movcc	r5, r3
 800402c:	0553      	lsls	r3, r2, #21
 800402e:	d527      	bpl.n	8004080 <__ssputs_r+0x8c>
 8004030:	4629      	mov	r1, r5
 8004032:	f7ff ff53 	bl	8003edc <_malloc_r>
 8004036:	4606      	mov	r6, r0
 8004038:	b360      	cbz	r0, 8004094 <__ssputs_r+0xa0>
 800403a:	6921      	ldr	r1, [r4, #16]
 800403c:	464a      	mov	r2, r9
 800403e:	f000 faeb 	bl	8004618 <memcpy>
 8004042:	89a3      	ldrh	r3, [r4, #12]
 8004044:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800404c:	81a3      	strh	r3, [r4, #12]
 800404e:	6126      	str	r6, [r4, #16]
 8004050:	6165      	str	r5, [r4, #20]
 8004052:	444e      	add	r6, r9
 8004054:	eba5 0509 	sub.w	r5, r5, r9
 8004058:	6026      	str	r6, [r4, #0]
 800405a:	60a5      	str	r5, [r4, #8]
 800405c:	463e      	mov	r6, r7
 800405e:	42be      	cmp	r6, r7
 8004060:	d900      	bls.n	8004064 <__ssputs_r+0x70>
 8004062:	463e      	mov	r6, r7
 8004064:	6820      	ldr	r0, [r4, #0]
 8004066:	4632      	mov	r2, r6
 8004068:	4641      	mov	r1, r8
 800406a:	f000 faab 	bl	80045c4 <memmove>
 800406e:	68a3      	ldr	r3, [r4, #8]
 8004070:	1b9b      	subs	r3, r3, r6
 8004072:	60a3      	str	r3, [r4, #8]
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	4433      	add	r3, r6
 8004078:	6023      	str	r3, [r4, #0]
 800407a:	2000      	movs	r0, #0
 800407c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004080:	462a      	mov	r2, r5
 8004082:	f000 fad7 	bl	8004634 <_realloc_r>
 8004086:	4606      	mov	r6, r0
 8004088:	2800      	cmp	r0, #0
 800408a:	d1e0      	bne.n	800404e <__ssputs_r+0x5a>
 800408c:	6921      	ldr	r1, [r4, #16]
 800408e:	4650      	mov	r0, sl
 8004090:	f7ff feb8 	bl	8003e04 <_free_r>
 8004094:	230c      	movs	r3, #12
 8004096:	f8ca 3000 	str.w	r3, [sl]
 800409a:	89a3      	ldrh	r3, [r4, #12]
 800409c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040a0:	81a3      	strh	r3, [r4, #12]
 80040a2:	f04f 30ff 	mov.w	r0, #4294967295
 80040a6:	e7e9      	b.n	800407c <__ssputs_r+0x88>

080040a8 <_svfiprintf_r>:
 80040a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ac:	4698      	mov	r8, r3
 80040ae:	898b      	ldrh	r3, [r1, #12]
 80040b0:	061b      	lsls	r3, r3, #24
 80040b2:	b09d      	sub	sp, #116	; 0x74
 80040b4:	4607      	mov	r7, r0
 80040b6:	460d      	mov	r5, r1
 80040b8:	4614      	mov	r4, r2
 80040ba:	d50e      	bpl.n	80040da <_svfiprintf_r+0x32>
 80040bc:	690b      	ldr	r3, [r1, #16]
 80040be:	b963      	cbnz	r3, 80040da <_svfiprintf_r+0x32>
 80040c0:	2140      	movs	r1, #64	; 0x40
 80040c2:	f7ff ff0b 	bl	8003edc <_malloc_r>
 80040c6:	6028      	str	r0, [r5, #0]
 80040c8:	6128      	str	r0, [r5, #16]
 80040ca:	b920      	cbnz	r0, 80040d6 <_svfiprintf_r+0x2e>
 80040cc:	230c      	movs	r3, #12
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	f04f 30ff 	mov.w	r0, #4294967295
 80040d4:	e0d0      	b.n	8004278 <_svfiprintf_r+0x1d0>
 80040d6:	2340      	movs	r3, #64	; 0x40
 80040d8:	616b      	str	r3, [r5, #20]
 80040da:	2300      	movs	r3, #0
 80040dc:	9309      	str	r3, [sp, #36]	; 0x24
 80040de:	2320      	movs	r3, #32
 80040e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80040e8:	2330      	movs	r3, #48	; 0x30
 80040ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004290 <_svfiprintf_r+0x1e8>
 80040ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040f2:	f04f 0901 	mov.w	r9, #1
 80040f6:	4623      	mov	r3, r4
 80040f8:	469a      	mov	sl, r3
 80040fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040fe:	b10a      	cbz	r2, 8004104 <_svfiprintf_r+0x5c>
 8004100:	2a25      	cmp	r2, #37	; 0x25
 8004102:	d1f9      	bne.n	80040f8 <_svfiprintf_r+0x50>
 8004104:	ebba 0b04 	subs.w	fp, sl, r4
 8004108:	d00b      	beq.n	8004122 <_svfiprintf_r+0x7a>
 800410a:	465b      	mov	r3, fp
 800410c:	4622      	mov	r2, r4
 800410e:	4629      	mov	r1, r5
 8004110:	4638      	mov	r0, r7
 8004112:	f7ff ff6f 	bl	8003ff4 <__ssputs_r>
 8004116:	3001      	adds	r0, #1
 8004118:	f000 80a9 	beq.w	800426e <_svfiprintf_r+0x1c6>
 800411c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800411e:	445a      	add	r2, fp
 8004120:	9209      	str	r2, [sp, #36]	; 0x24
 8004122:	f89a 3000 	ldrb.w	r3, [sl]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80a1 	beq.w	800426e <_svfiprintf_r+0x1c6>
 800412c:	2300      	movs	r3, #0
 800412e:	f04f 32ff 	mov.w	r2, #4294967295
 8004132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004136:	f10a 0a01 	add.w	sl, sl, #1
 800413a:	9304      	str	r3, [sp, #16]
 800413c:	9307      	str	r3, [sp, #28]
 800413e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004142:	931a      	str	r3, [sp, #104]	; 0x68
 8004144:	4654      	mov	r4, sl
 8004146:	2205      	movs	r2, #5
 8004148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800414c:	4850      	ldr	r0, [pc, #320]	; (8004290 <_svfiprintf_r+0x1e8>)
 800414e:	f7fc f84f 	bl	80001f0 <memchr>
 8004152:	9a04      	ldr	r2, [sp, #16]
 8004154:	b9d8      	cbnz	r0, 800418e <_svfiprintf_r+0xe6>
 8004156:	06d0      	lsls	r0, r2, #27
 8004158:	bf44      	itt	mi
 800415a:	2320      	movmi	r3, #32
 800415c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004160:	0711      	lsls	r1, r2, #28
 8004162:	bf44      	itt	mi
 8004164:	232b      	movmi	r3, #43	; 0x2b
 8004166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800416a:	f89a 3000 	ldrb.w	r3, [sl]
 800416e:	2b2a      	cmp	r3, #42	; 0x2a
 8004170:	d015      	beq.n	800419e <_svfiprintf_r+0xf6>
 8004172:	9a07      	ldr	r2, [sp, #28]
 8004174:	4654      	mov	r4, sl
 8004176:	2000      	movs	r0, #0
 8004178:	f04f 0c0a 	mov.w	ip, #10
 800417c:	4621      	mov	r1, r4
 800417e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004182:	3b30      	subs	r3, #48	; 0x30
 8004184:	2b09      	cmp	r3, #9
 8004186:	d94d      	bls.n	8004224 <_svfiprintf_r+0x17c>
 8004188:	b1b0      	cbz	r0, 80041b8 <_svfiprintf_r+0x110>
 800418a:	9207      	str	r2, [sp, #28]
 800418c:	e014      	b.n	80041b8 <_svfiprintf_r+0x110>
 800418e:	eba0 0308 	sub.w	r3, r0, r8
 8004192:	fa09 f303 	lsl.w	r3, r9, r3
 8004196:	4313      	orrs	r3, r2
 8004198:	9304      	str	r3, [sp, #16]
 800419a:	46a2      	mov	sl, r4
 800419c:	e7d2      	b.n	8004144 <_svfiprintf_r+0x9c>
 800419e:	9b03      	ldr	r3, [sp, #12]
 80041a0:	1d19      	adds	r1, r3, #4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	9103      	str	r1, [sp, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bfbb      	ittet	lt
 80041aa:	425b      	neglt	r3, r3
 80041ac:	f042 0202 	orrlt.w	r2, r2, #2
 80041b0:	9307      	strge	r3, [sp, #28]
 80041b2:	9307      	strlt	r3, [sp, #28]
 80041b4:	bfb8      	it	lt
 80041b6:	9204      	strlt	r2, [sp, #16]
 80041b8:	7823      	ldrb	r3, [r4, #0]
 80041ba:	2b2e      	cmp	r3, #46	; 0x2e
 80041bc:	d10c      	bne.n	80041d8 <_svfiprintf_r+0x130>
 80041be:	7863      	ldrb	r3, [r4, #1]
 80041c0:	2b2a      	cmp	r3, #42	; 0x2a
 80041c2:	d134      	bne.n	800422e <_svfiprintf_r+0x186>
 80041c4:	9b03      	ldr	r3, [sp, #12]
 80041c6:	1d1a      	adds	r2, r3, #4
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	9203      	str	r2, [sp, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	bfb8      	it	lt
 80041d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80041d4:	3402      	adds	r4, #2
 80041d6:	9305      	str	r3, [sp, #20]
 80041d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80042a0 <_svfiprintf_r+0x1f8>
 80041dc:	7821      	ldrb	r1, [r4, #0]
 80041de:	2203      	movs	r2, #3
 80041e0:	4650      	mov	r0, sl
 80041e2:	f7fc f805 	bl	80001f0 <memchr>
 80041e6:	b138      	cbz	r0, 80041f8 <_svfiprintf_r+0x150>
 80041e8:	9b04      	ldr	r3, [sp, #16]
 80041ea:	eba0 000a 	sub.w	r0, r0, sl
 80041ee:	2240      	movs	r2, #64	; 0x40
 80041f0:	4082      	lsls	r2, r0
 80041f2:	4313      	orrs	r3, r2
 80041f4:	3401      	adds	r4, #1
 80041f6:	9304      	str	r3, [sp, #16]
 80041f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041fc:	4825      	ldr	r0, [pc, #148]	; (8004294 <_svfiprintf_r+0x1ec>)
 80041fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004202:	2206      	movs	r2, #6
 8004204:	f7fb fff4 	bl	80001f0 <memchr>
 8004208:	2800      	cmp	r0, #0
 800420a:	d038      	beq.n	800427e <_svfiprintf_r+0x1d6>
 800420c:	4b22      	ldr	r3, [pc, #136]	; (8004298 <_svfiprintf_r+0x1f0>)
 800420e:	bb1b      	cbnz	r3, 8004258 <_svfiprintf_r+0x1b0>
 8004210:	9b03      	ldr	r3, [sp, #12]
 8004212:	3307      	adds	r3, #7
 8004214:	f023 0307 	bic.w	r3, r3, #7
 8004218:	3308      	adds	r3, #8
 800421a:	9303      	str	r3, [sp, #12]
 800421c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800421e:	4433      	add	r3, r6
 8004220:	9309      	str	r3, [sp, #36]	; 0x24
 8004222:	e768      	b.n	80040f6 <_svfiprintf_r+0x4e>
 8004224:	fb0c 3202 	mla	r2, ip, r2, r3
 8004228:	460c      	mov	r4, r1
 800422a:	2001      	movs	r0, #1
 800422c:	e7a6      	b.n	800417c <_svfiprintf_r+0xd4>
 800422e:	2300      	movs	r3, #0
 8004230:	3401      	adds	r4, #1
 8004232:	9305      	str	r3, [sp, #20]
 8004234:	4619      	mov	r1, r3
 8004236:	f04f 0c0a 	mov.w	ip, #10
 800423a:	4620      	mov	r0, r4
 800423c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004240:	3a30      	subs	r2, #48	; 0x30
 8004242:	2a09      	cmp	r2, #9
 8004244:	d903      	bls.n	800424e <_svfiprintf_r+0x1a6>
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0c6      	beq.n	80041d8 <_svfiprintf_r+0x130>
 800424a:	9105      	str	r1, [sp, #20]
 800424c:	e7c4      	b.n	80041d8 <_svfiprintf_r+0x130>
 800424e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004252:	4604      	mov	r4, r0
 8004254:	2301      	movs	r3, #1
 8004256:	e7f0      	b.n	800423a <_svfiprintf_r+0x192>
 8004258:	ab03      	add	r3, sp, #12
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	462a      	mov	r2, r5
 800425e:	4b0f      	ldr	r3, [pc, #60]	; (800429c <_svfiprintf_r+0x1f4>)
 8004260:	a904      	add	r1, sp, #16
 8004262:	4638      	mov	r0, r7
 8004264:	f3af 8000 	nop.w
 8004268:	1c42      	adds	r2, r0, #1
 800426a:	4606      	mov	r6, r0
 800426c:	d1d6      	bne.n	800421c <_svfiprintf_r+0x174>
 800426e:	89ab      	ldrh	r3, [r5, #12]
 8004270:	065b      	lsls	r3, r3, #25
 8004272:	f53f af2d 	bmi.w	80040d0 <_svfiprintf_r+0x28>
 8004276:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004278:	b01d      	add	sp, #116	; 0x74
 800427a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800427e:	ab03      	add	r3, sp, #12
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	462a      	mov	r2, r5
 8004284:	4b05      	ldr	r3, [pc, #20]	; (800429c <_svfiprintf_r+0x1f4>)
 8004286:	a904      	add	r1, sp, #16
 8004288:	4638      	mov	r0, r7
 800428a:	f000 f879 	bl	8004380 <_printf_i>
 800428e:	e7eb      	b.n	8004268 <_svfiprintf_r+0x1c0>
 8004290:	08004744 	.word	0x08004744
 8004294:	0800474e 	.word	0x0800474e
 8004298:	00000000 	.word	0x00000000
 800429c:	08003ff5 	.word	0x08003ff5
 80042a0:	0800474a 	.word	0x0800474a

080042a4 <_printf_common>:
 80042a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a8:	4616      	mov	r6, r2
 80042aa:	4699      	mov	r9, r3
 80042ac:	688a      	ldr	r2, [r1, #8]
 80042ae:	690b      	ldr	r3, [r1, #16]
 80042b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042b4:	4293      	cmp	r3, r2
 80042b6:	bfb8      	it	lt
 80042b8:	4613      	movlt	r3, r2
 80042ba:	6033      	str	r3, [r6, #0]
 80042bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042c0:	4607      	mov	r7, r0
 80042c2:	460c      	mov	r4, r1
 80042c4:	b10a      	cbz	r2, 80042ca <_printf_common+0x26>
 80042c6:	3301      	adds	r3, #1
 80042c8:	6033      	str	r3, [r6, #0]
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	0699      	lsls	r1, r3, #26
 80042ce:	bf42      	ittt	mi
 80042d0:	6833      	ldrmi	r3, [r6, #0]
 80042d2:	3302      	addmi	r3, #2
 80042d4:	6033      	strmi	r3, [r6, #0]
 80042d6:	6825      	ldr	r5, [r4, #0]
 80042d8:	f015 0506 	ands.w	r5, r5, #6
 80042dc:	d106      	bne.n	80042ec <_printf_common+0x48>
 80042de:	f104 0a19 	add.w	sl, r4, #25
 80042e2:	68e3      	ldr	r3, [r4, #12]
 80042e4:	6832      	ldr	r2, [r6, #0]
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	42ab      	cmp	r3, r5
 80042ea:	dc26      	bgt.n	800433a <_printf_common+0x96>
 80042ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042f0:	1e13      	subs	r3, r2, #0
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	bf18      	it	ne
 80042f6:	2301      	movne	r3, #1
 80042f8:	0692      	lsls	r2, r2, #26
 80042fa:	d42b      	bmi.n	8004354 <_printf_common+0xb0>
 80042fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004300:	4649      	mov	r1, r9
 8004302:	4638      	mov	r0, r7
 8004304:	47c0      	blx	r8
 8004306:	3001      	adds	r0, #1
 8004308:	d01e      	beq.n	8004348 <_printf_common+0xa4>
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	6922      	ldr	r2, [r4, #16]
 800430e:	f003 0306 	and.w	r3, r3, #6
 8004312:	2b04      	cmp	r3, #4
 8004314:	bf02      	ittt	eq
 8004316:	68e5      	ldreq	r5, [r4, #12]
 8004318:	6833      	ldreq	r3, [r6, #0]
 800431a:	1aed      	subeq	r5, r5, r3
 800431c:	68a3      	ldr	r3, [r4, #8]
 800431e:	bf0c      	ite	eq
 8004320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004324:	2500      	movne	r5, #0
 8004326:	4293      	cmp	r3, r2
 8004328:	bfc4      	itt	gt
 800432a:	1a9b      	subgt	r3, r3, r2
 800432c:	18ed      	addgt	r5, r5, r3
 800432e:	2600      	movs	r6, #0
 8004330:	341a      	adds	r4, #26
 8004332:	42b5      	cmp	r5, r6
 8004334:	d11a      	bne.n	800436c <_printf_common+0xc8>
 8004336:	2000      	movs	r0, #0
 8004338:	e008      	b.n	800434c <_printf_common+0xa8>
 800433a:	2301      	movs	r3, #1
 800433c:	4652      	mov	r2, sl
 800433e:	4649      	mov	r1, r9
 8004340:	4638      	mov	r0, r7
 8004342:	47c0      	blx	r8
 8004344:	3001      	adds	r0, #1
 8004346:	d103      	bne.n	8004350 <_printf_common+0xac>
 8004348:	f04f 30ff 	mov.w	r0, #4294967295
 800434c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004350:	3501      	adds	r5, #1
 8004352:	e7c6      	b.n	80042e2 <_printf_common+0x3e>
 8004354:	18e1      	adds	r1, r4, r3
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	2030      	movs	r0, #48	; 0x30
 800435a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800435e:	4422      	add	r2, r4
 8004360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004368:	3302      	adds	r3, #2
 800436a:	e7c7      	b.n	80042fc <_printf_common+0x58>
 800436c:	2301      	movs	r3, #1
 800436e:	4622      	mov	r2, r4
 8004370:	4649      	mov	r1, r9
 8004372:	4638      	mov	r0, r7
 8004374:	47c0      	blx	r8
 8004376:	3001      	adds	r0, #1
 8004378:	d0e6      	beq.n	8004348 <_printf_common+0xa4>
 800437a:	3601      	adds	r6, #1
 800437c:	e7d9      	b.n	8004332 <_printf_common+0x8e>
	...

08004380 <_printf_i>:
 8004380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004384:	7e0f      	ldrb	r7, [r1, #24]
 8004386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004388:	2f78      	cmp	r7, #120	; 0x78
 800438a:	4691      	mov	r9, r2
 800438c:	4680      	mov	r8, r0
 800438e:	460c      	mov	r4, r1
 8004390:	469a      	mov	sl, r3
 8004392:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004396:	d807      	bhi.n	80043a8 <_printf_i+0x28>
 8004398:	2f62      	cmp	r7, #98	; 0x62
 800439a:	d80a      	bhi.n	80043b2 <_printf_i+0x32>
 800439c:	2f00      	cmp	r7, #0
 800439e:	f000 80d4 	beq.w	800454a <_printf_i+0x1ca>
 80043a2:	2f58      	cmp	r7, #88	; 0x58
 80043a4:	f000 80c0 	beq.w	8004528 <_printf_i+0x1a8>
 80043a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043b0:	e03a      	b.n	8004428 <_printf_i+0xa8>
 80043b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043b6:	2b15      	cmp	r3, #21
 80043b8:	d8f6      	bhi.n	80043a8 <_printf_i+0x28>
 80043ba:	a101      	add	r1, pc, #4	; (adr r1, 80043c0 <_printf_i+0x40>)
 80043bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043c0:	08004419 	.word	0x08004419
 80043c4:	0800442d 	.word	0x0800442d
 80043c8:	080043a9 	.word	0x080043a9
 80043cc:	080043a9 	.word	0x080043a9
 80043d0:	080043a9 	.word	0x080043a9
 80043d4:	080043a9 	.word	0x080043a9
 80043d8:	0800442d 	.word	0x0800442d
 80043dc:	080043a9 	.word	0x080043a9
 80043e0:	080043a9 	.word	0x080043a9
 80043e4:	080043a9 	.word	0x080043a9
 80043e8:	080043a9 	.word	0x080043a9
 80043ec:	08004531 	.word	0x08004531
 80043f0:	08004459 	.word	0x08004459
 80043f4:	080044eb 	.word	0x080044eb
 80043f8:	080043a9 	.word	0x080043a9
 80043fc:	080043a9 	.word	0x080043a9
 8004400:	08004553 	.word	0x08004553
 8004404:	080043a9 	.word	0x080043a9
 8004408:	08004459 	.word	0x08004459
 800440c:	080043a9 	.word	0x080043a9
 8004410:	080043a9 	.word	0x080043a9
 8004414:	080044f3 	.word	0x080044f3
 8004418:	682b      	ldr	r3, [r5, #0]
 800441a:	1d1a      	adds	r2, r3, #4
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	602a      	str	r2, [r5, #0]
 8004420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004428:	2301      	movs	r3, #1
 800442a:	e09f      	b.n	800456c <_printf_i+0x1ec>
 800442c:	6820      	ldr	r0, [r4, #0]
 800442e:	682b      	ldr	r3, [r5, #0]
 8004430:	0607      	lsls	r7, r0, #24
 8004432:	f103 0104 	add.w	r1, r3, #4
 8004436:	6029      	str	r1, [r5, #0]
 8004438:	d501      	bpl.n	800443e <_printf_i+0xbe>
 800443a:	681e      	ldr	r6, [r3, #0]
 800443c:	e003      	b.n	8004446 <_printf_i+0xc6>
 800443e:	0646      	lsls	r6, r0, #25
 8004440:	d5fb      	bpl.n	800443a <_printf_i+0xba>
 8004442:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004446:	2e00      	cmp	r6, #0
 8004448:	da03      	bge.n	8004452 <_printf_i+0xd2>
 800444a:	232d      	movs	r3, #45	; 0x2d
 800444c:	4276      	negs	r6, r6
 800444e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004452:	485a      	ldr	r0, [pc, #360]	; (80045bc <_printf_i+0x23c>)
 8004454:	230a      	movs	r3, #10
 8004456:	e012      	b.n	800447e <_printf_i+0xfe>
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	6820      	ldr	r0, [r4, #0]
 800445c:	1d19      	adds	r1, r3, #4
 800445e:	6029      	str	r1, [r5, #0]
 8004460:	0605      	lsls	r5, r0, #24
 8004462:	d501      	bpl.n	8004468 <_printf_i+0xe8>
 8004464:	681e      	ldr	r6, [r3, #0]
 8004466:	e002      	b.n	800446e <_printf_i+0xee>
 8004468:	0641      	lsls	r1, r0, #25
 800446a:	d5fb      	bpl.n	8004464 <_printf_i+0xe4>
 800446c:	881e      	ldrh	r6, [r3, #0]
 800446e:	4853      	ldr	r0, [pc, #332]	; (80045bc <_printf_i+0x23c>)
 8004470:	2f6f      	cmp	r7, #111	; 0x6f
 8004472:	bf0c      	ite	eq
 8004474:	2308      	moveq	r3, #8
 8004476:	230a      	movne	r3, #10
 8004478:	2100      	movs	r1, #0
 800447a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800447e:	6865      	ldr	r5, [r4, #4]
 8004480:	60a5      	str	r5, [r4, #8]
 8004482:	2d00      	cmp	r5, #0
 8004484:	bfa2      	ittt	ge
 8004486:	6821      	ldrge	r1, [r4, #0]
 8004488:	f021 0104 	bicge.w	r1, r1, #4
 800448c:	6021      	strge	r1, [r4, #0]
 800448e:	b90e      	cbnz	r6, 8004494 <_printf_i+0x114>
 8004490:	2d00      	cmp	r5, #0
 8004492:	d04b      	beq.n	800452c <_printf_i+0x1ac>
 8004494:	4615      	mov	r5, r2
 8004496:	fbb6 f1f3 	udiv	r1, r6, r3
 800449a:	fb03 6711 	mls	r7, r3, r1, r6
 800449e:	5dc7      	ldrb	r7, [r0, r7]
 80044a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044a4:	4637      	mov	r7, r6
 80044a6:	42bb      	cmp	r3, r7
 80044a8:	460e      	mov	r6, r1
 80044aa:	d9f4      	bls.n	8004496 <_printf_i+0x116>
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d10b      	bne.n	80044c8 <_printf_i+0x148>
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	07de      	lsls	r6, r3, #31
 80044b4:	d508      	bpl.n	80044c8 <_printf_i+0x148>
 80044b6:	6923      	ldr	r3, [r4, #16]
 80044b8:	6861      	ldr	r1, [r4, #4]
 80044ba:	4299      	cmp	r1, r3
 80044bc:	bfde      	ittt	le
 80044be:	2330      	movle	r3, #48	; 0x30
 80044c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044c8:	1b52      	subs	r2, r2, r5
 80044ca:	6122      	str	r2, [r4, #16]
 80044cc:	f8cd a000 	str.w	sl, [sp]
 80044d0:	464b      	mov	r3, r9
 80044d2:	aa03      	add	r2, sp, #12
 80044d4:	4621      	mov	r1, r4
 80044d6:	4640      	mov	r0, r8
 80044d8:	f7ff fee4 	bl	80042a4 <_printf_common>
 80044dc:	3001      	adds	r0, #1
 80044de:	d14a      	bne.n	8004576 <_printf_i+0x1f6>
 80044e0:	f04f 30ff 	mov.w	r0, #4294967295
 80044e4:	b004      	add	sp, #16
 80044e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	f043 0320 	orr.w	r3, r3, #32
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	4833      	ldr	r0, [pc, #204]	; (80045c0 <_printf_i+0x240>)
 80044f4:	2778      	movs	r7, #120	; 0x78
 80044f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	6829      	ldr	r1, [r5, #0]
 80044fe:	061f      	lsls	r7, r3, #24
 8004500:	f851 6b04 	ldr.w	r6, [r1], #4
 8004504:	d402      	bmi.n	800450c <_printf_i+0x18c>
 8004506:	065f      	lsls	r7, r3, #25
 8004508:	bf48      	it	mi
 800450a:	b2b6      	uxthmi	r6, r6
 800450c:	07df      	lsls	r7, r3, #31
 800450e:	bf48      	it	mi
 8004510:	f043 0320 	orrmi.w	r3, r3, #32
 8004514:	6029      	str	r1, [r5, #0]
 8004516:	bf48      	it	mi
 8004518:	6023      	strmi	r3, [r4, #0]
 800451a:	b91e      	cbnz	r6, 8004524 <_printf_i+0x1a4>
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	f023 0320 	bic.w	r3, r3, #32
 8004522:	6023      	str	r3, [r4, #0]
 8004524:	2310      	movs	r3, #16
 8004526:	e7a7      	b.n	8004478 <_printf_i+0xf8>
 8004528:	4824      	ldr	r0, [pc, #144]	; (80045bc <_printf_i+0x23c>)
 800452a:	e7e4      	b.n	80044f6 <_printf_i+0x176>
 800452c:	4615      	mov	r5, r2
 800452e:	e7bd      	b.n	80044ac <_printf_i+0x12c>
 8004530:	682b      	ldr	r3, [r5, #0]
 8004532:	6826      	ldr	r6, [r4, #0]
 8004534:	6961      	ldr	r1, [r4, #20]
 8004536:	1d18      	adds	r0, r3, #4
 8004538:	6028      	str	r0, [r5, #0]
 800453a:	0635      	lsls	r5, r6, #24
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	d501      	bpl.n	8004544 <_printf_i+0x1c4>
 8004540:	6019      	str	r1, [r3, #0]
 8004542:	e002      	b.n	800454a <_printf_i+0x1ca>
 8004544:	0670      	lsls	r0, r6, #25
 8004546:	d5fb      	bpl.n	8004540 <_printf_i+0x1c0>
 8004548:	8019      	strh	r1, [r3, #0]
 800454a:	2300      	movs	r3, #0
 800454c:	6123      	str	r3, [r4, #16]
 800454e:	4615      	mov	r5, r2
 8004550:	e7bc      	b.n	80044cc <_printf_i+0x14c>
 8004552:	682b      	ldr	r3, [r5, #0]
 8004554:	1d1a      	adds	r2, r3, #4
 8004556:	602a      	str	r2, [r5, #0]
 8004558:	681d      	ldr	r5, [r3, #0]
 800455a:	6862      	ldr	r2, [r4, #4]
 800455c:	2100      	movs	r1, #0
 800455e:	4628      	mov	r0, r5
 8004560:	f7fb fe46 	bl	80001f0 <memchr>
 8004564:	b108      	cbz	r0, 800456a <_printf_i+0x1ea>
 8004566:	1b40      	subs	r0, r0, r5
 8004568:	6060      	str	r0, [r4, #4]
 800456a:	6863      	ldr	r3, [r4, #4]
 800456c:	6123      	str	r3, [r4, #16]
 800456e:	2300      	movs	r3, #0
 8004570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004574:	e7aa      	b.n	80044cc <_printf_i+0x14c>
 8004576:	6923      	ldr	r3, [r4, #16]
 8004578:	462a      	mov	r2, r5
 800457a:	4649      	mov	r1, r9
 800457c:	4640      	mov	r0, r8
 800457e:	47d0      	blx	sl
 8004580:	3001      	adds	r0, #1
 8004582:	d0ad      	beq.n	80044e0 <_printf_i+0x160>
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	079b      	lsls	r3, r3, #30
 8004588:	d413      	bmi.n	80045b2 <_printf_i+0x232>
 800458a:	68e0      	ldr	r0, [r4, #12]
 800458c:	9b03      	ldr	r3, [sp, #12]
 800458e:	4298      	cmp	r0, r3
 8004590:	bfb8      	it	lt
 8004592:	4618      	movlt	r0, r3
 8004594:	e7a6      	b.n	80044e4 <_printf_i+0x164>
 8004596:	2301      	movs	r3, #1
 8004598:	4632      	mov	r2, r6
 800459a:	4649      	mov	r1, r9
 800459c:	4640      	mov	r0, r8
 800459e:	47d0      	blx	sl
 80045a0:	3001      	adds	r0, #1
 80045a2:	d09d      	beq.n	80044e0 <_printf_i+0x160>
 80045a4:	3501      	adds	r5, #1
 80045a6:	68e3      	ldr	r3, [r4, #12]
 80045a8:	9903      	ldr	r1, [sp, #12]
 80045aa:	1a5b      	subs	r3, r3, r1
 80045ac:	42ab      	cmp	r3, r5
 80045ae:	dcf2      	bgt.n	8004596 <_printf_i+0x216>
 80045b0:	e7eb      	b.n	800458a <_printf_i+0x20a>
 80045b2:	2500      	movs	r5, #0
 80045b4:	f104 0619 	add.w	r6, r4, #25
 80045b8:	e7f5      	b.n	80045a6 <_printf_i+0x226>
 80045ba:	bf00      	nop
 80045bc:	08004755 	.word	0x08004755
 80045c0:	08004766 	.word	0x08004766

080045c4 <memmove>:
 80045c4:	4288      	cmp	r0, r1
 80045c6:	b510      	push	{r4, lr}
 80045c8:	eb01 0402 	add.w	r4, r1, r2
 80045cc:	d902      	bls.n	80045d4 <memmove+0x10>
 80045ce:	4284      	cmp	r4, r0
 80045d0:	4623      	mov	r3, r4
 80045d2:	d807      	bhi.n	80045e4 <memmove+0x20>
 80045d4:	1e43      	subs	r3, r0, #1
 80045d6:	42a1      	cmp	r1, r4
 80045d8:	d008      	beq.n	80045ec <memmove+0x28>
 80045da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045e2:	e7f8      	b.n	80045d6 <memmove+0x12>
 80045e4:	4402      	add	r2, r0
 80045e6:	4601      	mov	r1, r0
 80045e8:	428a      	cmp	r2, r1
 80045ea:	d100      	bne.n	80045ee <memmove+0x2a>
 80045ec:	bd10      	pop	{r4, pc}
 80045ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045f6:	e7f7      	b.n	80045e8 <memmove+0x24>

080045f8 <_sbrk_r>:
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	4d06      	ldr	r5, [pc, #24]	; (8004614 <_sbrk_r+0x1c>)
 80045fc:	2300      	movs	r3, #0
 80045fe:	4604      	mov	r4, r0
 8004600:	4608      	mov	r0, r1
 8004602:	602b      	str	r3, [r5, #0]
 8004604:	f7fc feb4 	bl	8001370 <_sbrk>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d102      	bne.n	8004612 <_sbrk_r+0x1a>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	b103      	cbz	r3, 8004612 <_sbrk_r+0x1a>
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	bd38      	pop	{r3, r4, r5, pc}
 8004614:	2000027c 	.word	0x2000027c

08004618 <memcpy>:
 8004618:	440a      	add	r2, r1
 800461a:	4291      	cmp	r1, r2
 800461c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004620:	d100      	bne.n	8004624 <memcpy+0xc>
 8004622:	4770      	bx	lr
 8004624:	b510      	push	{r4, lr}
 8004626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800462a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800462e:	4291      	cmp	r1, r2
 8004630:	d1f9      	bne.n	8004626 <memcpy+0xe>
 8004632:	bd10      	pop	{r4, pc}

08004634 <_realloc_r>:
 8004634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004638:	4680      	mov	r8, r0
 800463a:	4614      	mov	r4, r2
 800463c:	460e      	mov	r6, r1
 800463e:	b921      	cbnz	r1, 800464a <_realloc_r+0x16>
 8004640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004644:	4611      	mov	r1, r2
 8004646:	f7ff bc49 	b.w	8003edc <_malloc_r>
 800464a:	b92a      	cbnz	r2, 8004658 <_realloc_r+0x24>
 800464c:	f7ff fbda 	bl	8003e04 <_free_r>
 8004650:	4625      	mov	r5, r4
 8004652:	4628      	mov	r0, r5
 8004654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004658:	f000 f81b 	bl	8004692 <_malloc_usable_size_r>
 800465c:	4284      	cmp	r4, r0
 800465e:	4607      	mov	r7, r0
 8004660:	d802      	bhi.n	8004668 <_realloc_r+0x34>
 8004662:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004666:	d812      	bhi.n	800468e <_realloc_r+0x5a>
 8004668:	4621      	mov	r1, r4
 800466a:	4640      	mov	r0, r8
 800466c:	f7ff fc36 	bl	8003edc <_malloc_r>
 8004670:	4605      	mov	r5, r0
 8004672:	2800      	cmp	r0, #0
 8004674:	d0ed      	beq.n	8004652 <_realloc_r+0x1e>
 8004676:	42bc      	cmp	r4, r7
 8004678:	4622      	mov	r2, r4
 800467a:	4631      	mov	r1, r6
 800467c:	bf28      	it	cs
 800467e:	463a      	movcs	r2, r7
 8004680:	f7ff ffca 	bl	8004618 <memcpy>
 8004684:	4631      	mov	r1, r6
 8004686:	4640      	mov	r0, r8
 8004688:	f7ff fbbc 	bl	8003e04 <_free_r>
 800468c:	e7e1      	b.n	8004652 <_realloc_r+0x1e>
 800468e:	4635      	mov	r5, r6
 8004690:	e7df      	b.n	8004652 <_realloc_r+0x1e>

08004692 <_malloc_usable_size_r>:
 8004692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004696:	1f18      	subs	r0, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	bfbc      	itt	lt
 800469c:	580b      	ldrlt	r3, [r1, r0]
 800469e:	18c0      	addlt	r0, r0, r3
 80046a0:	4770      	bx	lr
	...

080046a4 <_init>:
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a6:	bf00      	nop
 80046a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046aa:	bc08      	pop	{r3}
 80046ac:	469e      	mov	lr, r3
 80046ae:	4770      	bx	lr

080046b0 <_fini>:
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b2:	bf00      	nop
 80046b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b6:	bc08      	pop	{r3}
 80046b8:	469e      	mov	lr, r3
 80046ba:	4770      	bx	lr
